
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08009238  08009238  00019238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e4  080096e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080096e4  080096e4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096e4  080096e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080096ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00001b18  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cf8  20001cf8  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a020  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a5  00000000  00000000  0003a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d0  00000000  00000000  0003e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d59  00000000  00000000  0003fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b75  00000000  00000000  00043a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce886  00000000  00000000  0005b58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129e14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006418  00000000  00000000  00129e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800921c 	.word	0x0800921c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800921c 	.word	0x0800921c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <initTest>:
 *      Author: dbserver
 */

#include "controller.h"

void initTest(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
	xTaskCreate(taskTest,
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	4903      	ldr	r1, [pc, #12]	; (8000bc8 <initTest+0x20>)
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <initTest+0x24>)
 8000bbe:	f003 fefb 	bl	80049b8 <xTaskCreate>
				"taskTest",
				128,
				NULL,
				1,
				NULL);
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08009238 	.word	0x08009238
 8000bcc:	08000bd1 	.word	0x08000bd1

08000bd0 <taskTest>:

void taskTest(void *pvParameters) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("Geraldo\n");
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <taskTest+0x18>)
 8000bda:	f006 fb9d 	bl	8007318 <puts>
		vTaskDelay(pdMS_TO_TICKS(5000));
 8000bde:	f241 3088 	movw	r0, #5000	; 0x1388
 8000be2:	f004 f83d 	bl	8004c60 <vTaskDelay>
		printf("Geraldo\n");
 8000be6:	e7f7      	b.n	8000bd8 <taskTest+0x8>
 8000be8:	08009244 	.word	0x08009244

08000bec <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bf4:	1d39      	adds	r1, r7, #4
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <__io_putchar+0x20>)
 8000bfe:	f002 fb9b 	bl	8003338 <HAL_UART_Transmit>
  return ch;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001fc 	.word	0x200001fc

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c14:	f000 fb5e 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f81a 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f000 f88a 	bl	8000d34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c20:	f000 f858 	bl	8000cd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  start_rtos();
 8000c24:	f000 f914 	bl	8000e50 <start_rtos>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c28:	f002 ff5c 	bl	8003ae4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <main+0x34>)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <main+0x38>)
 8000c32:	f002 ffbf 	bl	8003bb4 <osThreadNew>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <main+0x3c>)
 8000c3a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c3c:	f002 ff86 	bl	8003b4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <main+0x30>
 8000c42:	bf00      	nop
 8000c44:	080092ac 	.word	0x080092ac
 8000c48:	08000e11 	.word	0x08000e11
 8000c4c:	20000284 	.word	0x20000284

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b090      	sub	sp, #64	; 0x40
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	2228      	movs	r2, #40	; 0x28
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f005 fde5 	bl	800682e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c86:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fdc1 	bl	8001818 <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c9c:	f000 f8d2 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fdea 	bl	8002894 <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000cc6:	f000 f8bd 	bl	8000e44 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3740      	adds	r7, #64	; 0x40
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_USART2_UART_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000ce0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART2_UART_Init+0x58>)
 8000d18:	f002 fac0 	bl	800329c <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d22:	f000 f88f 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200001fc 	.word	0x200001fc
 8000d30:	40004400 	.word	0x40004400

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d54:	6153      	str	r3, [r2, #20]
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_GPIO_Init+0xd4>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2120      	movs	r1, #32
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f000 fd19 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_EXT_GPIO_Port, LD_EXT_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f000 fd12 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_GPIO_Init+0xd8>)
 8000ddc:	f000 fb92 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD_EXT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD_EXT_Pin;
 8000de0:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 fb82 	bl	8001504 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000800 	.word	0x48000800

08000e10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f002 ff75 	bl	8003d08 <osDelay>
 8000e1e:	e7fb      	b.n	8000e18 <StartDefaultTask+0x8>

08000e20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e32:	f000 fa65 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40001000 	.word	0x40001000

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <start_rtos>:

TaskHandle_t hledTask;

void ledTask(void *arg);

void start_rtos(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af02      	add	r7, sp, #8
	xTaskCreate(ledTask,
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <start_rtos+0x24>)
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	4905      	ldr	r1, [pc, #20]	; (8000e78 <start_rtos+0x28>)
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <start_rtos+0x2c>)
 8000e66:	f003 fda7 	bl	80049b8 <xTaskCreate>
				NULL,
				1,
				&hledTask);

	//init_AHRS();
	initTest();
 8000e6a:	f7ff fe9d 	bl	8000ba8 <initTest>

	vTaskStartScheduler();
 8000e6e:	f003 ff2b 	bl	8004cc8 <vTaskStartScheduler>

	while(1);
 8000e72:	e7fe      	b.n	8000e72 <start_rtos+0x22>
 8000e74:	20000288 	.word	0x20000288
 8000e78:	08009258 	.word	0x08009258
 8000e7c:	08000e81 	.word	0x08000e81

08000e80 <ledTask>:
}

void ledTask(void *arg) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f000 fcaa 	bl	80017e8 <HAL_GPIO_WritePin>
		printf("Led ligada sem a placa\n");
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <ledTask+0x40>)
 8000e96:	f006 fa3f 	bl	8007318 <puts>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9e:	f003 fedf 	bl	8004c60 <vTaskDelay>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 fc9d 	bl	80017e8 <HAL_GPIO_WritePin>
		printf("Led desligada sem a placa\n");
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <ledTask+0x44>)
 8000eb0:	f006 fa32 	bl	8007318 <puts>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb8:	f003 fed2 	bl	8004c60 <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000ebc:	e7e4      	b.n	8000e88 <ledTask+0x8>
 8000ebe:	bf00      	nop
 8000ec0:	08009260 	.word	0x08009260
 8000ec4:	08009278 	.word	0x08009278

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_MspInit+0x4c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	210f      	movs	r1, #15
 8000f02:	f06f 0001 	mvn.w	r0, #1
 8000f06:	f000 fad3 	bl	80014b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_UART_MspInit+0x7c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d128      	bne.n	8000f8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f000 fabc 	bl	8001504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_InitTick+0xe0>)
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_InitTick+0xe0>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	61d3      	str	r3, [r2, #28]
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_InitTick+0xe0>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc4:	f107 0210 	add.w	r2, r7, #16
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fe96 	bl	8002d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fde:	f001 fe4b 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8000fe2:	6378      	str	r0, [r7, #52]	; 0x34
 8000fe4:	e004      	b.n	8000ff0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fe6:	f001 fe47 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8000fea:	4603      	mov	r3, r0
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	4a23      	ldr	r2, [pc, #140]	; (8001080 <HAL_InitTick+0xe4>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	0c9b      	lsrs	r3, r3, #18
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_InitTick+0xe8>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <HAL_InitTick+0xec>)
 8001002:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_InitTick+0xe8>)
 8001006:	f240 32e7 	movw	r2, #999	; 0x3e7
 800100a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_InitTick+0xe8>)
 800100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001010:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_InitTick+0xe8>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_InitTick+0xe8>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_InitTick+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <HAL_InitTick+0xe8>)
 8001026:	f001 fe9d 	bl	8002d64 <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001030:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001034:	2b00      	cmp	r3, #0
 8001036:	d11b      	bne.n	8001070 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <HAL_InitTick+0xe8>)
 800103a:	f001 fef5 	bl	8002e28 <HAL_TIM_Base_Start_IT>
 800103e:	4603      	mov	r3, r0
 8001040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001044:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001048:	2b00      	cmp	r3, #0
 800104a:	d111      	bne.n	8001070 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800104c:	2036      	movs	r0, #54	; 0x36
 800104e:	f000 fa4b 	bl	80014e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d808      	bhi.n	800106a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	2036      	movs	r0, #54	; 0x36
 800105e:	f000 fa27 	bl	80014b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_InitTick+0xf0>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e002      	b.n	8001070 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001070:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001074:	4618      	mov	r0, r3
 8001076:	3738      	adds	r7, #56	; 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	431bde83 	.word	0x431bde83
 8001084:	2000028c 	.word	0x2000028c
 8001088:	40001000 	.word	0x40001000
 800108c:	20000004 	.word	0x20000004

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM6_DAC1_IRQHandler+0x10>)
 80010c2:	f001 ff0d 	bl	8002ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000028c 	.word	0x2000028c

080010d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return 1;
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_kill>:

int _kill(int pid, int sig)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ea:	f005 fa6f 	bl	80065cc <__errno>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2216      	movs	r2, #22
 80010f2:	601a      	str	r2, [r3, #0]
  return -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_exit>:

void _exit (int status)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffe7 	bl	80010e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001112:	e7fe      	b.n	8001112 <_exit+0x12>

08001114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e00a      	b.n	800113c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001126:	f3af 8000 	nop.w
 800112a:	4601      	mov	r1, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbf0      	blt.n	8001126 <_read+0x12>
  }

  return len;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e009      	b.n	8001174 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fd3f 	bl	8000bec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf1      	blt.n	8001160 <_write+0x12>
  }
  return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
  return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_isatty>:

int _isatty(int file)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f005 f9d4 	bl	80065cc <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20003000 	.word	0x20003000
 8001250:	00000400 	.word	0x00000400
 8001254:	200002d8 	.word	0x200002d8
 8001258:	20001cf8 	.word	0x20001cf8

0800125c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001284:	f7ff ffea 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <LoopForever+0x6>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <LoopForever+0xe>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <LoopForever+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f005 fa89 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b2:	f7ff fcad 	bl	8000c10 <main>

080012b6 <LoopForever>:

LoopForever:
    b LoopForever
 80012b6:	e7fe      	b.n	80012b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80012c4:	080096ec 	.word	0x080096ec
  ldr r2, =_sbss
 80012c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80012cc:	20001cf8 	.word	0x20001cf8

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x28>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f8d8 	bl	800149a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f7ff fe56 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fdea 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	200002dc 	.word	0x200002dc

08001328 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;  
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200002dc 	.word	0x200002dc

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff4c 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c2:	f7ff ff61 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	6978      	ldr	r0, [r7, #20]
 80014ce:	f7ff ffb1 	bl	8001434 <NVIC_EncodePriority>
 80014d2:	4602      	mov	r2, r0
 80014d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff80 	bl	80013e0 <__NVIC_SetPriority>
}
 80014e0:	bf00      	nop
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff54 	bl	80013a4 <__NVIC_EnableIRQ>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	e14e      	b.n	80017b2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2101      	movs	r1, #1
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8140 	beq.w	80017ac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d005      	beq.n	8001544 <HAL_GPIO_Init+0x40>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d130      	bne.n	80015a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157a:	2201      	movs	r2, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 0201 	and.w	r2, r3, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d017      	beq.n	80015e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d123      	bne.n	8001636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0203 	and.w	r2, r3, #3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 809a 	beq.w	80017ac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001678:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001690:	4a50      	ldr	r2, [pc, #320]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ba:	d013      	beq.n	80016e4 <HAL_GPIO_Init+0x1e0>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_GPIO_Init+0x2d4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d00d      	beq.n	80016e0 <HAL_GPIO_Init+0x1dc>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a45      	ldr	r2, [pc, #276]	; (80017dc <HAL_GPIO_Init+0x2d8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d007      	beq.n	80016dc <HAL_GPIO_Init+0x1d8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <HAL_GPIO_Init+0x2dc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_GPIO_Init+0x1d4>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x1e2>
 80016d8:	2305      	movs	r3, #5
 80016da:	e004      	b.n	80016e6 <HAL_GPIO_Init+0x1e2>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x1e2>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_GPIO_Init+0x1e2>
 80016e4:	2300      	movs	r3, #0
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	f002 0203 	and.w	r2, r2, #3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f6:	4937      	ldr	r1, [pc, #220]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001704:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001728:	4a2e      	ldr	r2, [pc, #184]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001752:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f47f aea9 	bne.w	8001514 <HAL_GPIO_Init+0x10>
  }
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001804:	e002      	b.n	800180c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800181e:	af00      	add	r7, sp, #0
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001828:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	f001 b823 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 817d 	beq.w	8001b4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001854:	4bbc      	ldr	r3, [pc, #752]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b04      	cmp	r3, #4
 800185e:	d00c      	beq.n	800187a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001860:	4bb9      	ldr	r3, [pc, #740]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d15c      	bne.n	8001926 <HAL_RCC_OscConfig+0x10e>
 800186c:	4bb6      	ldr	r3, [pc, #728]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d155      	bne.n	8001926 <HAL_RCC_OscConfig+0x10e>
 800187a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800188e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	095b      	lsrs	r3, r3, #5
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <HAL_RCC_OscConfig+0x94>
 80018a6:	4ba8      	ldr	r3, [pc, #672]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	e015      	b.n	80018d8 <HAL_RCC_OscConfig+0xc0>
 80018ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018d4:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018dc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018e4:	fa92 f2a2 	rbit	r2, r2
 80018e8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018f0:	fab2 f282 	clz	r2, r2
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	f042 0220 	orr.w	r2, r2, #32
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	f002 021f 	and.w	r2, r2, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f202 	lsl.w	r2, r1, r2
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 811f 	beq.w	8001b4c <HAL_RCC_OscConfig+0x334>
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 8116 	bne.w	8001b4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	f000 bfaf 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x12e>
 8001938:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a82      	ldr	r2, [pc, #520]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e036      	b.n	80019b4 <HAL_RCC_OscConfig+0x19c>
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x158>
 8001956:	4b7c      	ldr	r3, [pc, #496]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7b      	ldr	r2, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 800195c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b79      	ldr	r3, [pc, #484]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a78      	ldr	r2, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e021      	b.n	80019b4 <HAL_RCC_OscConfig+0x19c>
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x184>
 8001982:	4b71      	ldr	r3, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a70      	ldr	r2, [pc, #448]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6d      	ldr	r2, [pc, #436]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x19c>
 800199c:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a66      	ldr	r2, [pc, #408]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b4:	4b64      	ldr	r3, [pc, #400]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	f023 020f 	bic.w	r2, r3, #15
 80019bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	495f      	ldr	r1, [pc, #380]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d059      	beq.n	8001a92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff fca3 	bl	8001328 <HAL_GetTick>
 80019e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fc9e 	bl	8001328 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b64      	cmp	r3, #100	; 0x64
 80019f6:	d902      	bls.n	80019fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	f000 bf43 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
 80019fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x218>
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e015      	b.n	8001a5c <HAL_RCC_OscConfig+0x244>
 8001a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a58:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a68:	fa92 f2a2 	rbit	r2, r2
 8001a6c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ab      	beq.n	80019e8 <HAL_RCC_OscConfig+0x1d0>
 8001a90:	e05d      	b.n	8001b4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fc49 	bl	8001328 <HAL_GetTick>
 8001a96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fc44 	bl	8001328 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d902      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	f000 bee9 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
 8001ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ac6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2cc>
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e015      	b.n	8001b10 <HAL_RCC_OscConfig+0x2f8>
 8001ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001afc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x330>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b18:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b1c:	fa92 f2a2 	rbit	r2, r2
 8001b20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f042 0220 	orr.w	r2, r2, #32
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f002 021f 	and.w	r2, r2, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ab      	bne.n	8001a9c <HAL_RCC_OscConfig+0x284>
 8001b44:	e003      	b.n	8001b4e <HAL_RCC_OscConfig+0x336>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 817d 	beq.w	8001e5e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b64:	4ba6      	ldr	r3, [pc, #664]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b70:	4ba3      	ldr	r3, [pc, #652]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d172      	bne.n	8001c62 <HAL_RCC_OscConfig+0x44a>
 8001b7c:	4ba0      	ldr	r3, [pc, #640]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d16c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x44a>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3a0>
 8001bb2:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	e013      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c8>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	2202      	movs	r2, #2
 8001be2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001be6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001bea:	fa92 f2a2 	rbit	r2, r2
 8001bee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001bf2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001bf6:	fab2 f282 	clz	r2, r2
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f042 0220 	orr.w	r2, r2, #32
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f002 021f 	and.w	r2, r2, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x410>
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f000 be2e 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b75      	ldr	r3, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	21f8      	movs	r1, #248	; 0xf8
 8001c3e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c46:	fa91 f1a1 	rbit	r1, r1
 8001c4a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c52:	fab1 f181 	clz	r1, r1
 8001c56:	b2c9      	uxtb	r1, r1
 8001c58:	408b      	lsls	r3, r1
 8001c5a:	4969      	ldr	r1, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c60:	e0fd      	b.n	8001e5e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8088 	beq.w	8001d84 <HAL_RCC_OscConfig+0x56c>
 8001c74:	2301      	movs	r3, #1
 8001c76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fb42 	bl	8001328 <HAL_GetTick>
 8001ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fb3d 	bl	8001328 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d902      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	f000 bde2 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4d8>
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e013      	b.n	8001d18 <HAL_RCC_OscConfig+0x500>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d14:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d22:	fa92 f2a2 	rbit	r2, r2
 8001d26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0af      	beq.n	8001caa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	21f8      	movs	r1, #248	; 0xf8
 8001d60:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d68:	fa91 f1a1 	rbit	r1, r1
 8001d6c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d70:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d74:	fab1 f181 	clz	r1, r1
 8001d78:	b2c9      	uxtb	r1, r1
 8001d7a:	408b      	lsls	r3, r1
 8001d7c:	4920      	ldr	r1, [pc, #128]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
 8001d82:	e06c      	b.n	8001e5e <HAL_RCC_OscConfig+0x646>
 8001d84:	2301      	movs	r3, #1
 8001d86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	461a      	mov	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff faba 	bl	8001328 <HAL_GetTick>
 8001db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fab5 	bl	8001328 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d902      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	f000 bd5a 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d104      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5ec>
 8001dfa:	4b01      	ldr	r3, [pc, #4]	; (8001e00 <HAL_RCC_OscConfig+0x5e8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_OscConfig+0x614>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e28:	4bc8      	ldr	r3, [pc, #800]	; (800214c <HAL_RCC_OscConfig+0x934>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e36:	fa92 f2a2 	rbit	r2, r2
 8001e3a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e3e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ad      	bne.n	8001dba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8110 	beq.w	8002094 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d079      	beq.n	8001f78 <HAL_RCC_OscConfig+0x760>
 8001e84:	2301      	movs	r3, #1
 8001e86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4bab      	ldr	r3, [pc, #684]	; (8002150 <HAL_RCC_OscConfig+0x938>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2301      	movs	r3, #1
 8001eac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fa3b 	bl	8001328 <HAL_GetTick>
 8001eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fa36 	bl	8001328 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d902      	bls.n	8001ece <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f000 bcdb 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ee8:	2202      	movs	r2, #2
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f28:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCC_OscConfig+0x934>)
 8001f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f34:	2102      	movs	r1, #2
 8001f36:	6019      	str	r1, [r3, #0]
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	fa93 f1a3 	rbit	r1, r3
 8001f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f4e:	6019      	str	r1, [r3, #0]
  return result;
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0a0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x6a0>
 8001f76:	e08d      	b.n	8002094 <HAL_RCC_OscConfig+0x87c>
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	fa93 f2a3 	rbit	r2, r3
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f9a:	601a      	str	r2, [r3, #0]
  return result;
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fa4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x938>)
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff f9b5 	bl	8001328 <HAL_GetTick>
 8001fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f9b0 	bl	8001328 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d902      	bls.n	8001fda <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	f000 bc55 	b.w	8002884 <HAL_RCC_OscConfig+0x106c>
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002006:	2202      	movs	r2, #2
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800202a:	2202      	movs	r2, #2
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002044:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_OscConfig+0x934>)
 8002048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002052:	2102      	movs	r1, #2
 8002054:	6019      	str	r1, [r3, #0]
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f1a3 	rbit	r1, r3
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800206c:	6019      	str	r1, [r3, #0]
  return result;
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d197      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 81a1 	beq.w	80023ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x934>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d116      	bne.n	80020ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_RCC_OscConfig+0x934>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_RCC_OscConfig+0x934>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCC_OscConfig+0x934>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_OscConfig+0x93c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d11a      	bne.n	800212c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_RCC_OscConfig+0x93c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_RCC_OscConfig+0x93c>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff f911 	bl	8001328 <HAL_GetTick>
 8002106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	e009      	b.n	8002120 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7ff f90c 	bl	8001328 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e3b1      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCC_OscConfig+0x93c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ef      	beq.n	800210c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d10d      	bne.n	8002158 <HAL_RCC_OscConfig+0x940>
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_OscConfig+0x934>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a02      	ldr	r2, [pc, #8]	; (800214c <HAL_RCC_OscConfig+0x934>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e03c      	b.n	80021c4 <HAL_RCC_OscConfig+0x9ac>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	10908120 	.word	0x10908120
 8002154:	40007000 	.word	0x40007000
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x96a>
 8002168:	4bc1      	ldr	r3, [pc, #772]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4ac0      	ldr	r2, [pc, #768]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	4bbe      	ldr	r3, [pc, #760]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4abd      	ldr	r2, [pc, #756]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e020      	b.n	80021c4 <HAL_RCC_OscConfig+0x9ac>
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x994>
 8002192:	4bb7      	ldr	r3, [pc, #732]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4ab6      	ldr	r2, [pc, #728]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4bb4      	ldr	r3, [pc, #720]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4ab3      	ldr	r2, [pc, #716]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x9ac>
 80021ac:	4bb0      	ldr	r3, [pc, #704]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4aaf      	ldr	r2, [pc, #700]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	4bad      	ldr	r3, [pc, #692]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4aac      	ldr	r2, [pc, #688]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8081 	beq.w	80022d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff f8a7 	bl	8001328 <HAL_GetTick>
 80021da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff f8a2 	bl	8001328 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e345      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002200:	2202      	movs	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f2a3 	rbit	r2, r3
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002224:	2202      	movs	r2, #2
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800223e:	601a      	str	r2, [r3, #0]
  return result;
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002248:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0xa4c>
 800225e:	4b84      	ldr	r3, [pc, #528]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	e013      	b.n	800228c <HAL_RCC_OscConfig+0xa74>
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800226c:	2202      	movs	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fa93 f2a3 	rbit	r2, r3
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	4b79      	ldr	r3, [pc, #484]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002290:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002294:	2102      	movs	r1, #2
 8002296:	6011      	str	r1, [r2, #0]
 8002298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800229c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	fa92 f1a2 	rbit	r1, r2
 80022a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022ae:	6011      	str	r1, [r2, #0]
  return result;
 80022b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	fab2 f282 	clz	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f002 021f 	and.w	r2, r2, #31
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f202 	lsl.w	r2, r1, r2
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d084      	beq.n	80021e0 <HAL_RCC_OscConfig+0x9c8>
 80022d6:	e07f      	b.n	80023d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff f826 	bl	8001328 <HAL_GetTick>
 80022dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	e00b      	b.n	80022fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff f821 	bl	8001328 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e2c4      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002302:	2202      	movs	r2, #2
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002340:	601a      	str	r2, [r3, #0]
  return result;
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800234a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d102      	bne.n	8002366 <HAL_RCC_OscConfig+0xb4e>
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	e013      	b.n	800238e <HAL_RCC_OscConfig+0xb76>
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800236e:	2202      	movs	r2, #2
 8002370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002392:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002396:	2102      	movs	r1, #2
 8002398:	6011      	str	r1, [r2, #0]
 800239a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800239e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	fa92 f1a2 	rbit	r1, r2
 80023a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023b0:	6011      	str	r1, [r2, #0]
  return result;
 80023b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d184      	bne.n	80022e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8242 	beq.w	8002882 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_RCC_OscConfig+0xc58>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b08      	cmp	r3, #8
 8002408:	f000 8213 	beq.w	8002832 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b02      	cmp	r3, #2
 800241a:	f040 8162 	bne.w	80026e2 <HAL_RCC_OscConfig+0xeca>
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002426:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800242a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002442:	601a      	str	r2, [r3, #0]
  return result;
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800244c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	461a      	mov	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe ff60 	bl	8001328 <HAL_GetTick>
 8002468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e00c      	b.n	8002488 <HAL_RCC_OscConfig+0xc70>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe ff58 	bl	8001328 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1fd      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024ac:	601a      	str	r2, [r3, #0]
  return result;
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_OscConfig+0xcba>
 80024cc:	4bb0      	ldr	r3, [pc, #704]	; (8002790 <HAL_RCC_OscConfig+0xf78>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e027      	b.n	8002522 <HAL_RCC_OscConfig+0xd0a>
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	4b9c      	ldr	r3, [pc, #624]	; (8002790 <HAL_RCC_OscConfig+0xf78>)
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002526:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800252a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800252e:	6011      	str	r1, [r2, #0]
 8002530:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002534:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	fa92 f1a2 	rbit	r1, r2
 800253e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002542:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002546:	6011      	str	r1, [r2, #0]
  return result;
 8002548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800254c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f042 0220 	orr.w	r2, r2, #32
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 021f 	and.w	r2, r2, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d182      	bne.n	8002474 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256e:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0xf78>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	430b      	orrs	r3, r1
 8002590:	497f      	ldr	r1, [pc, #508]	; (8002790 <HAL_RCC_OscConfig+0xf78>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800259e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	fa93 f2a3 	rbit	r2, r3
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025ba:	601a      	str	r2, [r3, #0]
  return result;
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	461a      	mov	r2, r3
 80025d8:	2301      	movs	r3, #1
 80025da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fea4 	bl	8001328 <HAL_GetTick>
 80025e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e4:	e009      	b.n	80025fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fe9f 	bl	8001328 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e144      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800261e:	601a      	str	r2, [r3, #0]
  return result;
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002628:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_RCC_OscConfig+0xe2c>
 800263e:	4b54      	ldr	r3, [pc, #336]	; (8002790 <HAL_RCC_OscConfig+0xf78>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	e027      	b.n	8002694 <HAL_RCC_OscConfig+0xe7c>
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800264c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <HAL_RCC_OscConfig+0xf78>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002698:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800269c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fa92 f1a2 	rbit	r1, r2
 80026b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026b8:	6011      	str	r1, [r2, #0]
  return result;
 80026ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	fab2 f282 	clz	r2, r2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f042 0220 	orr.w	r2, r2, #32
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f002 021f 	and.w	r2, r2, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d082      	beq.n	80025e6 <HAL_RCC_OscConfig+0xdce>
 80026e0:	e0cf      	b.n	8002882 <HAL_RCC_OscConfig+0x106a>
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002706:	601a      	str	r2, [r3, #0]
  return result;
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002710:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800271c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	2300      	movs	r3, #0
 8002726:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fdfe 	bl	8001328 <HAL_GetTick>
 800272c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002730:	e009      	b.n	8002746 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fdf9 	bl	8001328 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e09e      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800274e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800276a:	601a      	str	r2, [r3, #0]
  return result;
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d104      	bne.n	8002794 <HAL_RCC_OscConfig+0xf7c>
 800278a:	4b01      	ldr	r3, [pc, #4]	; (8002790 <HAL_RCC_OscConfig+0xf78>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e029      	b.n	80027e4 <HAL_RCC_OscConfig+0xfcc>
 8002790:	40021000 	.word	0x40021000
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800279c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x1078>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027f0:	6011      	str	r1, [r2, #0]
 80027f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	fa92 f1a2 	rbit	r1, r2
 8002800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002804:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002808:	6011      	str	r1, [r2, #0]
  return result;
 800280a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f002 021f 	and.w	r2, r2, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d180      	bne.n	8002732 <HAL_RCC_OscConfig+0xf1a>
 8002830:	e027      	b.n	8002882 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e01e      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x1078>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800284e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002852:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	429a      	cmp	r2, r3
 8002864:	d10b      	bne.n	800287e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002866:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800286a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b09e      	sub	sp, #120	; 0x78
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e162      	b.n	8002b72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d910      	bls.n	80028dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 0207 	bic.w	r2, r3, #7
 80028c2:	498b      	ldr	r1, [pc, #556]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e14a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b82      	ldr	r3, [pc, #520]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	497f      	ldr	r1, [pc, #508]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80dc 	beq.w	8002ac0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d13c      	bne.n	800298a <HAL_RCC_ClockConfig+0xf6>
 8002910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002914:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <HAL_RCC_ClockConfig+0xa6>
 8002934:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	e00f      	b.n	800295a <HAL_RCC_ClockConfig+0xc6>
 800293a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	667b      	str	r3, [r7, #100]	; 0x64
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	663b      	str	r3, [r7, #96]	; 0x60
 800294e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002956:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800295e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002962:	fa92 f2a2 	rbit	r2, r2
 8002966:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800296a:	fab2 f282 	clz	r2, r2
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f042 0220 	orr.w	r2, r2, #32
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f002 021f 	and.w	r2, r2, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d17b      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0f3      	b.n	8002b72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d13c      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x178>
 8002992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002996:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d102      	bne.n	80029bc <HAL_RCC_ClockConfig+0x128>
 80029b6:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_ClockConfig+0x148>
 80029bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	643b      	str	r3, [r7, #64]	; 0x40
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d8:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80029e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f002 021f 	and.w	r2, r2, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d13a      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b2      	b.n	8002b72 <HAL_RCC_ClockConfig+0x2de>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x1a0>
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e00d      	b.n	8002a50 <HAL_RCC_ClockConfig+0x1bc>
 8002a34:	2302      	movs	r3, #2
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	2302      	movs	r3, #2
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2202      	movs	r2, #2
 8002a52:	61ba      	str	r2, [r7, #24]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	fa92 f2a2 	rbit	r2, r2
 8002a5a:	617a      	str	r2, [r7, #20]
  return result;
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	fab2 f282 	clz	r2, r2
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f042 0220 	orr.w	r2, r2, #32
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f002 021f 	and.w	r2, r2, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e079      	b.n	8002b72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	491a      	ldr	r1, [pc, #104]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7fe fc4a 	bl	8001328 <HAL_GetTick>
 8002a94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe fc46 	bl	8001328 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e061      	b.n	8002b72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d214      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4906      	ldr	r1, [pc, #24]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e040      	b.n	8002b72 <HAL_RCC_ClockConfig+0x2de>
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_ClockConfig+0x2e8>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	491a      	ldr	r1, [pc, #104]	; (8002b7c <HAL_RCC_ClockConfig+0x2e8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_RCC_ClockConfig+0x2e8>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4912      	ldr	r1, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x2e8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b36:	f000 f829 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_RCC_ClockConfig+0x2e8>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b44:	22f0      	movs	r2, #240	; 0xf0
 8002b46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	fa92 f2a2 	rbit	r2, r2
 8002b4e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	40d3      	lsrs	r3, r2
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x2ec>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_RCC_ClockConfig+0x2f0>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_RCC_ClockConfig+0x2f4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fa16 	bl	8000f9c <HAL_InitTick>
  
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3778      	adds	r7, #120	; 0x78
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	080092d0 	.word	0x080092d0
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b08b      	sub	sp, #44	; 0x2c
 8002b90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ba6:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d002      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x30>
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bba:	e03c      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bbe:	623b      	str	r3, [r7, #32]
      break;
 8002bc0:	e03c      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	fa92 f2a2 	rbit	r2, r2
 8002bd4:	607a      	str	r2, [r7, #4]
  return result;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	40d3      	lsrs	r3, r2
 8002be0:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002be2:	5cd3      	ldrb	r3, [r2, r3]
 8002be4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002be6:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	220f      	movs	r2, #15
 8002bf0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	fa92 f2a2 	rbit	r2, r2
 8002bf8:	60fa      	str	r2, [r7, #12]
  return result;
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	40d3      	lsrs	r3, r2
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
 8002c24:	e004      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	623b      	str	r3, [r7, #32]
      break;
 8002c34:	e002      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c38:	623b      	str	r3, [r7, #32]
      break;
 8002c3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	372c      	adds	r7, #44	; 0x2c
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	007a1200 	.word	0x007a1200
 8002c54:	080092e8 	.word	0x080092e8
 8002c58:	080092f8 	.word	0x080092f8
 8002c5c:	003d0900 	.word	0x003d0900

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000000 	.word	0x20000000

08002c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c7e:	f7ff ffef 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c82:	4601      	mov	r1, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	fa92 f2a2 	rbit	r2, r2
 8002c98:	603a      	str	r2, [r7, #0]
  return result;
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	40d3      	lsrs	r3, r2
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	080092e0 	.word	0x080092e0

08002cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cc2:	f7ff ffcd 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	fa92 f2a2 	rbit	r2, r2
 8002cdc:	603a      	str	r2, [r7, #0]
  return result;
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	40d3      	lsrs	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	080092e0 	.word	0x080092e0

08002d00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_GetClockConfig+0x60>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e049      	b.n	8002e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f841 	bl	8002e12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 f9e4 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e040      	b.n	8002ec2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <HAL_TIM_Base_Start_IT+0xa8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6a:	d009      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_TIM_Base_Start_IT+0xac>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x58>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d115      	bne.n	8002eac <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_TIM_Base_Start_IT+0xb4>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d015      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x96>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d011      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	e008      	b.n	8002ebe <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	00010007 	.word	0x00010007

08002ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0202 	mvn.w	r2, #2
 8002f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f905 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8f7 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f908 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0204 	mvn.w	r2, #4
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8db 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8cd 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8de 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0208 	mvn.w	r2, #8
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8b1 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8a3 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f8b4 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2208      	movs	r2, #8
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f887 	bl	8003132 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f879 	bl	800311e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f88a 	bl	8003146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd fede 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8f2 	bl	8003274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309e:	d10e      	bne.n	80030be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d107      	bne.n	80030be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8e5 	bl	8003288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d10e      	bne.n	80030ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d107      	bne.n	80030ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f838 	bl	800315a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b20      	cmp	r3, #32
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0220 	mvn.w	r2, #32
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8a5 	bl	8003260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a32      	ldr	r2, [pc, #200]	; (800324c <TIM_Base_SetConfig+0xdc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x28>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x28>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <TIM_Base_SetConfig+0xe0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a27      	ldr	r2, [pc, #156]	; (800324c <TIM_Base_SetConfig+0xdc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <TIM_Base_SetConfig+0x6a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d00f      	beq.n	80031da <TIM_Base_SetConfig+0x6a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a24      	ldr	r2, [pc, #144]	; (8003250 <TIM_Base_SetConfig+0xe0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0x6a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a23      	ldr	r2, [pc, #140]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0x6a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0x6a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a21      	ldr	r2, [pc, #132]	; (800325c <TIM_Base_SetConfig+0xec>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <TIM_Base_SetConfig+0xdc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0xc0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <TIM_Base_SetConfig+0xe4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0xc0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <TIM_Base_SetConfig+0xe8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0xc0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a0c      	ldr	r2, [pc, #48]	; (800325c <TIM_Base_SetConfig+0xec>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	615a      	str	r2, [r3, #20]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40000400 	.word	0x40000400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e040      	b.n	8003330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fe2a 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8b6 	bl	800344c <UART_SetConfig>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9e0 	bl	80036b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fa67 	bl	80037fc <UART_CheckIdleState>
 800332e:	4603      	mov	r3, r0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334c:	2b20      	cmp	r3, #32
 800334e:	d178      	bne.n	8003442 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Transmit+0x24>
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e071      	b.n	8003444 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2221      	movs	r2, #33	; 0x21
 800336c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336e:	f7fd ffdb 	bl	8001328 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d108      	bne.n	80033a0 <HAL_UART_Transmit+0x68>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e003      	b.n	80033a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a8:	e030      	b.n	800340c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fac9 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e03c      	b.n	8003444 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033dc:	b292      	uxth	r2, r2
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	3302      	adds	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	e008      	b.n	80033fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b292      	uxth	r2, r2
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1c8      	bne.n	80033aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2200      	movs	r2, #0
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa92 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e005      	b.n	8003444 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8a      	ldr	r3, [pc, #552]	; (80036a0 <UART_SetConfig+0x254>)
 8003478:	4013      	ands	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	6979      	ldr	r1, [r7, #20]
 8003480:	430b      	orrs	r3, r1
 8003482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a78      	ldr	r2, [pc, #480]	; (80036a4 <UART_SetConfig+0x258>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d120      	bne.n	800350a <UART_SetConfig+0xbe>
 80034c8:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <UART_SetConfig+0x25c>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d817      	bhi.n	8003504 <UART_SetConfig+0xb8>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x90>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034f9 	.word	0x080034f9
 80034e4:	080034ff 	.word	0x080034ff
 80034e8:	080034f3 	.word	0x080034f3
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e01d      	b.n	800352e <UART_SetConfig+0xe2>
 80034f2:	2302      	movs	r3, #2
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e01a      	b.n	800352e <UART_SetConfig+0xe2>
 80034f8:	2304      	movs	r3, #4
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e017      	b.n	800352e <UART_SetConfig+0xe2>
 80034fe:	2308      	movs	r3, #8
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e014      	b.n	800352e <UART_SetConfig+0xe2>
 8003504:	2310      	movs	r3, #16
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e011      	b.n	800352e <UART_SetConfig+0xe2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a67      	ldr	r2, [pc, #412]	; (80036ac <UART_SetConfig+0x260>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d102      	bne.n	800351a <UART_SetConfig+0xce>
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e009      	b.n	800352e <UART_SetConfig+0xe2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a64      	ldr	r2, [pc, #400]	; (80036b0 <UART_SetConfig+0x264>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d102      	bne.n	800352a <UART_SetConfig+0xde>
 8003524:	2300      	movs	r3, #0
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e001      	b.n	800352e <UART_SetConfig+0xe2>
 800352a:	2310      	movs	r3, #16
 800352c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003536:	d15a      	bne.n	80035ee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d827      	bhi.n	800358e <UART_SetConfig+0x142>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0xf8>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003569 	.word	0x08003569
 8003548:	08003571 	.word	0x08003571
 800354c:	08003579 	.word	0x08003579
 8003550:	0800358f 	.word	0x0800358f
 8003554:	0800357f 	.word	0x0800357f
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800358f 	.word	0x0800358f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7ff fb86 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 800356c:	61b8      	str	r0, [r7, #24]
        break;
 800356e:	e013      	b.n	8003598 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7ff fba4 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 8003574:	61b8      	str	r0, [r7, #24]
        break;
 8003576:	e00f      	b.n	8003598 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <UART_SetConfig+0x268>)
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e00c      	b.n	8003598 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7ff fb05 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8003582:	61b8      	str	r0, [r7, #24]
        break;
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e004      	b.n	8003598 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	77bb      	strb	r3, [r7, #30]
        break;
 8003596:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d074      	beq.n	8003688 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	005a      	lsls	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	d916      	bls.n	80035e8 <UART_SetConfig+0x19c>
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d212      	bcs.n	80035e8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f023 030f 	bic.w	r3, r3, #15
 80035ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	4313      	orrs	r3, r2
 80035dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	89fa      	ldrh	r2, [r7, #14]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	e04f      	b.n	8003688 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77bb      	strb	r3, [r7, #30]
 80035ec:	e04c      	b.n	8003688 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d828      	bhi.n	8003646 <UART_SetConfig+0x1fa>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0x1b0>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003629 	.word	0x08003629
 8003604:	08003631 	.word	0x08003631
 8003608:	08003647 	.word	0x08003647
 800360c:	08003637 	.word	0x08003637
 8003610:	08003647 	.word	0x08003647
 8003614:	08003647 	.word	0x08003647
 8003618:	08003647 	.word	0x08003647
 800361c:	0800363f 	.word	0x0800363f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7ff fb2a 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8003624:	61b8      	str	r0, [r7, #24]
        break;
 8003626:	e013      	b.n	8003650 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7ff fb48 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 800362c:	61b8      	str	r0, [r7, #24]
        break;
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <UART_SetConfig+0x268>)
 8003632:	61bb      	str	r3, [r7, #24]
        break;
 8003634:	e00c      	b.n	8003650 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003636:	f7ff faa9 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 800363a:	61b8      	str	r0, [r7, #24]
        break;
 800363c:	e008      	b.n	8003650 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	61bb      	str	r3, [r7, #24]
        break;
 8003644:	e004      	b.n	8003650 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77bb      	strb	r3, [r7, #30]
        break;
 800364e:	bf00      	nop
    }

    if (pclk != 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	085a      	lsrs	r2, r3, #1
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	441a      	add	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d909      	bls.n	8003684 <UART_SetConfig+0x238>
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003676:	d205      	bcs.n	8003684 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e001      	b.n	8003688 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003694:	7fbb      	ldrb	r3, [r7, #30]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	efff69f3 	.word	0xefff69f3
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40004400 	.word	0x40004400
 80036b0:	40004800 	.word	0x40004800
 80036b4:	007a1200 	.word	0x007a1200

080036b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01a      	beq.n	80037ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b6:	d10a      	bne.n	80037ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]
  }
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b098      	sub	sp, #96	; 0x60
 8003800:	af02      	add	r7, sp, #8
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800380c:	f7fd fd8c 	bl	8001328 <HAL_GetTick>
 8003810:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b08      	cmp	r3, #8
 800381e:	d12e      	bne.n	800387e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003828:	2200      	movs	r2, #0
 800382a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f88c 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d021      	beq.n	800387e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800384e:	653b      	str	r3, [r7, #80]	; 0x50
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
 800385a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800385e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e6      	bne.n	800383a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e062      	b.n	8003944 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b04      	cmp	r3, #4
 800388a:	d149      	bne.n	8003920 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800388c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003894:	2200      	movs	r2, #0
 8003896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f856 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d03c      	beq.n	8003920 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	623b      	str	r3, [r7, #32]
   return(result);
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
 80038c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e6      	bne.n	80038a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f8:	61fa      	str	r2, [r7, #28]
 80038fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	617b      	str	r3, [r7, #20]
   return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e011      	b.n	8003944 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3758      	adds	r7, #88	; 0x58
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395c:	e049      	b.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d045      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fd fcdf 	bl	8001328 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <UART_WaitOnFlagUntilTimeout+0x30>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e048      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d031      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d110      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2208      	movs	r2, #8
 80039a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f838 	bl	8003a1a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2208      	movs	r2, #8
 80039ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e029      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039cc:	d111      	bne.n	80039f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f81e 	bl	8003a1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e00f      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d0a6      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b095      	sub	sp, #84	; 0x54
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	643b      	str	r3, [r7, #64]	; 0x40
 8003a42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e6      	bne.n	8003a22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d118      	bne.n	8003ac2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f023 0310 	bic.w	r3, r3, #16
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	613b      	str	r3, [r7, #16]
   return(result);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ad6:	bf00      	nop
 8003ad8:	3754      	adds	r7, #84	; 0x54
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aea:	f3ef 8305 	mrs	r3, IPSR
 8003aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8003af0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af6:	f3ef 8310 	mrs	r3, PRIMASK
 8003afa:	607b      	str	r3, [r7, #4]
  return(result);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <osKernelInitialize+0x32>
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <osKernelInitialize+0x64>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d109      	bne.n	8003b1e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b16:	f06f 0305 	mvn.w	r3, #5
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e00c      	b.n	8003b38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <osKernelInitialize+0x64>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <osKernelInitialize+0x64>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e002      	b.n	8003b38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200002e0 	.word	0x200002e0

08003b4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b52:	f3ef 8305 	mrs	r3, IPSR
 8003b56:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b62:	607b      	str	r3, [r7, #4]
  return(result);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <osKernelStart+0x32>
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <osKernelStart+0x64>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d109      	bne.n	8003b86 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b72:	f3ef 8311 	mrs	r3, BASEPRI
 8003b76:	603b      	str	r3, [r7, #0]
  return(result);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003b7e:	f06f 0305 	mvn.w	r3, #5
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e00e      	b.n	8003ba4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <osKernelStart+0x64>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <osKernelStart+0x64>)
 8003b90:	2202      	movs	r2, #2
 8003b92:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003b94:	f001 f898 	bl	8004cc8 <vTaskStartScheduler>
      stat = osOK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e002      	b.n	8003ba4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200002e0 	.word	0x200002e0

08003bb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b092      	sub	sp, #72	; 0x48
 8003bb8:	af04      	add	r7, sp, #16
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc4:	f3ef 8305 	mrs	r3, IPSR
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 8094 	bne.w	8003cfa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd6:	623b      	str	r3, [r7, #32]
  return(result);
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 808d 	bne.w	8003cfa <osThreadNew+0x146>
 8003be0:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <osThreadNew+0x150>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d106      	bne.n	8003bf6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003be8:	f3ef 8311 	mrs	r3, BASEPRI
 8003bec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8082 	bne.w	8003cfa <osThreadNew+0x146>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d07e      	beq.n	8003cfa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003c00:	2318      	movs	r3, #24
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003c08:	f107 031b 	add.w	r3, r7, #27
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d045      	beq.n	8003ca6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <osThreadNew+0x74>
        name = attr->name;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <osThreadNew+0x9a>
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b38      	cmp	r3, #56	; 0x38
 8003c40:	d805      	bhi.n	8003c4e <osThreadNew+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <osThreadNew+0x9e>
        return (NULL);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e054      	b.n	8003cfc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <osThreadNew+0xd4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2bbb      	cmp	r3, #187	; 0xbb
 8003c70:	d90a      	bls.n	8003c88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <osThreadNew+0xd4>
        mem = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	e010      	b.n	8003caa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <osThreadNew+0xf6>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d108      	bne.n	8003caa <osThreadNew+0xf6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <osThreadNew+0xf6>
          mem = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca4:	e001      	b.n	8003caa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d110      	bne.n	8003cd2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cb8:	9202      	str	r2, [sp, #8]
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fe1a 	bl	8004900 <xTaskCreateStatic>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e013      	b.n	8003cfa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d110      	bne.n	8003cfa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fe64 	bl	80049b8 <xTaskCreate>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <osThreadNew+0x146>
          hTask = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cfa:	697b      	ldr	r3, [r7, #20]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3738      	adds	r7, #56	; 0x38
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200002e0 	.word	0x200002e0

08003d08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d10:	f3ef 8305 	mrs	r3, IPSR
 8003d14:	613b      	str	r3, [r7, #16]
  return(result);
 8003d16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10f      	bne.n	8003d3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <osDelay+0x34>
 8003d28:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <osDelay+0x58>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d109      	bne.n	8003d44 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d30:	f3ef 8311 	mrs	r3, BASEPRI
 8003d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <osDelay+0x3c>
    stat = osErrorISR;
 8003d3c:	f06f 0305 	mvn.w	r3, #5
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e007      	b.n	8003d54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 ff86 	bl	8004c60 <vTaskDelay>
    }
  }

  return (stat);
 8003d54:	697b      	ldr	r3, [r7, #20]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200002e0 	.word	0x200002e0

08003d64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4a06      	ldr	r2, [pc, #24]	; (8003d94 <vApplicationGetIdleTaskMemory+0x30>)
 8003d7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	200002e4 	.word	0x200002e4
 8003d94:	200003a0 	.word	0x200003a0

08003d98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003da8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4a06      	ldr	r2, [pc, #24]	; (8003dc8 <vApplicationGetTimerTaskMemory+0x30>)
 8003dae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db6:	601a      	str	r2, [r3, #0]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	200005a0 	.word	0x200005a0
 8003dc8:	2000065c 	.word	0x2000065c

08003dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f103 0208 	add.w	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f103 0208 	add.w	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f103 0208 	add.w	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e84:	d103      	bne.n	8003e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e00c      	b.n	8003ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3308      	adds	r3, #8
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e002      	b.n	8003e9c <vListInsert+0x2e>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d2f6      	bcs.n	8003e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6852      	ldr	r2, [r2, #4]
 8003f00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d103      	bne.n	8003f14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1e5a      	subs	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f5e:	f002 f839 	bl	8005fd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	441a      	add	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	; 0xff
 8003fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d114      	bne.n	8003fde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01a      	beq.n	8003ff2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3310      	adds	r3, #16
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f91f 	bl	8005204 <xTaskRemoveFromEventList>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <xQueueGenericReset+0xcc>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	e009      	b.n	8003ff2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3310      	adds	r3, #16
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fef2 	bl	8003dcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3324      	adds	r3, #36	; 0x24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff feed 	bl	8003dcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ff2:	f002 f81f 	bl	8006034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ff6:	2301      	movs	r3, #1
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08e      	sub	sp, #56	; 0x38
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <xQueueGenericCreateStatic+0x52>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <xQueueGenericCreateStatic+0x56>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <xQueueGenericCreateStatic+0x58>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	623b      	str	r3, [r7, #32]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <xQueueGenericCreateStatic+0x7e>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <xQueueGenericCreateStatic+0x82>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <xQueueGenericCreateStatic+0x84>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	61fb      	str	r3, [r7, #28]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040a2:	2350      	movs	r3, #80	; 0x50
 80040a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b50      	cmp	r3, #80	; 0x50
 80040aa:	d00a      	beq.n	80040c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	61bb      	str	r3, [r7, #24]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f805 	bl	80040f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3730      	adds	r7, #48	; 0x30
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e002      	b.n	8004114 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004120:	2101      	movs	r1, #1
 8004122:	69b8      	ldr	r0, [r7, #24]
 8004124:	f7ff ff06 	bl	8003f34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08e      	sub	sp, #56	; 0x38
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004146:	2300      	movs	r3, #0
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xQueueGenericSend+0x32>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d103      	bne.n	8004178 <xQueueGenericSend+0x40>
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <xQueueGenericSend+0x44>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <xQueueGenericSend+0x46>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <xQueueGenericSend+0x60>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x6e>
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <xQueueGenericSend+0x72>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericSend+0x74>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	623b      	str	r3, [r7, #32]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041c6:	f001 f9e5 	bl	8005594 <xTaskGetSchedulerState>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <xQueueGenericSend+0x9e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <xQueueGenericSend+0xa2>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <xQueueGenericSend+0xa4>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	61fb      	str	r3, [r7, #28]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041f6:	f001 feed 	bl	8005fd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <xQueueGenericSend+0xd4>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d129      	bne.n	8004260 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004212:	f000 fa07 	bl	8004624 <prvCopyDataToQueue>
 8004216:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	3324      	adds	r3, #36	; 0x24
 8004224:	4618      	mov	r0, r3
 8004226:	f000 ffed 	bl	8005204 <xTaskRemoveFromEventList>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004230:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <xQueueGenericSend+0x1f8>)
 8004232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	e00a      	b.n	8004258 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004248:	4b39      	ldr	r3, [pc, #228]	; (8004330 <xQueueGenericSend+0x1f8>)
 800424a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004258:	f001 feec 	bl	8006034 <vPortExitCritical>
				return pdPASS;
 800425c:	2301      	movs	r3, #1
 800425e:	e063      	b.n	8004328 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004266:	f001 fee5 	bl	8006034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800426a:	2300      	movs	r3, #0
 800426c:	e05c      	b.n	8004328 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	4618      	mov	r0, r3
 800427a:	f001 f827 	bl	80052cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800427e:	2301      	movs	r3, #1
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004282:	f001 fed7 	bl	8006034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004286:	f000 fd8f 	bl	8004da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800428a:	f001 fea3 	bl	8005fd4 <vPortEnterCritical>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004294:	b25b      	sxtb	r3, r3
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800429a:	d103      	bne.n	80042a4 <xQueueGenericSend+0x16c>
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b0:	d103      	bne.n	80042ba <xQueueGenericSend+0x182>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ba:	f001 febb 	bl	8006034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042be:	1d3a      	adds	r2, r7, #4
 80042c0:	f107 0314 	add.w	r3, r7, #20
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 f816 	bl	80052f8 <xTaskCheckForTimeOut>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d124      	bne.n	800431c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d4:	f000 fa9e 	bl	8004814 <prvIsQueueFull>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	3310      	adds	r3, #16
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 ff3c 	bl	8005164 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ee:	f000 fa29 	bl	8004744 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042f2:	f000 fd67 	bl	8004dc4 <xTaskResumeAll>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f af7c 	bne.w	80041f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <xQueueGenericSend+0x1f8>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	e772      	b.n	80041f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004312:	f000 fa17 	bl	8004744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004316:	f000 fd55 	bl	8004dc4 <xTaskResumeAll>
 800431a:	e76c      	b.n	80041f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800431c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431e:	f000 fa11 	bl	8004744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004322:	f000 fd4f 	bl	8004dc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004326:	2300      	movs	r3, #0
		}
	}
}
 8004328:	4618      	mov	r0, r3
 800432a:	3738      	adds	r7, #56	; 0x38
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	; 0x38
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d103      	bne.n	8004370 <xQueueGenericSendFromISR+0x3c>
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <xQueueGenericSendFromISR+0x40>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <xQueueGenericSendFromISR+0x42>
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	623b      	str	r3, [r7, #32]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d103      	bne.n	800439e <xQueueGenericSendFromISR+0x6a>
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <xQueueGenericSendFromISR+0x6e>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <xQueueGenericSendFromISR+0x70>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	61fb      	str	r3, [r7, #28]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043be:	f001 feeb 	bl	8006198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043c2:	f3ef 8211 	mrs	r2, BASEPRI
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	61ba      	str	r2, [r7, #24]
 80043d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <xQueueGenericSendFromISR+0xbc>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d12c      	bne.n	800444a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004400:	f000 f910 	bl	8004624 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004404:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d112      	bne.n	8004434 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	3324      	adds	r3, #36	; 0x24
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fef2 	bl	8005204 <xTaskRemoveFromEventList>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00e      	beq.n	8004444 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e007      	b.n	8004444 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004434:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004438:	3301      	adds	r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	b25a      	sxtb	r2, r3
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004444:	2301      	movs	r3, #1
 8004446:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004448:	e001      	b.n	800444e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800444a:	2300      	movs	r3, #0
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004458:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800445a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800445c:	4618      	mov	r0, r3
 800445e:	3738      	adds	r7, #56	; 0x38
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <xQueueReceive+0x30>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	623b      	str	r3, [r7, #32]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <xQueueReceive+0x3e>
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <xQueueReceive+0x42>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <xQueueReceive+0x44>
 80044a6:	2300      	movs	r3, #0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <xQueueReceive+0x5e>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	61fb      	str	r3, [r7, #28]
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044c2:	f001 f867 	bl	8005594 <xTaskGetSchedulerState>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <xQueueReceive+0x6e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <xQueueReceive+0x72>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <xQueueReceive+0x74>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xQueueReceive+0x8e>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61bb      	str	r3, [r7, #24]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044f2:	f001 fd6f 	bl	8005fd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01f      	beq.n	8004542 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004506:	f000 f8f7 	bl	80046f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00f      	beq.n	800453a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	3310      	adds	r3, #16
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fe70 	bl	8005204 <xTaskRemoveFromEventList>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800452a:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <xQueueReceive+0x1bc>)
 800452c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800453a:	f001 fd7b 	bl	8006034 <vPortExitCritical>
				return pdPASS;
 800453e:	2301      	movs	r3, #1
 8004540:	e069      	b.n	8004616 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004548:	f001 fd74 	bl	8006034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800454c:	2300      	movs	r3, #0
 800454e:	e062      	b.n	8004616 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004556:	f107 0310 	add.w	r3, r7, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f000 feb6 	bl	80052cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004560:	2301      	movs	r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004564:	f001 fd66 	bl	8006034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004568:	f000 fc1e 	bl	8004da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800456c:	f001 fd32 	bl	8005fd4 <vPortEnterCritical>
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004576:	b25b      	sxtb	r3, r3
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457c:	d103      	bne.n	8004586 <xQueueReceive+0x122>
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800458c:	b25b      	sxtb	r3, r3
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004592:	d103      	bne.n	800459c <xQueueReceive+0x138>
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800459c:	f001 fd4a 	bl	8006034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045a0:	1d3a      	adds	r2, r7, #4
 80045a2:	f107 0310 	add.w	r3, r7, #16
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fea5 	bl	80052f8 <xTaskCheckForTimeOut>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d123      	bne.n	80045fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b6:	f000 f917 	bl	80047e8 <prvIsQueueEmpty>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d017      	beq.n	80045f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fdcb 	bl	8005164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d0:	f000 f8b8 	bl	8004744 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045d4:	f000 fbf6 	bl	8004dc4 <xTaskResumeAll>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d189      	bne.n	80044f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <xQueueReceive+0x1bc>)
 80045e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	e780      	b.n	80044f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f2:	f000 f8a7 	bl	8004744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045f6:	f000 fbe5 	bl	8004dc4 <xTaskResumeAll>
 80045fa:	e77a      	b.n	80044f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fe:	f000 f8a1 	bl	8004744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004602:	f000 fbdf 	bl	8004dc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004608:	f000 f8ee 	bl	80047e8 <prvIsQueueEmpty>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	f43f af6f 	beq.w	80044f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004614:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004616:	4618      	mov	r0, r3
 8004618:	3730      	adds	r7, #48	; 0x30
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10d      	bne.n	800465e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d14d      	bne.n	80046e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 ffbe 	bl	80055d0 <xTaskPriorityDisinherit>
 8004654:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	e043      	b.n	80046e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d119      	bne.n	8004698 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6898      	ldr	r0, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	461a      	mov	r2, r3
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	f002 f8cf 	bl	8006812 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d32b      	bcc.n	80046e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	e026      	b.n	80046e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68d8      	ldr	r0, [r3, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	461a      	mov	r2, r3
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	f002 f8b5 	bl	8006812 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	425b      	negs	r3, r3
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d207      	bcs.n	80046d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	425b      	negs	r3, r3
 80046ce:	441a      	add	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d105      	bne.n	80046e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046ee:	697b      	ldr	r3, [r7, #20]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d018      	beq.n	800473c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	441a      	add	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d303      	bcc.n	800472c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68d9      	ldr	r1, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	461a      	mov	r2, r3
 8004736:	6838      	ldr	r0, [r7, #0]
 8004738:	f002 f86b 	bl	8006812 <memcpy>
	}
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800474c:	f001 fc42 	bl	8005fd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004756:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004758:	e011      	b.n	800477e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3324      	adds	r3, #36	; 0x24
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fd4c 	bl	8005204 <xTaskRemoveFromEventList>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004772:	f000 fe23 	bl	80053bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	3b01      	subs	r3, #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800477e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004782:	2b00      	cmp	r3, #0
 8004784:	dce9      	bgt.n	800475a <prvUnlockQueue+0x16>
 8004786:	e000      	b.n	800478a <prvUnlockQueue+0x46>
					break;
 8004788:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	22ff      	movs	r2, #255	; 0xff
 800478e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004792:	f001 fc4f 	bl	8006034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004796:	f001 fc1d 	bl	8005fd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047a2:	e011      	b.n	80047c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d012      	beq.n	80047d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3310      	adds	r3, #16
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fd27 	bl	8005204 <xTaskRemoveFromEventList>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047bc:	f000 fdfe 	bl	80053bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047c0:	7bbb      	ldrb	r3, [r7, #14]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dce9      	bgt.n	80047a4 <prvUnlockQueue+0x60>
 80047d0:	e000      	b.n	80047d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	22ff      	movs	r2, #255	; 0xff
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047dc:	f001 fc2a 	bl	8006034 <vPortExitCritical>
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047f0:	f001 fbf0 	bl	8005fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e001      	b.n	8004806 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004806:	f001 fc15 	bl	8006034 <vPortExitCritical>

	return xReturn;
 800480a:	68fb      	ldr	r3, [r7, #12]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800481c:	f001 fbda 	bl	8005fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004828:	429a      	cmp	r2, r3
 800482a:	d102      	bne.n	8004832 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800482c:	2301      	movs	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e001      	b.n	8004836 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004836:	f001 fbfd 	bl	8006034 <vPortExitCritical>

	return xReturn;
 800483a:	68fb      	ldr	r3, [r7, #12]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e014      	b.n	800487e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <vQueueAddToRegistry+0x50>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004860:	490c      	ldr	r1, [pc, #48]	; (8004894 <vQueueAddToRegistry+0x50>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800486a:	4a0a      	ldr	r2, [pc, #40]	; (8004894 <vQueueAddToRegistry+0x50>)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004876:	e006      	b.n	8004886 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b07      	cmp	r3, #7
 8004882:	d9e7      	bls.n	8004854 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000a5c 	.word	0x20000a5c

08004898 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048a8:	f001 fb94 	bl	8005fd4 <vPortEnterCritical>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b2:	b25b      	sxtb	r3, r3
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b8:	d103      	bne.n	80048c2 <vQueueWaitForMessageRestricted+0x2a>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048c8:	b25b      	sxtb	r3, r3
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ce:	d103      	bne.n	80048d8 <vQueueWaitForMessageRestricted+0x40>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048d8:	f001 fbac 	bl	8006034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fc5d 	bl	80051ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f7ff ff26 	bl	8004744 <prvUnlockQueue>
	}
 80048f8:	bf00      	nop
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08e      	sub	sp, #56	; 0x38
 8004904:	af04      	add	r7, sp, #16
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	623b      	str	r3, [r7, #32]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xTaskCreateStatic+0x46>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	61fb      	str	r3, [r7, #28]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004946:	23bc      	movs	r3, #188	; 0xbc
 8004948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2bbc      	cmp	r3, #188	; 0xbc
 800494e:	d00a      	beq.n	8004966 <xTaskCreateStatic+0x66>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	61bb      	str	r3, [r7, #24]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01e      	beq.n	80049aa <xTaskCreateStatic+0xaa>
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01b      	beq.n	80049aa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	2202      	movs	r2, #2
 8004980:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004984:	2300      	movs	r3, #0
 8004986:	9303      	str	r3, [sp, #12]
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	9302      	str	r3, [sp, #8]
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f851 	bl	8004a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a4:	f000 f8ec 	bl	8004b80 <prvAddNewTaskToReadyList>
 80049a8:	e001      	b.n	80049ae <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ae:	697b      	ldr	r3, [r7, #20]
	}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08c      	sub	sp, #48	; 0x30
 80049bc:	af04      	add	r7, sp, #16
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 fc23 	bl	8006218 <pvPortMalloc>
 80049d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80049da:	20bc      	movs	r0, #188	; 0xbc
 80049dc:	f001 fc1c 	bl	8006218 <pvPortMalloc>
 80049e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
 80049ee:	e005      	b.n	80049fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049f0:	6978      	ldr	r0, [r7, #20]
 80049f2:	f001 fcd5 	bl	80063a0 <vPortFree>
 80049f6:	e001      	b.n	80049fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d017      	beq.n	8004a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9303      	str	r3, [sp, #12]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	9302      	str	r3, [sp, #8]
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f80f 	bl	8004a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a26:	69f8      	ldr	r0, [r7, #28]
 8004a28:	f000 f8aa 	bl	8004b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	e002      	b.n	8004a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a38:	69bb      	ldr	r3, [r7, #24]
	}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	21a5      	movs	r1, #165	; 0xa5
 8004a5e:	f001 fee6 	bl	800682e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	617b      	str	r3, [r7, #20]
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e012      	b.n	8004ac8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	7819      	ldrb	r1, [r3, #0]
 8004aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	3334      	adds	r3, #52	; 0x34
 8004ab2:	460a      	mov	r2, r1
 8004ab4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d006      	beq.n	8004ad0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	d9e9      	bls.n	8004aa2 <prvInitialiseNewTask+0x5e>
 8004ace:	e000      	b.n	8004ad2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004ad0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b37      	cmp	r3, #55	; 0x37
 8004ade:	d901      	bls.n	8004ae4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ae0:	2337      	movs	r3, #55	; 0x37
 8004ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	2200      	movs	r2, #0
 8004af4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	3304      	adds	r3, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff f986 	bl	8003e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	3318      	adds	r3, #24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff f981 	bl	8003e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	3354      	adds	r3, #84	; 0x54
 8004b34:	2260      	movs	r2, #96	; 0x60
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fe78 	bl	800682e <memset>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <prvInitialiseNewTask+0x130>)
 8004b42:	659a      	str	r2, [r3, #88]	; 0x58
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	4a0c      	ldr	r2, [pc, #48]	; (8004b78 <prvInitialiseNewTask+0x134>)
 8004b48:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <prvInitialiseNewTask+0x138>)
 8004b4e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	69b8      	ldr	r0, [r7, #24]
 8004b56:	f001 f90f 	bl	8005d78 <pxPortInitialiseStack>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b6c:	bf00      	nop
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	08009328 	.word	0x08009328
 8004b78:	08009348 	.word	0x08009348
 8004b7c:	08009308 	.word	0x08009308

08004b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b88:	f001 fa24 	bl	8005fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b9e:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bac:	f000 fc2a 	bl	8005404 <prvInitialiseTaskLists>
 8004bb0:	e00d      	b.n	8004bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bb2:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d802      	bhi.n	8004bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d903      	bls.n	8004bf4 <prvAddNewTaskToReadyList+0x74>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <prvAddNewTaskToReadyList+0xd8>)
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7ff f90b 	bl	8003e26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c10:	f001 fa10 	bl	8006034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d207      	bcs.n	8004c3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <prvAddNewTaskToReadyList+0xdc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000f70 	.word	0x20000f70
 8004c48:	20000a9c 	.word	0x20000a9c
 8004c4c:	20000f7c 	.word	0x20000f7c
 8004c50:	20000f8c 	.word	0x20000f8c
 8004c54:	20000f78 	.word	0x20000f78
 8004c58:	20000aa0 	.word	0x20000aa0
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d017      	beq.n	8004ca2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <vTaskDelay+0x60>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <vTaskDelay+0x30>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60bb      	str	r3, [r7, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c90:	f000 f88a 	bl	8004da8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c94:	2100      	movs	r1, #0
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fd08 	bl	80056ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c9c:	f000 f892 	bl	8004dc4 <xTaskResumeAll>
 8004ca0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <vTaskDelay+0x64>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000f98 	.word	0x20000f98
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	1d39      	adds	r1, r7, #4
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f840 	bl	8003d64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	9202      	str	r2, [sp, #8]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	4924      	ldr	r1, [pc, #144]	; (8004d88 <vTaskStartScheduler+0xc0>)
 8004cf8:	4824      	ldr	r0, [pc, #144]	; (8004d8c <vTaskStartScheduler+0xc4>)
 8004cfa:	f7ff fe01 	bl	8004900 <xTaskCreateStatic>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4a23      	ldr	r2, [pc, #140]	; (8004d90 <vTaskStartScheduler+0xc8>)
 8004d02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d04:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <vTaskStartScheduler+0xc8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e001      	b.n	8004d16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d102      	bne.n	8004d22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d1c:	f000 fd1a 	bl	8005754 <xTimerCreateTimerTask>
 8004d20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d11b      	bne.n	8004d60 <vTaskStartScheduler+0x98>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	613b      	str	r3, [r7, #16]
}
 8004d3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d3c:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <vTaskStartScheduler+0xcc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3354      	adds	r3, #84	; 0x54
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <vTaskStartScheduler+0xd0>)
 8004d44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <vTaskStartScheduler+0xd4>)
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <vTaskStartScheduler+0xd8>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <vTaskStartScheduler+0xdc>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d5a:	f001 f899 	bl	8005e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d5e:	e00e      	b.n	8004d7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d66:	d10a      	bne.n	8004d7e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <vTaskStartScheduler+0xb4>
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	08009294 	.word	0x08009294
 8004d8c:	080053d5 	.word	0x080053d5
 8004d90:	20000f94 	.word	0x20000f94
 8004d94:	20000a9c 	.word	0x20000a9c
 8004d98:	20000010 	.word	0x20000010
 8004d9c:	20000f90 	.word	0x20000f90
 8004da0:	20000f7c 	.word	0x20000f7c
 8004da4:	20000f74 	.word	0x20000f74

08004da8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <vTaskSuspendAll+0x18>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	4a03      	ldr	r2, [pc, #12]	; (8004dc0 <vTaskSuspendAll+0x18>)
 8004db4:	6013      	str	r3, [r2, #0]
}
 8004db6:	bf00      	nop
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	20000f98 	.word	0x20000f98

08004dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dd2:	4b42      	ldr	r3, [pc, #264]	; (8004edc <xTaskResumeAll+0x118>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	603b      	str	r3, [r7, #0]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004df0:	f001 f8f0 	bl	8005fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004df4:	4b39      	ldr	r3, [pc, #228]	; (8004edc <xTaskResumeAll+0x118>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	4a38      	ldr	r2, [pc, #224]	; (8004edc <xTaskResumeAll+0x118>)
 8004dfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfe:	4b37      	ldr	r3, [pc, #220]	; (8004edc <xTaskResumeAll+0x118>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d162      	bne.n	8004ecc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e06:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <xTaskResumeAll+0x11c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d05e      	beq.n	8004ecc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e0e:	e02f      	b.n	8004e70 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e10:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <xTaskResumeAll+0x120>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff f85f 	bl	8003ee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff f85a 	bl	8003ee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <xTaskResumeAll+0x124>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d903      	bls.n	8004e40 <xTaskResumeAll+0x7c>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <xTaskResumeAll+0x124>)
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4a27      	ldr	r2, [pc, #156]	; (8004eec <xTaskResumeAll+0x128>)
 8004e4e:	441a      	add	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f7fe ffe5 	bl	8003e26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <xTaskResumeAll+0x12c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e6a:	4b22      	ldr	r3, [pc, #136]	; (8004ef4 <xTaskResumeAll+0x130>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e70:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <xTaskResumeAll+0x120>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1cb      	bne.n	8004e10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e7e:	f000 fb63 	bl	8005548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e82:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <xTaskResumeAll+0x134>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e8e:	f000 f847 	bl	8004f20 <xTaskIncrementTick>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e98:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <xTaskResumeAll+0x130>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f1      	bne.n	8004e8e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004eaa:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <xTaskResumeAll+0x134>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <xTaskResumeAll+0x130>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <xTaskResumeAll+0x138>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ecc:	f001 f8b2 	bl	8006034 <vPortExitCritical>

	return xAlreadyYielded;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000f98 	.word	0x20000f98
 8004ee0:	20000f70 	.word	0x20000f70
 8004ee4:	20000f30 	.word	0x20000f30
 8004ee8:	20000f78 	.word	0x20000f78
 8004eec:	20000aa0 	.word	0x20000aa0
 8004ef0:	20000a9c 	.word	0x20000a9c
 8004ef4:	20000f84 	.word	0x20000f84
 8004ef8:	20000f80 	.word	0x20000f80
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <xTaskGetTickCount+0x1c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f0c:	687b      	ldr	r3, [r7, #4]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000f74 	.word	0x20000f74

08004f20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f2a:	4b51      	ldr	r3, [pc, #324]	; (8005070 <xTaskIncrementTick+0x150>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 808e 	bne.w	8005050 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f34:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <xTaskIncrementTick+0x154>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	; (8005074 <xTaskIncrementTick+0x154>)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d120      	bne.n	8004f8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f48:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <xTaskIncrementTick+0x158>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	603b      	str	r3, [r7, #0]
}
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <xTaskIncrementTick+0x46>
 8004f68:	4b43      	ldr	r3, [pc, #268]	; (8005078 <xTaskIncrementTick+0x158>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	4b43      	ldr	r3, [pc, #268]	; (800507c <xTaskIncrementTick+0x15c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a41      	ldr	r2, [pc, #260]	; (8005078 <xTaskIncrementTick+0x158>)
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4a41      	ldr	r2, [pc, #260]	; (800507c <xTaskIncrementTick+0x15c>)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b40      	ldr	r3, [pc, #256]	; (8005080 <xTaskIncrementTick+0x160>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3301      	adds	r3, #1
 8004f82:	4a3f      	ldr	r2, [pc, #252]	; (8005080 <xTaskIncrementTick+0x160>)
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	f000 fadf 	bl	8005548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f8a:	4b3e      	ldr	r3, [pc, #248]	; (8005084 <xTaskIncrementTick+0x164>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d34e      	bcc.n	8005032 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f94:	4b38      	ldr	r3, [pc, #224]	; (8005078 <xTaskIncrementTick+0x158>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <xTaskIncrementTick+0x82>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xTaskIncrementTick+0x84>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa8:	4b36      	ldr	r3, [pc, #216]	; (8005084 <xTaskIncrementTick+0x164>)
 8004faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fae:	601a      	str	r2, [r3, #0]
					break;
 8004fb0:	e03f      	b.n	8005032 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <xTaskIncrementTick+0x158>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d203      	bcs.n	8004fd2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fca:	4a2e      	ldr	r2, [pc, #184]	; (8005084 <xTaskIncrementTick+0x164>)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6013      	str	r3, [r2, #0]
						break;
 8004fd0:	e02f      	b.n	8005032 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe ff82 	bl	8003ee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe ff79 	bl	8003ee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff2:	4b25      	ldr	r3, [pc, #148]	; (8005088 <xTaskIncrementTick+0x168>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d903      	bls.n	8005002 <xTaskIncrementTick+0xe2>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <xTaskIncrementTick+0x168>)
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4a1f      	ldr	r2, [pc, #124]	; (800508c <xTaskIncrementTick+0x16c>)
 8005010:	441a      	add	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	3304      	adds	r3, #4
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f7fe ff04 	bl	8003e26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <xTaskIncrementTick+0x170>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	429a      	cmp	r2, r3
 800502a:	d3b3      	bcc.n	8004f94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005030:	e7b0      	b.n	8004f94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <xTaskIncrementTick+0x170>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	4914      	ldr	r1, [pc, #80]	; (800508c <xTaskIncrementTick+0x16c>)
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d907      	bls.n	800505a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800504a:	2301      	movs	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e004      	b.n	800505a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005050:	4b10      	ldr	r3, [pc, #64]	; (8005094 <xTaskIncrementTick+0x174>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <xTaskIncrementTick+0x174>)
 8005058:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800505a:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <xTaskIncrementTick+0x178>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005062:	2301      	movs	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005066:	697b      	ldr	r3, [r7, #20]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20000f98 	.word	0x20000f98
 8005074:	20000f74 	.word	0x20000f74
 8005078:	20000f28 	.word	0x20000f28
 800507c:	20000f2c 	.word	0x20000f2c
 8005080:	20000f88 	.word	0x20000f88
 8005084:	20000f90 	.word	0x20000f90
 8005088:	20000f78 	.word	0x20000f78
 800508c:	20000aa0 	.word	0x20000aa0
 8005090:	20000a9c 	.word	0x20000a9c
 8005094:	20000f80 	.word	0x20000f80
 8005098:	20000f84 	.word	0x20000f84

0800509c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050a2:	4b2a      	ldr	r3, [pc, #168]	; (800514c <vTaskSwitchContext+0xb0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050aa:	4b29      	ldr	r3, [pc, #164]	; (8005150 <vTaskSwitchContext+0xb4>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050b0:	e046      	b.n	8005140 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80050b2:	4b27      	ldr	r3, [pc, #156]	; (8005150 <vTaskSwitchContext+0xb4>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80050b8:	4b26      	ldr	r3, [pc, #152]	; (8005154 <vTaskSwitchContext+0xb8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e010      	b.n	80050e2 <vTaskSwitchContext+0x46>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <vTaskSwitchContext+0x40>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	607b      	str	r3, [r7, #4]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <vTaskSwitchContext+0x3e>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b01      	subs	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	491d      	ldr	r1, [pc, #116]	; (8005158 <vTaskSwitchContext+0xbc>)
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0e4      	beq.n	80050c0 <vTaskSwitchContext+0x24>
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a15      	ldr	r2, [pc, #84]	; (8005158 <vTaskSwitchContext+0xbc>)
 8005102:	4413      	add	r3, r2
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	605a      	str	r2, [r3, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	3308      	adds	r3, #8
 8005118:	429a      	cmp	r2, r3
 800511a:	d104      	bne.n	8005126 <vTaskSwitchContext+0x8a>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a0b      	ldr	r2, [pc, #44]	; (800515c <vTaskSwitchContext+0xc0>)
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4a08      	ldr	r2, [pc, #32]	; (8005154 <vTaskSwitchContext+0xb8>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <vTaskSwitchContext+0xc0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3354      	adds	r3, #84	; 0x54
 800513c:	4a08      	ldr	r2, [pc, #32]	; (8005160 <vTaskSwitchContext+0xc4>)
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	20000f98 	.word	0x20000f98
 8005150:	20000f84 	.word	0x20000f84
 8005154:	20000f78 	.word	0x20000f78
 8005158:	20000aa0 	.word	0x20000aa0
 800515c:	20000a9c 	.word	0x20000a9c
 8005160:	20000010 	.word	0x20000010

08005164 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	60fb      	str	r3, [r7, #12]
}
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <vTaskPlaceOnEventList+0x44>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3318      	adds	r3, #24
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fe fe6b 	bl	8003e6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005198:	2101      	movs	r1, #1
 800519a:	6838      	ldr	r0, [r7, #0]
 800519c:	f000 fa86 	bl	80056ac <prvAddCurrentTaskToDelayedList>
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000a9c 	.word	0x20000a9c

080051ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	617b      	str	r3, [r7, #20]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051d4:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <vTaskPlaceOnEventListRestricted+0x54>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3318      	adds	r3, #24
 80051da:	4619      	mov	r1, r3
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7fe fe22 	bl	8003e26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	68b8      	ldr	r0, [r7, #8]
 80051f2:	f000 fa5b 	bl	80056ac <prvAddCurrentTaskToDelayedList>
	}
 80051f6:	bf00      	nop
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000a9c 	.word	0x20000a9c

08005204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	60fb      	str	r3, [r7, #12]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	3318      	adds	r3, #24
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe fe53 	bl	8003ee0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800523a:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <xTaskRemoveFromEventList+0xb0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11d      	bne.n	800527e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3304      	adds	r3, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fe4a 	bl	8003ee0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <xTaskRemoveFromEventList+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d903      	bls.n	8005260 <xTaskRemoveFromEventList+0x5c>
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <xTaskRemoveFromEventList+0xb4>)
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <xTaskRemoveFromEventList+0xb8>)
 800526e:	441a      	add	r2, r3
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fe fdd5 	bl	8003e26 <vListInsertEnd>
 800527c:	e005      	b.n	800528a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3318      	adds	r3, #24
 8005282:	4619      	mov	r1, r3
 8005284:	480e      	ldr	r0, [pc, #56]	; (80052c0 <xTaskRemoveFromEventList+0xbc>)
 8005286:	f7fe fdce 	bl	8003e26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <xTaskRemoveFromEventList+0xc0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	429a      	cmp	r2, r3
 8005296:	d905      	bls.n	80052a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <xTaskRemoveFromEventList+0xc4>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e001      	b.n	80052a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80052a8:	697b      	ldr	r3, [r7, #20]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000f98 	.word	0x20000f98
 80052b8:	20000f78 	.word	0x20000f78
 80052bc:	20000aa0 	.word	0x20000aa0
 80052c0:	20000f30 	.word	0x20000f30
 80052c4:	20000a9c 	.word	0x20000a9c
 80052c8:	20000f84 	.word	0x20000f84

080052cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <vTaskInternalSetTimeOutState+0x24>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <vTaskInternalSetTimeOutState+0x28>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	605a      	str	r2, [r3, #4]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000f88 	.word	0x20000f88
 80052f4:	20000f74 	.word	0x20000f74

080052f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	613b      	str	r3, [r7, #16]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800533a:	f000 fe4b 	bl	8005fd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800533e:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <xTaskCheckForTimeOut+0xbc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005356:	d102      	bne.n	800535e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e023      	b.n	80053a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <xTaskCheckForTimeOut+0xc0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d007      	beq.n	800537a <xTaskCheckForTimeOut+0x82>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	429a      	cmp	r2, r3
 8005372:	d302      	bcc.n	800537a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e015      	b.n	80053a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	d20b      	bcs.n	800539c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ff9b 	bl	80052cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	e004      	b.n	80053a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053a6:	f000 fe45 	bl	8006034 <vPortExitCritical>

	return xReturn;
 80053aa:	69fb      	ldr	r3, [r7, #28]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000f74 	.word	0x20000f74
 80053b8:	20000f88 	.word	0x20000f88

080053bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <vTaskMissedYield+0x14>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20000f84 	.word	0x20000f84

080053d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053dc:	f000 f852 	bl	8005484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <prvIdleTask+0x28>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d9f9      	bls.n	80053dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <prvIdleTask+0x2c>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053f8:	e7f0      	b.n	80053dc <prvIdleTask+0x8>
 80053fa:	bf00      	nop
 80053fc:	20000aa0 	.word	0x20000aa0
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	e00c      	b.n	800542a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <prvInitialiseTaskLists+0x60>)
 800541c:	4413      	add	r3, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fcd4 	bl	8003dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3301      	adds	r3, #1
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b37      	cmp	r3, #55	; 0x37
 800542e:	d9ef      	bls.n	8005410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005430:	480d      	ldr	r0, [pc, #52]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005432:	f7fe fccb 	bl	8003dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005436:	480d      	ldr	r0, [pc, #52]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005438:	f7fe fcc8 	bl	8003dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800543c:	480c      	ldr	r0, [pc, #48]	; (8005470 <prvInitialiseTaskLists+0x6c>)
 800543e:	f7fe fcc5 	bl	8003dcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005442:	480c      	ldr	r0, [pc, #48]	; (8005474 <prvInitialiseTaskLists+0x70>)
 8005444:	f7fe fcc2 	bl	8003dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005448:	480b      	ldr	r0, [pc, #44]	; (8005478 <prvInitialiseTaskLists+0x74>)
 800544a:	f7fe fcbf 	bl	8003dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <prvInitialiseTaskLists+0x78>)
 8005450:	4a05      	ldr	r2, [pc, #20]	; (8005468 <prvInitialiseTaskLists+0x64>)
 8005452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <prvInitialiseTaskLists+0x7c>)
 8005456:	4a05      	ldr	r2, [pc, #20]	; (800546c <prvInitialiseTaskLists+0x68>)
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000aa0 	.word	0x20000aa0
 8005468:	20000f00 	.word	0x20000f00
 800546c:	20000f14 	.word	0x20000f14
 8005470:	20000f30 	.word	0x20000f30
 8005474:	20000f44 	.word	0x20000f44
 8005478:	20000f5c 	.word	0x20000f5c
 800547c:	20000f28 	.word	0x20000f28
 8005480:	20000f2c 	.word	0x20000f2c

08005484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800548a:	e019      	b.n	80054c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800548c:	f000 fda2 	bl	8005fd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005490:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <prvCheckTasksWaitingTermination+0x50>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3304      	adds	r3, #4
 800549c:	4618      	mov	r0, r3
 800549e:	f7fe fd1f 	bl	8003ee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <prvCheckTasksWaitingTermination+0x54>)
 80054aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054b6:	f000 fdbd 	bl	8006034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f810 	bl	80054e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <prvCheckTasksWaitingTermination+0x58>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e1      	bne.n	800548c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000f44 	.word	0x20000f44
 80054d8:	20000f70 	.word	0x20000f70
 80054dc:	20000f58 	.word	0x20000f58

080054e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3354      	adds	r3, #84	; 0x54
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 ff29 	bl	8007344 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	4618      	mov	r0, r3
 8005502:	f000 ff4d 	bl	80063a0 <vPortFree>
				vPortFree( pxTCB );
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 ff4a 	bl	80063a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800550c:	e018      	b.n	8005540 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005514:	2b01      	cmp	r3, #1
 8005516:	d103      	bne.n	8005520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 ff41 	bl	80063a0 <vPortFree>
	}
 800551e:	e00f      	b.n	8005540 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005526:	2b02      	cmp	r3, #2
 8005528:	d00a      	beq.n	8005540 <prvDeleteTCB+0x60>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	60fb      	str	r3, [r7, #12]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <prvDeleteTCB+0x5e>
	}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <prvResetNextTaskUnblockTime+0x44>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <prvResetNextTaskUnblockTime+0x14>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <prvResetNextTaskUnblockTime+0x16>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <prvResetNextTaskUnblockTime+0x48>)
 8005564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005568:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800556a:	e008      	b.n	800557e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800556c:	4b07      	ldr	r3, [pc, #28]	; (800558c <prvResetNextTaskUnblockTime+0x44>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4a05      	ldr	r2, [pc, #20]	; (8005590 <prvResetNextTaskUnblockTime+0x48>)
 800557c:	6013      	str	r3, [r2, #0]
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000f28 	.word	0x20000f28
 8005590:	20000f90 	.word	0x20000f90

08005594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <xTaskGetSchedulerState+0x34>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055a2:	2301      	movs	r3, #1
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	e008      	b.n	80055ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <xTaskGetSchedulerState+0x38>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055b0:	2302      	movs	r3, #2
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e001      	b.n	80055ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055b6:	2300      	movs	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055ba:	687b      	ldr	r3, [r7, #4]
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000f7c 	.word	0x20000f7c
 80055cc:	20000f98 	.word	0x20000f98

080055d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d056      	beq.n	8005694 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <xTaskPriorityDisinherit+0xd0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d00a      	beq.n	8005606 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	429a      	cmp	r2, r3
 8005638:	d02c      	beq.n	8005694 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563e:	2b00      	cmp	r3, #0
 8005640:	d128      	bne.n	8005694 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fc4a 	bl	8003ee0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <xTaskPriorityDisinherit+0xd4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d903      	bls.n	8005674 <xTaskPriorityDisinherit+0xa4>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <xTaskPriorityDisinherit+0xd4>)
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <xTaskPriorityDisinherit+0xd8>)
 8005682:	441a      	add	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	3304      	adds	r3, #4
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7fe fbcb 	bl	8003e26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005690:	2301      	movs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005694:	697b      	ldr	r3, [r7, #20]
	}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000a9c 	.word	0x20000a9c
 80056a4:	20000f78 	.word	0x20000f78
 80056a8:	20000aa0 	.word	0x20000aa0

080056ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056b6:	4b21      	ldr	r3, [pc, #132]	; (800573c <prvAddCurrentTaskToDelayedList+0x90>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fc0c 	bl	8003ee0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ce:	d10a      	bne.n	80056e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4819      	ldr	r0, [pc, #100]	; (8005744 <prvAddCurrentTaskToDelayedList+0x98>)
 80056e0:	f7fe fba1 	bl	8003e26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056e4:	e026      	b.n	8005734 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d209      	bcs.n	8005712 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f7fe fbaf 	bl	8003e6e <vListInsert>
}
 8005710:	e010      	b.n	8005734 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fe fba5 	bl	8003e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	429a      	cmp	r2, r3
 800572c:	d202      	bcs.n	8005734 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800572e:	4a08      	ldr	r2, [pc, #32]	; (8005750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6013      	str	r3, [r2, #0]
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000f74 	.word	0x20000f74
 8005740:	20000a9c 	.word	0x20000a9c
 8005744:	20000f5c 	.word	0x20000f5c
 8005748:	20000f2c 	.word	0x20000f2c
 800574c:	20000f28 	.word	0x20000f28
 8005750:	20000f90 	.word	0x20000f90

08005754 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800575e:	f000 facb 	bl	8005cf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <xTimerCreateTimerTask+0x80>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d021      	beq.n	80057ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005772:	1d3a      	adds	r2, r7, #4
 8005774:	f107 0108 	add.w	r1, r7, #8
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fb0b 	bl	8003d98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	9202      	str	r2, [sp, #8]
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	2302      	movs	r3, #2
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2300      	movs	r3, #0
 8005792:	460a      	mov	r2, r1
 8005794:	4910      	ldr	r1, [pc, #64]	; (80057d8 <xTimerCreateTimerTask+0x84>)
 8005796:	4811      	ldr	r0, [pc, #68]	; (80057dc <xTimerCreateTimerTask+0x88>)
 8005798:	f7ff f8b2 	bl	8004900 <xTaskCreateStatic>
 800579c:	4603      	mov	r3, r0
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <xTimerCreateTimerTask+0x8c>)
 80057a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057a2:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <xTimerCreateTimerTask+0x8c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057aa:	2301      	movs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	613b      	str	r3, [r7, #16]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80057ca:	697b      	ldr	r3, [r7, #20]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	20000fcc 	.word	0x20000fcc
 80057d8:	0800929c 	.word	0x0800929c
 80057dc:	08005901 	.word	0x08005901
 80057e0:	20000fd0 	.word	0x20000fd0

080057e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xTimerGenericCommand+0x2e>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	623b      	str	r3, [r7, #32]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <xTimerGenericCommand+0x98>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d02a      	beq.n	8005870 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b05      	cmp	r3, #5
 800582a:	dc18      	bgt.n	800585e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800582c:	f7ff feb2 	bl	8005594 <xTaskGetSchedulerState>
 8005830:	4603      	mov	r3, r0
 8005832:	2b02      	cmp	r3, #2
 8005834:	d109      	bne.n	800584a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <xTimerGenericCommand+0x98>)
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f107 0110 	add.w	r1, r7, #16
 800583e:	2300      	movs	r3, #0
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	f7fe fc79 	bl	8004138 <xQueueGenericSend>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24
 8005848:	e012      	b.n	8005870 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <xTimerGenericCommand+0x98>)
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	f107 0110 	add.w	r1, r7, #16
 8005852:	2300      	movs	r3, #0
 8005854:	2200      	movs	r2, #0
 8005856:	f7fe fc6f 	bl	8004138 <xQueueGenericSend>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24
 800585c:	e008      	b.n	8005870 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <xTimerGenericCommand+0x98>)
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f107 0110 	add.w	r1, r7, #16
 8005866:	2300      	movs	r3, #0
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	f7fe fd63 	bl	8004334 <xQueueGenericSendFromISR>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005872:	4618      	mov	r0, r3
 8005874:	3728      	adds	r7, #40	; 0x28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000fcc 	.word	0x20000fcc

08005880 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800588a:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <prvProcessExpiredTimer+0x7c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fb21 	bl	8003ee0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d122      	bne.n	80058ec <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	18d1      	adds	r1, r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f000 f8c8 	bl	8005a48 <prvInsertTimerInActiveList>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d016      	beq.n	80058ec <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058be:	2300      	movs	r3, #0
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2300      	movs	r3, #0
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	2100      	movs	r1, #0
 80058c8:	6978      	ldr	r0, [r7, #20]
 80058ca:	f7ff ff8b 	bl	80057e4 <xTimerGenericCommand>
 80058ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60fb      	str	r3, [r7, #12]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	6978      	ldr	r0, [r7, #20]
 80058f2:	4798      	blx	r3
}
 80058f4:	bf00      	nop
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000fc4 	.word	0x20000fc4

08005900 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005908:	f107 0308 	add.w	r3, r7, #8
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f857 	bl	80059c0 <prvGetNextExpireTime>
 8005912:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4619      	mov	r1, r3
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f803 	bl	8005924 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800591e:	f000 f8d5 	bl	8005acc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005922:	e7f1      	b.n	8005908 <prvTimerTask+0x8>

08005924 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800592e:	f7ff fa3b 	bl	8004da8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005932:	f107 0308 	add.w	r3, r7, #8
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f866 	bl	8005a08 <prvSampleTimeNow>
 800593c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d130      	bne.n	80059a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <prvProcessTimerOrBlockTask+0x3c>
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d806      	bhi.n	8005960 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005952:	f7ff fa37 	bl	8004dc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ff91 	bl	8005880 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800595e:	e024      	b.n	80059aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <prvProcessTimerOrBlockTask+0x90>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <prvProcessTimerOrBlockTask+0x94>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	4619      	mov	r1, r3
 8005986:	f7fe ff87 	bl	8004898 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800598a:	f7ff fa1b 	bl	8004dc4 <xTaskResumeAll>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <prvProcessTimerOrBlockTask+0x98>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
}
 80059a4:	e001      	b.n	80059aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059a6:	f7ff fa0d 	bl	8004dc4 <xTaskResumeAll>
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000fc8 	.word	0x20000fc8
 80059b8:	20000fcc 	.word	0x20000fcc
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059c8:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <prvGetNextExpireTime+0x44>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <prvGetNextExpireTime+0x44>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e001      	b.n	80059f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059f6:	68fb      	ldr	r3, [r7, #12]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	20000fc4 	.word	0x20000fc4

08005a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a10:	f7ff fa76 	bl	8004f00 <xTaskGetTickCount>
 8005a14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <prvSampleTimeNow+0x3c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d205      	bcs.n	8005a2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a20:	f000 f908 	bl	8005c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a32:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <prvSampleTimeNow+0x3c>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a38:	68fb      	ldr	r3, [r7, #12]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000fd4 	.word	0x20000fd4

08005a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d812      	bhi.n	8005a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d302      	bcc.n	8005a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e01b      	b.n	8005aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <prvInsertTimerInActiveList+0x7c>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f7fe f9ee 	bl	8003e6e <vListInsert>
 8005a92:	e012      	b.n	8005aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d206      	bcs.n	8005aaa <prvInsertTimerInActiveList+0x62>
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e007      	b.n	8005aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <prvInsertTimerInActiveList+0x80>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fe f9da 	bl	8003e6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000fc8 	.word	0x20000fc8
 8005ac8:	20000fc4 	.word	0x20000fc4

08005acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08e      	sub	sp, #56	; 0x38
 8005ad0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ad2:	e09d      	b.n	8005c10 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da18      	bge.n	8005b0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ada:	1d3b      	adds	r3, r7, #4
 8005adc:	3304      	adds	r3, #4
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61fb      	str	r3, [r7, #28]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b02:	6850      	ldr	r0, [r2, #4]
 8005b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b06:	6892      	ldr	r2, [r2, #8]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	db7d      	blt.n	8005c0e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe f9dc 	bl	8003ee0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b28:	463b      	mov	r3, r7
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff ff6c 	bl	8005a08 <prvSampleTimeNow>
 8005b30:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b09      	cmp	r3, #9
 8005b36:	d86b      	bhi.n	8005c10 <prvProcessReceivedCommands+0x144>
 8005b38:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <prvProcessReceivedCommands+0x74>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b69 	.word	0x08005b69
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005b69 	.word	0x08005b69
 8005b4c:	08005c11 	.word	0x08005c11
 8005b50:	08005bc5 	.word	0x08005bc5
 8005b54:	08005bfd 	.word	0x08005bfd
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b69 	.word	0x08005b69
 8005b60:	08005c11 	.word	0x08005c11
 8005b64:	08005bc5 	.word	0x08005bc5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	18d1      	adds	r1, r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b76:	f7ff ff67 	bl	8005a48 <prvInsertTimerInActiveList>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d047      	beq.n	8005c10 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d13f      	bne.n	8005c10 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	441a      	add	r2, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba2:	f7ff fe1f 	bl	80057e4 <xTimerGenericCommand>
 8005ba6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d130      	bne.n	8005c10 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	61bb      	str	r3, [r7, #24]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	617b      	str	r3, [r7, #20]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	18d1      	adds	r1, r2, r3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf6:	f7ff ff27 	bl	8005a48 <prvInsertTimerInActiveList>
					break;
 8005bfa:	e009      	b.n	8005c10 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c08:	f000 fbca 	bl	80063a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c0c:	e000      	b.n	8005c10 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c0e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <prvProcessReceivedCommands+0x164>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	1d39      	adds	r1, r7, #4
 8005c16:	2200      	movs	r2, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe fc23 	bl	8004464 <xQueueReceive>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f af57 	bne.w	8005ad4 <prvProcessReceivedCommands+0x8>
	}
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	3730      	adds	r7, #48	; 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000fcc 	.word	0x20000fcc

08005c34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c3a:	e045      	b.n	8005cc8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c3c:	4b2c      	ldr	r3, [pc, #176]	; (8005cf0 <prvSwitchTimerLists+0xbc>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c46:	4b2a      	ldr	r3, [pc, #168]	; (8005cf0 <prvSwitchTimerLists+0xbc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fe f943 	bl	8003ee0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d12e      	bne.n	8005cc8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d90e      	bls.n	8005c9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c88:	4b19      	ldr	r3, [pc, #100]	; (8005cf0 <prvSwitchTimerLists+0xbc>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe f8eb 	bl	8003e6e <vListInsert>
 8005c98:	e016      	b.n	8005cc8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff fd9d 	bl	80057e4 <xTimerGenericCommand>
 8005caa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	603b      	str	r3, [r7, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <prvSwitchTimerLists+0xbc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1b4      	bne.n	8005c3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <prvSwitchTimerLists+0xbc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <prvSwitchTimerLists+0xbc>)
 8005cde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ce0:	4a04      	ldr	r2, [pc, #16]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6013      	str	r3, [r2, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000fc4 	.word	0x20000fc4
 8005cf4:	20000fc8 	.word	0x20000fc8

08005cf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cfe:	f000 f969 	bl	8005fd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <prvCheckForValidListAndQueue+0x60>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d120      	bne.n	8005d4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d0a:	4814      	ldr	r0, [pc, #80]	; (8005d5c <prvCheckForValidListAndQueue+0x64>)
 8005d0c:	f7fe f85e 	bl	8003dcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d10:	4813      	ldr	r0, [pc, #76]	; (8005d60 <prvCheckForValidListAndQueue+0x68>)
 8005d12:	f7fe f85b 	bl	8003dcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d16:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <prvCheckForValidListAndQueue+0x6c>)
 8005d18:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <prvCheckForValidListAndQueue+0x64>)
 8005d1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d1c:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <prvCheckForValidListAndQueue+0x70>)
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <prvCheckForValidListAndQueue+0x68>)
 8005d20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d22:	2300      	movs	r3, #0
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <prvCheckForValidListAndQueue+0x74>)
 8005d28:	4a11      	ldr	r2, [pc, #68]	; (8005d70 <prvCheckForValidListAndQueue+0x78>)
 8005d2a:	2110      	movs	r1, #16
 8005d2c:	200a      	movs	r0, #10
 8005d2e:	f7fe f969 	bl	8004004 <xQueueGenericCreateStatic>
 8005d32:	4603      	mov	r3, r0
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <prvCheckForValidListAndQueue+0x60>)
 8005d36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <prvCheckForValidListAndQueue+0x60>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <prvCheckForValidListAndQueue+0x60>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	490b      	ldr	r1, [pc, #44]	; (8005d74 <prvCheckForValidListAndQueue+0x7c>)
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fd7c 	bl	8004844 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d4c:	f000 f972 	bl	8006034 <vPortExitCritical>
}
 8005d50:	bf00      	nop
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000fcc 	.word	0x20000fcc
 8005d5c:	20000f9c 	.word	0x20000f9c
 8005d60:	20000fb0 	.word	0x20000fb0
 8005d64:	20000fc4 	.word	0x20000fc4
 8005d68:	20000fc8 	.word	0x20000fc8
 8005d6c:	20001078 	.word	0x20001078
 8005d70:	20000fd8 	.word	0x20000fd8
 8005d74:	080092a4 	.word	0x080092a4

08005d78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3b04      	subs	r3, #4
 8005d88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3b04      	subs	r3, #4
 8005d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3b04      	subs	r3, #4
 8005da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005da8:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <pxPortInitialiseStack+0x64>)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3b14      	subs	r3, #20
 8005db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3b04      	subs	r3, #4
 8005dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f06f 0202 	mvn.w	r2, #2
 8005dc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3b20      	subs	r3, #32
 8005dcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	08005de1 	.word	0x08005de1

08005de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <prvTaskExitError+0x54>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df2:	d00a      	beq.n	8005e0a <prvTaskExitError+0x2a>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60fb      	str	r3, [r7, #12]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <prvTaskExitError+0x28>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	60bb      	str	r3, [r7, #8]
}
 8005e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e1e:	bf00      	nop
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0fc      	beq.n	8005e20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	2000000c 	.word	0x2000000c
	...

08005e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <pxCurrentTCBConst2>)
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	6808      	ldr	r0, [r1, #0]
 8005e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	f380 8809 	msr	PSP, r0
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8811 	msr	BASEPRI, r0
 8005e5a:	4770      	bx	lr
 8005e5c:	f3af 8000 	nop.w

08005e60 <pxCurrentTCBConst2>:
 8005e60:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop

08005e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e68:	4808      	ldr	r0, [pc, #32]	; (8005e8c <prvPortStartFirstTask+0x24>)
 8005e6a:	6800      	ldr	r0, [r0, #0]
 8005e6c:	6800      	ldr	r0, [r0, #0]
 8005e6e:	f380 8808 	msr	MSP, r0
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f380 8814 	msr	CONTROL, r0
 8005e7a:	b662      	cpsie	i
 8005e7c:	b661      	cpsie	f
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	df00      	svc	0
 8005e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e8a:	bf00      	nop
 8005e8c:	e000ed08 	.word	0xe000ed08

08005e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e96:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <xPortStartScheduler+0x120>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a46      	ldr	r2, [pc, #280]	; (8005fb4 <xPortStartScheduler+0x124>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10a      	bne.n	8005eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <xPortStartScheduler+0x120>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a3f      	ldr	r2, [pc, #252]	; (8005fb8 <xPortStartScheduler+0x128>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10a      	bne.n	8005ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	4b31      	ldr	r3, [pc, #196]	; (8005fc0 <xPortStartScheduler+0x130>)
 8005efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005efe:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f04:	e009      	b.n	8005f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f06:	4b2f      	ldr	r3, [pc, #188]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	4a2d      	ldr	r2, [pc, #180]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d0ef      	beq.n	8005f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f26:	4b27      	ldr	r3, [pc, #156]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f1c3 0307 	rsb	r3, r3, #7
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d00a      	beq.n	8005f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	60bb      	str	r3, [r7, #8]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f48:	4b1e      	ldr	r3, [pc, #120]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f52:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f5a:	4a1a      	ldr	r2, [pc, #104]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f66:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <xPortStartScheduler+0x138>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <xPortStartScheduler+0x138>)
 8005f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <xPortStartScheduler+0x138>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a14      	ldr	r2, [pc, #80]	; (8005fc8 <xPortStartScheduler+0x138>)
 8005f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f7e:	f000 f8dd 	bl	800613c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f82:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <xPortStartScheduler+0x13c>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f88:	f000 f8fc 	bl	8006184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <xPortStartScheduler+0x140>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0f      	ldr	r2, [pc, #60]	; (8005fd0 <xPortStartScheduler+0x140>)
 8005f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f98:	f7ff ff66 	bl	8005e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f9c:	f7ff f87e 	bl	800509c <vTaskSwitchContext>
	prvTaskExitError();
 8005fa0:	f7ff ff1e 	bl	8005de0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	e000ed00 	.word	0xe000ed00
 8005fb4:	410fc271 	.word	0x410fc271
 8005fb8:	410fc270 	.word	0x410fc270
 8005fbc:	e000e400 	.word	0xe000e400
 8005fc0:	200010c8 	.word	0x200010c8
 8005fc4:	200010cc 	.word	0x200010cc
 8005fc8:	e000ed20 	.word	0xe000ed20
 8005fcc:	2000000c 	.word	0x2000000c
 8005fd0:	e000ef34 	.word	0xe000ef34

08005fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	607b      	str	r3, [r7, #4]
}
 8005fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <vPortEnterCritical+0x58>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	4a0d      	ldr	r2, [pc, #52]	; (800602c <vPortEnterCritical+0x58>)
 8005ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	; (800602c <vPortEnterCritical+0x58>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d10f      	bne.n	8006020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006000:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <vPortEnterCritical+0x5c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <vPortEnterCritical+0x4c>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	603b      	str	r3, [r7, #0]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <vPortEnterCritical+0x4a>
	}
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	2000000c 	.word	0x2000000c
 8006030:	e000ed04 	.word	0xe000ed04

08006034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <vPortExitCritical+0x50>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <vPortExitCritical+0x24>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	607b      	str	r3, [r7, #4]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <vPortExitCritical+0x50>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3b01      	subs	r3, #1
 800605e:	4a09      	ldr	r2, [pc, #36]	; (8006084 <vPortExitCritical+0x50>)
 8006060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006062:	4b08      	ldr	r3, [pc, #32]	; (8006084 <vPortExitCritical+0x50>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d105      	bne.n	8006076 <vPortExitCritical+0x42>
 800606a:	2300      	movs	r3, #0
 800606c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f383 8811 	msr	BASEPRI, r3
}
 8006074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	2000000c 	.word	0x2000000c
	...

08006090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006090:	f3ef 8009 	mrs	r0, PSP
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <pxCurrentTCBConst>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	f01e 0f10 	tst.w	lr, #16
 80060a0:	bf08      	it	eq
 80060a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060aa:	6010      	str	r0, [r2, #0]
 80060ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060b4:	f380 8811 	msr	BASEPRI, r0
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f7fe ffec 	bl	800509c <vTaskSwitchContext>
 80060c4:	f04f 0000 	mov.w	r0, #0
 80060c8:	f380 8811 	msr	BASEPRI, r0
 80060cc:	bc09      	pop	{r0, r3}
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	6808      	ldr	r0, [r1, #0]
 80060d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d6:	f01e 0f10 	tst.w	lr, #16
 80060da:	bf08      	it	eq
 80060dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060e0:	f380 8809 	msr	PSP, r0
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	f3af 8000 	nop.w

080060f0 <pxCurrentTCBConst>:
 80060f0:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop

080060f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	607b      	str	r3, [r7, #4]
}
 8006110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006112:	f7fe ff05 	bl	8004f20 <xTaskIncrementTick>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <SysTick_Handler+0x40>)
 800611e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	f383 8811 	msr	BASEPRI, r3
}
 800612e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <vPortSetupTimerInterrupt+0x34>)
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006146:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <vPortSetupTimerInterrupt+0x38>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800614c:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <vPortSetupTimerInterrupt+0x3c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0a      	ldr	r2, [pc, #40]	; (800617c <vPortSetupTimerInterrupt+0x40>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	099b      	lsrs	r3, r3, #6
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <vPortSetupTimerInterrupt+0x44>)
 800615a:	3b01      	subs	r3, #1
 800615c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800615e:	4b04      	ldr	r3, [pc, #16]	; (8006170 <vPortSetupTimerInterrupt+0x34>)
 8006160:	2207      	movs	r2, #7
 8006162:	601a      	str	r2, [r3, #0]
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	e000e010 	.word	0xe000e010
 8006174:	e000e018 	.word	0xe000e018
 8006178:	20000000 	.word	0x20000000
 800617c:	10624dd3 	.word	0x10624dd3
 8006180:	e000e014 	.word	0xe000e014

08006184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006194 <vPortEnableVFP+0x10>
 8006188:	6801      	ldr	r1, [r0, #0]
 800618a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800618e:	6001      	str	r1, [r0, #0]
 8006190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006192:	bf00      	nop
 8006194:	e000ed88 	.word	0xe000ed88

08006198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800619e:	f3ef 8305 	mrs	r3, IPSR
 80061a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b0f      	cmp	r3, #15
 80061a8:	d914      	bls.n	80061d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061aa:	4a17      	ldr	r2, [pc, #92]	; (8006208 <vPortValidateInterruptPriority+0x70>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061b4:	4b15      	ldr	r3, [pc, #84]	; (800620c <vPortValidateInterruptPriority+0x74>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	7afa      	ldrb	r2, [r7, #11]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d20a      	bcs.n	80061d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	607b      	str	r3, [r7, #4]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <vPortValidateInterruptPriority+0x78>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061dc:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <vPortValidateInterruptPriority+0x7c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d90a      	bls.n	80061fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	603b      	str	r3, [r7, #0]
}
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <vPortValidateInterruptPriority+0x60>
	}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	e000e3f0 	.word	0xe000e3f0
 800620c:	200010c8 	.word	0x200010c8
 8006210:	e000ed0c 	.word	0xe000ed0c
 8006214:	200010cc 	.word	0x200010cc

08006218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	; 0x28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006224:	f7fe fdc0 	bl	8004da8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006228:	4b58      	ldr	r3, [pc, #352]	; (800638c <pvPortMalloc+0x174>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006230:	f000 f910 	bl	8006454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006234:	4b56      	ldr	r3, [pc, #344]	; (8006390 <pvPortMalloc+0x178>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 808e 	bne.w	800635e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01d      	beq.n	8006284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006248:	2208      	movs	r2, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	2b00      	cmp	r3, #0
 8006258:	d014      	beq.n	8006284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f023 0307 	bic.w	r3, r3, #7
 8006260:	3308      	adds	r3, #8
 8006262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <pvPortMalloc+0x6c>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	617b      	str	r3, [r7, #20]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d069      	beq.n	800635e <pvPortMalloc+0x146>
 800628a:	4b42      	ldr	r3, [pc, #264]	; (8006394 <pvPortMalloc+0x17c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d864      	bhi.n	800635e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006294:	4b40      	ldr	r3, [pc, #256]	; (8006398 <pvPortMalloc+0x180>)
 8006296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006298:	4b3f      	ldr	r3, [pc, #252]	; (8006398 <pvPortMalloc+0x180>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800629e:	e004      	b.n	80062aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d903      	bls.n	80062bc <pvPortMalloc+0xa4>
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f1      	bne.n	80062a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062bc:	4b33      	ldr	r3, [pc, #204]	; (800638c <pvPortMalloc+0x174>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d04b      	beq.n	800635e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2208      	movs	r2, #8
 80062cc:	4413      	add	r3, r2
 80062ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	1ad2      	subs	r2, r2, r3
 80062e0:	2308      	movs	r3, #8
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d91f      	bls.n	8006328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4413      	add	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <pvPortMalloc+0xf8>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	613b      	str	r3, [r7, #16]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	1ad2      	subs	r2, r2, r3
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006322:	69b8      	ldr	r0, [r7, #24]
 8006324:	f000 f8f8 	bl	8006518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <pvPortMalloc+0x17c>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	4a18      	ldr	r2, [pc, #96]	; (8006394 <pvPortMalloc+0x17c>)
 8006334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006336:	4b17      	ldr	r3, [pc, #92]	; (8006394 <pvPortMalloc+0x17c>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b18      	ldr	r3, [pc, #96]	; (800639c <pvPortMalloc+0x184>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d203      	bcs.n	800634a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006342:	4b14      	ldr	r3, [pc, #80]	; (8006394 <pvPortMalloc+0x17c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a15      	ldr	r2, [pc, #84]	; (800639c <pvPortMalloc+0x184>)
 8006348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	4b10      	ldr	r3, [pc, #64]	; (8006390 <pvPortMalloc+0x178>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	431a      	orrs	r2, r3
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800635e:	f7fe fd31 	bl	8004dc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <pvPortMalloc+0x16a>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60fb      	str	r3, [r7, #12]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <pvPortMalloc+0x168>
	return pvReturn;
 8006382:	69fb      	ldr	r3, [r7, #28]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20001cd8 	.word	0x20001cd8
 8006390:	20001ce4 	.word	0x20001ce4
 8006394:	20001cdc 	.word	0x20001cdc
 8006398:	20001cd0 	.word	0x20001cd0
 800639c:	20001ce0 	.word	0x20001ce0

080063a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d048      	beq.n	8006444 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063b2:	2308      	movs	r3, #8
 80063b4:	425b      	negs	r3, r3
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4b21      	ldr	r3, [pc, #132]	; (800644c <vPortFree+0xac>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <vPortFree+0x44>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <vPortFree+0x62>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60bb      	str	r3, [r7, #8]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <vPortFree+0xac>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d019      	beq.n	8006444 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d115      	bne.n	8006444 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <vPortFree+0xac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	43db      	mvns	r3, r3
 8006422:	401a      	ands	r2, r3
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006428:	f7fe fcbe 	bl	8004da8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <vPortFree+0xb0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4413      	add	r3, r2
 8006436:	4a06      	ldr	r2, [pc, #24]	; (8006450 <vPortFree+0xb0>)
 8006438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800643a:	6938      	ldr	r0, [r7, #16]
 800643c:	f000 f86c 	bl	8006518 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006440:	f7fe fcc0 	bl	8004dc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006444:	bf00      	nop
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20001ce4 	.word	0x20001ce4
 8006450:	20001cdc 	.word	0x20001cdc

08006454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800645a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800645e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006460:	4b27      	ldr	r3, [pc, #156]	; (8006500 <prvHeapInit+0xac>)
 8006462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3307      	adds	r3, #7
 8006472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0307 	bic.w	r3, r3, #7
 800647a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <prvHeapInit+0xac>)
 8006484:	4413      	add	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800648c:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <prvHeapInit+0xb0>)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <prvHeapInit+0xb0>)
 8006494:	2200      	movs	r2, #0
 8006496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	4413      	add	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064a0:	2208      	movs	r2, #8
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0307 	bic.w	r3, r3, #7
 80064ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <prvHeapInit+0xb4>)
 80064b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <prvHeapInit+0xb4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2200      	movs	r2, #0
 80064bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064be:	4b12      	ldr	r3, [pc, #72]	; (8006508 <prvHeapInit+0xb4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064d4:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <prvHeapInit+0xb4>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4a0a      	ldr	r2, [pc, #40]	; (800650c <prvHeapInit+0xb8>)
 80064e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4a09      	ldr	r2, [pc, #36]	; (8006510 <prvHeapInit+0xbc>)
 80064ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <prvHeapInit+0xc0>)
 80064ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064f2:	601a      	str	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	200010d0 	.word	0x200010d0
 8006504:	20001cd0 	.word	0x20001cd0
 8006508:	20001cd8 	.word	0x20001cd8
 800650c:	20001ce0 	.word	0x20001ce0
 8006510:	20001cdc 	.word	0x20001cdc
 8006514:	20001ce4 	.word	0x20001ce4

08006518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006520:	4b28      	ldr	r3, [pc, #160]	; (80065c4 <prvInsertBlockIntoFreeList+0xac>)
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	e002      	b.n	800652c <prvInsertBlockIntoFreeList+0x14>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d8f7      	bhi.n	8006526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	4413      	add	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d108      	bne.n	800655a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	441a      	add	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	441a      	add	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d118      	bne.n	80065a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d00d      	beq.n	8006596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	441a      	add	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e008      	b.n	80065a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006596:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e003      	b.n	80065a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d002      	beq.n	80065b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20001cd0 	.word	0x20001cd0
 80065c8:	20001cd8 	.word	0x20001cd8

080065cc <__errno>:
 80065cc:	4b01      	ldr	r3, [pc, #4]	; (80065d4 <__errno+0x8>)
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20000010 	.word	0x20000010

080065d8 <std>:
 80065d8:	2300      	movs	r3, #0
 80065da:	b510      	push	{r4, lr}
 80065dc:	4604      	mov	r4, r0
 80065de:	e9c0 3300 	strd	r3, r3, [r0]
 80065e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065e6:	6083      	str	r3, [r0, #8]
 80065e8:	8181      	strh	r1, [r0, #12]
 80065ea:	6643      	str	r3, [r0, #100]	; 0x64
 80065ec:	81c2      	strh	r2, [r0, #14]
 80065ee:	6183      	str	r3, [r0, #24]
 80065f0:	4619      	mov	r1, r3
 80065f2:	2208      	movs	r2, #8
 80065f4:	305c      	adds	r0, #92	; 0x5c
 80065f6:	f000 f91a 	bl	800682e <memset>
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <std+0x38>)
 80065fc:	6263      	str	r3, [r4, #36]	; 0x24
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <std+0x3c>)
 8006600:	62a3      	str	r3, [r4, #40]	; 0x28
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <std+0x40>)
 8006604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <std+0x44>)
 8006608:	6224      	str	r4, [r4, #32]
 800660a:	6323      	str	r3, [r4, #48]	; 0x30
 800660c:	bd10      	pop	{r4, pc}
 800660e:	bf00      	nop
 8006610:	0800741d 	.word	0x0800741d
 8006614:	0800743f 	.word	0x0800743f
 8006618:	08007477 	.word	0x08007477
 800661c:	0800749b 	.word	0x0800749b

08006620 <_cleanup_r>:
 8006620:	4901      	ldr	r1, [pc, #4]	; (8006628 <_cleanup_r+0x8>)
 8006622:	f000 b8af 	b.w	8006784 <_fwalk_reent>
 8006626:	bf00      	nop
 8006628:	08008469 	.word	0x08008469

0800662c <__sfmoreglue>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	2268      	movs	r2, #104	; 0x68
 8006630:	1e4d      	subs	r5, r1, #1
 8006632:	4355      	muls	r5, r2
 8006634:	460e      	mov	r6, r1
 8006636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800663a:	f000 f921 	bl	8006880 <_malloc_r>
 800663e:	4604      	mov	r4, r0
 8006640:	b140      	cbz	r0, 8006654 <__sfmoreglue+0x28>
 8006642:	2100      	movs	r1, #0
 8006644:	e9c0 1600 	strd	r1, r6, [r0]
 8006648:	300c      	adds	r0, #12
 800664a:	60a0      	str	r0, [r4, #8]
 800664c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006650:	f000 f8ed 	bl	800682e <memset>
 8006654:	4620      	mov	r0, r4
 8006656:	bd70      	pop	{r4, r5, r6, pc}

08006658 <__sfp_lock_acquire>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_acquire+0x8>)
 800665a:	f000 b8d8 	b.w	800680e <__retarget_lock_acquire_recursive>
 800665e:	bf00      	nop
 8006660:	20001ce9 	.word	0x20001ce9

08006664 <__sfp_lock_release>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sfp_lock_release+0x8>)
 8006666:	f000 b8d3 	b.w	8006810 <__retarget_lock_release_recursive>
 800666a:	bf00      	nop
 800666c:	20001ce9 	.word	0x20001ce9

08006670 <__sinit_lock_acquire>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__sinit_lock_acquire+0x8>)
 8006672:	f000 b8cc 	b.w	800680e <__retarget_lock_acquire_recursive>
 8006676:	bf00      	nop
 8006678:	20001cea 	.word	0x20001cea

0800667c <__sinit_lock_release>:
 800667c:	4801      	ldr	r0, [pc, #4]	; (8006684 <__sinit_lock_release+0x8>)
 800667e:	f000 b8c7 	b.w	8006810 <__retarget_lock_release_recursive>
 8006682:	bf00      	nop
 8006684:	20001cea 	.word	0x20001cea

08006688 <__sinit>:
 8006688:	b510      	push	{r4, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	f7ff fff0 	bl	8006670 <__sinit_lock_acquire>
 8006690:	69a3      	ldr	r3, [r4, #24]
 8006692:	b11b      	cbz	r3, 800669c <__sinit+0x14>
 8006694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006698:	f7ff bff0 	b.w	800667c <__sinit_lock_release>
 800669c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066a0:	6523      	str	r3, [r4, #80]	; 0x50
 80066a2:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <__sinit+0x68>)
 80066a4:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <__sinit+0x6c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80066aa:	42a3      	cmp	r3, r4
 80066ac:	bf04      	itt	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	61a3      	streq	r3, [r4, #24]
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 f820 	bl	80066f8 <__sfp>
 80066b8:	6060      	str	r0, [r4, #4]
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f81c 	bl	80066f8 <__sfp>
 80066c0:	60a0      	str	r0, [r4, #8]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 f818 	bl	80066f8 <__sfp>
 80066c8:	2200      	movs	r2, #0
 80066ca:	60e0      	str	r0, [r4, #12]
 80066cc:	2104      	movs	r1, #4
 80066ce:	6860      	ldr	r0, [r4, #4]
 80066d0:	f7ff ff82 	bl	80065d8 <std>
 80066d4:	68a0      	ldr	r0, [r4, #8]
 80066d6:	2201      	movs	r2, #1
 80066d8:	2109      	movs	r1, #9
 80066da:	f7ff ff7d 	bl	80065d8 <std>
 80066de:	68e0      	ldr	r0, [r4, #12]
 80066e0:	2202      	movs	r2, #2
 80066e2:	2112      	movs	r1, #18
 80066e4:	f7ff ff78 	bl	80065d8 <std>
 80066e8:	2301      	movs	r3, #1
 80066ea:	61a3      	str	r3, [r4, #24]
 80066ec:	e7d2      	b.n	8006694 <__sinit+0xc>
 80066ee:	bf00      	nop
 80066f0:	08009368 	.word	0x08009368
 80066f4:	08006621 	.word	0x08006621

080066f8 <__sfp>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	4607      	mov	r7, r0
 80066fc:	f7ff ffac 	bl	8006658 <__sfp_lock_acquire>
 8006700:	4b1e      	ldr	r3, [pc, #120]	; (800677c <__sfp+0x84>)
 8006702:	681e      	ldr	r6, [r3, #0]
 8006704:	69b3      	ldr	r3, [r6, #24]
 8006706:	b913      	cbnz	r3, 800670e <__sfp+0x16>
 8006708:	4630      	mov	r0, r6
 800670a:	f7ff ffbd 	bl	8006688 <__sinit>
 800670e:	3648      	adds	r6, #72	; 0x48
 8006710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006714:	3b01      	subs	r3, #1
 8006716:	d503      	bpl.n	8006720 <__sfp+0x28>
 8006718:	6833      	ldr	r3, [r6, #0]
 800671a:	b30b      	cbz	r3, 8006760 <__sfp+0x68>
 800671c:	6836      	ldr	r6, [r6, #0]
 800671e:	e7f7      	b.n	8006710 <__sfp+0x18>
 8006720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006724:	b9d5      	cbnz	r5, 800675c <__sfp+0x64>
 8006726:	4b16      	ldr	r3, [pc, #88]	; (8006780 <__sfp+0x88>)
 8006728:	60e3      	str	r3, [r4, #12]
 800672a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800672e:	6665      	str	r5, [r4, #100]	; 0x64
 8006730:	f000 f86c 	bl	800680c <__retarget_lock_init_recursive>
 8006734:	f7ff ff96 	bl	8006664 <__sfp_lock_release>
 8006738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800673c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006740:	6025      	str	r5, [r4, #0]
 8006742:	61a5      	str	r5, [r4, #24]
 8006744:	2208      	movs	r2, #8
 8006746:	4629      	mov	r1, r5
 8006748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800674c:	f000 f86f 	bl	800682e <memset>
 8006750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006758:	4620      	mov	r0, r4
 800675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800675c:	3468      	adds	r4, #104	; 0x68
 800675e:	e7d9      	b.n	8006714 <__sfp+0x1c>
 8006760:	2104      	movs	r1, #4
 8006762:	4638      	mov	r0, r7
 8006764:	f7ff ff62 	bl	800662c <__sfmoreglue>
 8006768:	4604      	mov	r4, r0
 800676a:	6030      	str	r0, [r6, #0]
 800676c:	2800      	cmp	r0, #0
 800676e:	d1d5      	bne.n	800671c <__sfp+0x24>
 8006770:	f7ff ff78 	bl	8006664 <__sfp_lock_release>
 8006774:	230c      	movs	r3, #12
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	e7ee      	b.n	8006758 <__sfp+0x60>
 800677a:	bf00      	nop
 800677c:	08009368 	.word	0x08009368
 8006780:	ffff0001 	.word	0xffff0001

08006784 <_fwalk_reent>:
 8006784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006788:	4606      	mov	r6, r0
 800678a:	4688      	mov	r8, r1
 800678c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006790:	2700      	movs	r7, #0
 8006792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006796:	f1b9 0901 	subs.w	r9, r9, #1
 800679a:	d505      	bpl.n	80067a8 <_fwalk_reent+0x24>
 800679c:	6824      	ldr	r4, [r4, #0]
 800679e:	2c00      	cmp	r4, #0
 80067a0:	d1f7      	bne.n	8006792 <_fwalk_reent+0xe>
 80067a2:	4638      	mov	r0, r7
 80067a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a8:	89ab      	ldrh	r3, [r5, #12]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d907      	bls.n	80067be <_fwalk_reent+0x3a>
 80067ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067b2:	3301      	adds	r3, #1
 80067b4:	d003      	beq.n	80067be <_fwalk_reent+0x3a>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	47c0      	blx	r8
 80067bc:	4307      	orrs	r7, r0
 80067be:	3568      	adds	r5, #104	; 0x68
 80067c0:	e7e9      	b.n	8006796 <_fwalk_reent+0x12>
	...

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	4d0d      	ldr	r5, [pc, #52]	; (80067fc <__libc_init_array+0x38>)
 80067c8:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067ca:	1b64      	subs	r4, r4, r5
 80067cc:	10a4      	asrs	r4, r4, #2
 80067ce:	2600      	movs	r6, #0
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	4d0b      	ldr	r5, [pc, #44]	; (8006804 <__libc_init_array+0x40>)
 80067d6:	4c0c      	ldr	r4, [pc, #48]	; (8006808 <__libc_init_array+0x44>)
 80067d8:	f002 fd20 	bl	800921c <_init>
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	2600      	movs	r6, #0
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	080096e4 	.word	0x080096e4
 8006800:	080096e4 	.word	0x080096e4
 8006804:	080096e4 	.word	0x080096e4
 8006808:	080096e8 	.word	0x080096e8

0800680c <__retarget_lock_init_recursive>:
 800680c:	4770      	bx	lr

0800680e <__retarget_lock_acquire_recursive>:
 800680e:	4770      	bx	lr

08006810 <__retarget_lock_release_recursive>:
 8006810:	4770      	bx	lr

08006812 <memcpy>:
 8006812:	440a      	add	r2, r1
 8006814:	4291      	cmp	r1, r2
 8006816:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800681a:	d100      	bne.n	800681e <memcpy+0xc>
 800681c:	4770      	bx	lr
 800681e:	b510      	push	{r4, lr}
 8006820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006828:	4291      	cmp	r1, r2
 800682a:	d1f9      	bne.n	8006820 <memcpy+0xe>
 800682c:	bd10      	pop	{r4, pc}

0800682e <memset>:
 800682e:	4402      	add	r2, r0
 8006830:	4603      	mov	r3, r0
 8006832:	4293      	cmp	r3, r2
 8006834:	d100      	bne.n	8006838 <memset+0xa>
 8006836:	4770      	bx	lr
 8006838:	f803 1b01 	strb.w	r1, [r3], #1
 800683c:	e7f9      	b.n	8006832 <memset+0x4>
	...

08006840 <sbrk_aligned>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4e0e      	ldr	r6, [pc, #56]	; (800687c <sbrk_aligned+0x3c>)
 8006844:	460c      	mov	r4, r1
 8006846:	6831      	ldr	r1, [r6, #0]
 8006848:	4605      	mov	r5, r0
 800684a:	b911      	cbnz	r1, 8006852 <sbrk_aligned+0x12>
 800684c:	f000 fdd6 	bl	80073fc <_sbrk_r>
 8006850:	6030      	str	r0, [r6, #0]
 8006852:	4621      	mov	r1, r4
 8006854:	4628      	mov	r0, r5
 8006856:	f000 fdd1 	bl	80073fc <_sbrk_r>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	d00a      	beq.n	8006874 <sbrk_aligned+0x34>
 800685e:	1cc4      	adds	r4, r0, #3
 8006860:	f024 0403 	bic.w	r4, r4, #3
 8006864:	42a0      	cmp	r0, r4
 8006866:	d007      	beq.n	8006878 <sbrk_aligned+0x38>
 8006868:	1a21      	subs	r1, r4, r0
 800686a:	4628      	mov	r0, r5
 800686c:	f000 fdc6 	bl	80073fc <_sbrk_r>
 8006870:	3001      	adds	r0, #1
 8006872:	d101      	bne.n	8006878 <sbrk_aligned+0x38>
 8006874:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006878:	4620      	mov	r0, r4
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	20001cf0 	.word	0x20001cf0

08006880 <_malloc_r>:
 8006880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	1ccd      	adds	r5, r1, #3
 8006886:	f025 0503 	bic.w	r5, r5, #3
 800688a:	3508      	adds	r5, #8
 800688c:	2d0c      	cmp	r5, #12
 800688e:	bf38      	it	cc
 8006890:	250c      	movcc	r5, #12
 8006892:	2d00      	cmp	r5, #0
 8006894:	4607      	mov	r7, r0
 8006896:	db01      	blt.n	800689c <_malloc_r+0x1c>
 8006898:	42a9      	cmp	r1, r5
 800689a:	d905      	bls.n	80068a8 <_malloc_r+0x28>
 800689c:	230c      	movs	r3, #12
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	2600      	movs	r6, #0
 80068a2:	4630      	mov	r0, r6
 80068a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a8:	4e2e      	ldr	r6, [pc, #184]	; (8006964 <_malloc_r+0xe4>)
 80068aa:	f001 fe9d 	bl	80085e8 <__malloc_lock>
 80068ae:	6833      	ldr	r3, [r6, #0]
 80068b0:	461c      	mov	r4, r3
 80068b2:	bb34      	cbnz	r4, 8006902 <_malloc_r+0x82>
 80068b4:	4629      	mov	r1, r5
 80068b6:	4638      	mov	r0, r7
 80068b8:	f7ff ffc2 	bl	8006840 <sbrk_aligned>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	4604      	mov	r4, r0
 80068c0:	d14d      	bne.n	800695e <_malloc_r+0xde>
 80068c2:	6834      	ldr	r4, [r6, #0]
 80068c4:	4626      	mov	r6, r4
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	d140      	bne.n	800694c <_malloc_r+0xcc>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	4631      	mov	r1, r6
 80068ce:	4638      	mov	r0, r7
 80068d0:	eb04 0803 	add.w	r8, r4, r3
 80068d4:	f000 fd92 	bl	80073fc <_sbrk_r>
 80068d8:	4580      	cmp	r8, r0
 80068da:	d13a      	bne.n	8006952 <_malloc_r+0xd2>
 80068dc:	6821      	ldr	r1, [r4, #0]
 80068de:	3503      	adds	r5, #3
 80068e0:	1a6d      	subs	r5, r5, r1
 80068e2:	f025 0503 	bic.w	r5, r5, #3
 80068e6:	3508      	adds	r5, #8
 80068e8:	2d0c      	cmp	r5, #12
 80068ea:	bf38      	it	cc
 80068ec:	250c      	movcc	r5, #12
 80068ee:	4629      	mov	r1, r5
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff ffa5 	bl	8006840 <sbrk_aligned>
 80068f6:	3001      	adds	r0, #1
 80068f8:	d02b      	beq.n	8006952 <_malloc_r+0xd2>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	442b      	add	r3, r5
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	e00e      	b.n	8006920 <_malloc_r+0xa0>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	1b52      	subs	r2, r2, r5
 8006906:	d41e      	bmi.n	8006946 <_malloc_r+0xc6>
 8006908:	2a0b      	cmp	r2, #11
 800690a:	d916      	bls.n	800693a <_malloc_r+0xba>
 800690c:	1961      	adds	r1, r4, r5
 800690e:	42a3      	cmp	r3, r4
 8006910:	6025      	str	r5, [r4, #0]
 8006912:	bf18      	it	ne
 8006914:	6059      	strne	r1, [r3, #4]
 8006916:	6863      	ldr	r3, [r4, #4]
 8006918:	bf08      	it	eq
 800691a:	6031      	streq	r1, [r6, #0]
 800691c:	5162      	str	r2, [r4, r5]
 800691e:	604b      	str	r3, [r1, #4]
 8006920:	4638      	mov	r0, r7
 8006922:	f104 060b 	add.w	r6, r4, #11
 8006926:	f001 fe65 	bl	80085f4 <__malloc_unlock>
 800692a:	f026 0607 	bic.w	r6, r6, #7
 800692e:	1d23      	adds	r3, r4, #4
 8006930:	1af2      	subs	r2, r6, r3
 8006932:	d0b6      	beq.n	80068a2 <_malloc_r+0x22>
 8006934:	1b9b      	subs	r3, r3, r6
 8006936:	50a3      	str	r3, [r4, r2]
 8006938:	e7b3      	b.n	80068a2 <_malloc_r+0x22>
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	42a3      	cmp	r3, r4
 800693e:	bf0c      	ite	eq
 8006940:	6032      	streq	r2, [r6, #0]
 8006942:	605a      	strne	r2, [r3, #4]
 8006944:	e7ec      	b.n	8006920 <_malloc_r+0xa0>
 8006946:	4623      	mov	r3, r4
 8006948:	6864      	ldr	r4, [r4, #4]
 800694a:	e7b2      	b.n	80068b2 <_malloc_r+0x32>
 800694c:	4634      	mov	r4, r6
 800694e:	6876      	ldr	r6, [r6, #4]
 8006950:	e7b9      	b.n	80068c6 <_malloc_r+0x46>
 8006952:	230c      	movs	r3, #12
 8006954:	603b      	str	r3, [r7, #0]
 8006956:	4638      	mov	r0, r7
 8006958:	f001 fe4c 	bl	80085f4 <__malloc_unlock>
 800695c:	e7a1      	b.n	80068a2 <_malloc_r+0x22>
 800695e:	6025      	str	r5, [r4, #0]
 8006960:	e7de      	b.n	8006920 <_malloc_r+0xa0>
 8006962:	bf00      	nop
 8006964:	20001cec 	.word	0x20001cec

08006968 <__cvt>:
 8006968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	ec55 4b10 	vmov	r4, r5, d0
 8006970:	2d00      	cmp	r5, #0
 8006972:	460e      	mov	r6, r1
 8006974:	4619      	mov	r1, r3
 8006976:	462b      	mov	r3, r5
 8006978:	bfbb      	ittet	lt
 800697a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800697e:	461d      	movlt	r5, r3
 8006980:	2300      	movge	r3, #0
 8006982:	232d      	movlt	r3, #45	; 0x2d
 8006984:	700b      	strb	r3, [r1, #0]
 8006986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006988:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800698c:	4691      	mov	r9, r2
 800698e:	f023 0820 	bic.w	r8, r3, #32
 8006992:	bfbc      	itt	lt
 8006994:	4622      	movlt	r2, r4
 8006996:	4614      	movlt	r4, r2
 8006998:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800699c:	d005      	beq.n	80069aa <__cvt+0x42>
 800699e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069a2:	d100      	bne.n	80069a6 <__cvt+0x3e>
 80069a4:	3601      	adds	r6, #1
 80069a6:	2102      	movs	r1, #2
 80069a8:	e000      	b.n	80069ac <__cvt+0x44>
 80069aa:	2103      	movs	r1, #3
 80069ac:	ab03      	add	r3, sp, #12
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	ab02      	add	r3, sp, #8
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	ec45 4b10 	vmov	d0, r4, r5
 80069b8:	4653      	mov	r3, sl
 80069ba:	4632      	mov	r2, r6
 80069bc:	f000 fee0 	bl	8007780 <_dtoa_r>
 80069c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069c4:	4607      	mov	r7, r0
 80069c6:	d102      	bne.n	80069ce <__cvt+0x66>
 80069c8:	f019 0f01 	tst.w	r9, #1
 80069cc:	d022      	beq.n	8006a14 <__cvt+0xac>
 80069ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069d2:	eb07 0906 	add.w	r9, r7, r6
 80069d6:	d110      	bne.n	80069fa <__cvt+0x92>
 80069d8:	783b      	ldrb	r3, [r7, #0]
 80069da:	2b30      	cmp	r3, #48	; 0x30
 80069dc:	d10a      	bne.n	80069f4 <__cvt+0x8c>
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	4620      	mov	r0, r4
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7fa f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ea:	b918      	cbnz	r0, 80069f4 <__cvt+0x8c>
 80069ec:	f1c6 0601 	rsb	r6, r6, #1
 80069f0:	f8ca 6000 	str.w	r6, [sl]
 80069f4:	f8da 3000 	ldr.w	r3, [sl]
 80069f8:	4499      	add	r9, r3
 80069fa:	2200      	movs	r2, #0
 80069fc:	2300      	movs	r3, #0
 80069fe:	4620      	mov	r0, r4
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7fa f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a06:	b108      	cbz	r0, 8006a0c <__cvt+0xa4>
 8006a08:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a0c:	2230      	movs	r2, #48	; 0x30
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	454b      	cmp	r3, r9
 8006a12:	d307      	bcc.n	8006a24 <__cvt+0xbc>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a18:	1bdb      	subs	r3, r3, r7
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	b004      	add	sp, #16
 8006a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a24:	1c59      	adds	r1, r3, #1
 8006a26:	9103      	str	r1, [sp, #12]
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	e7f0      	b.n	8006a0e <__cvt+0xa6>

08006a2c <__exponent>:
 8006a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2900      	cmp	r1, #0
 8006a32:	bfb8      	it	lt
 8006a34:	4249      	neglt	r1, r1
 8006a36:	f803 2b02 	strb.w	r2, [r3], #2
 8006a3a:	bfb4      	ite	lt
 8006a3c:	222d      	movlt	r2, #45	; 0x2d
 8006a3e:	222b      	movge	r2, #43	; 0x2b
 8006a40:	2909      	cmp	r1, #9
 8006a42:	7042      	strb	r2, [r0, #1]
 8006a44:	dd2a      	ble.n	8006a9c <__exponent+0x70>
 8006a46:	f10d 0407 	add.w	r4, sp, #7
 8006a4a:	46a4      	mov	ip, r4
 8006a4c:	270a      	movs	r7, #10
 8006a4e:	46a6      	mov	lr, r4
 8006a50:	460a      	mov	r2, r1
 8006a52:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a56:	fb07 1516 	mls	r5, r7, r6, r1
 8006a5a:	3530      	adds	r5, #48	; 0x30
 8006a5c:	2a63      	cmp	r2, #99	; 0x63
 8006a5e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006a62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a66:	4631      	mov	r1, r6
 8006a68:	dcf1      	bgt.n	8006a4e <__exponent+0x22>
 8006a6a:	3130      	adds	r1, #48	; 0x30
 8006a6c:	f1ae 0502 	sub.w	r5, lr, #2
 8006a70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a74:	1c44      	adds	r4, r0, #1
 8006a76:	4629      	mov	r1, r5
 8006a78:	4561      	cmp	r1, ip
 8006a7a:	d30a      	bcc.n	8006a92 <__exponent+0x66>
 8006a7c:	f10d 0209 	add.w	r2, sp, #9
 8006a80:	eba2 020e 	sub.w	r2, r2, lr
 8006a84:	4565      	cmp	r5, ip
 8006a86:	bf88      	it	hi
 8006a88:	2200      	movhi	r2, #0
 8006a8a:	4413      	add	r3, r2
 8006a8c:	1a18      	subs	r0, r3, r0
 8006a8e:	b003      	add	sp, #12
 8006a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a9a:	e7ed      	b.n	8006a78 <__exponent+0x4c>
 8006a9c:	2330      	movs	r3, #48	; 0x30
 8006a9e:	3130      	adds	r1, #48	; 0x30
 8006aa0:	7083      	strb	r3, [r0, #2]
 8006aa2:	70c1      	strb	r1, [r0, #3]
 8006aa4:	1d03      	adds	r3, r0, #4
 8006aa6:	e7f1      	b.n	8006a8c <__exponent+0x60>

08006aa8 <_printf_float>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	ed2d 8b02 	vpush	{d8}
 8006ab0:	b08d      	sub	sp, #52	; 0x34
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ab8:	4616      	mov	r6, r2
 8006aba:	461f      	mov	r7, r3
 8006abc:	4605      	mov	r5, r0
 8006abe:	f001 fd0f 	bl	80084e0 <_localeconv_r>
 8006ac2:	f8d0 a000 	ldr.w	sl, [r0]
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	f7f9 fb82 	bl	80001d0 <strlen>
 8006acc:	2300      	movs	r3, #0
 8006ace:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	9305      	str	r3, [sp, #20]
 8006ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006adc:	3307      	adds	r3, #7
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	f103 0208 	add.w	r2, r3, #8
 8006ae6:	f8c8 2000 	str.w	r2, [r8]
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006af2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006af6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006afa:	9307      	str	r3, [sp, #28]
 8006afc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b00:	ee08 0a10 	vmov	s16, r0
 8006b04:	4b9f      	ldr	r3, [pc, #636]	; (8006d84 <_printf_float+0x2dc>)
 8006b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b0e:	f7fa f80d 	bl	8000b2c <__aeabi_dcmpun>
 8006b12:	bb88      	cbnz	r0, 8006b78 <_printf_float+0xd0>
 8006b14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b18:	4b9a      	ldr	r3, [pc, #616]	; (8006d84 <_printf_float+0x2dc>)
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b1e:	f7f9 ffe7 	bl	8000af0 <__aeabi_dcmple>
 8006b22:	bb48      	cbnz	r0, 8006b78 <_printf_float+0xd0>
 8006b24:	2200      	movs	r2, #0
 8006b26:	2300      	movs	r3, #0
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	f7f9 ffd6 	bl	8000adc <__aeabi_dcmplt>
 8006b30:	b110      	cbz	r0, 8006b38 <_printf_float+0x90>
 8006b32:	232d      	movs	r3, #45	; 0x2d
 8006b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b38:	4b93      	ldr	r3, [pc, #588]	; (8006d88 <_printf_float+0x2e0>)
 8006b3a:	4894      	ldr	r0, [pc, #592]	; (8006d8c <_printf_float+0x2e4>)
 8006b3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b40:	bf94      	ite	ls
 8006b42:	4698      	movls	r8, r3
 8006b44:	4680      	movhi	r8, r0
 8006b46:	2303      	movs	r3, #3
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	9b05      	ldr	r3, [sp, #20]
 8006b4c:	f023 0204 	bic.w	r2, r3, #4
 8006b50:	6022      	str	r2, [r4, #0]
 8006b52:	f04f 0900 	mov.w	r9, #0
 8006b56:	9700      	str	r7, [sp, #0]
 8006b58:	4633      	mov	r3, r6
 8006b5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 f9d8 	bl	8006f14 <_printf_common>
 8006b64:	3001      	adds	r0, #1
 8006b66:	f040 8090 	bne.w	8006c8a <_printf_float+0x1e2>
 8006b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b6e:	b00d      	add	sp, #52	; 0x34
 8006b70:	ecbd 8b02 	vpop	{d8}
 8006b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	4649      	mov	r1, r9
 8006b80:	f7f9 ffd4 	bl	8000b2c <__aeabi_dcmpun>
 8006b84:	b140      	cbz	r0, 8006b98 <_printf_float+0xf0>
 8006b86:	464b      	mov	r3, r9
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	bfbc      	itt	lt
 8006b8c:	232d      	movlt	r3, #45	; 0x2d
 8006b8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b92:	487f      	ldr	r0, [pc, #508]	; (8006d90 <_printf_float+0x2e8>)
 8006b94:	4b7f      	ldr	r3, [pc, #508]	; (8006d94 <_printf_float+0x2ec>)
 8006b96:	e7d1      	b.n	8006b3c <_printf_float+0x94>
 8006b98:	6863      	ldr	r3, [r4, #4]
 8006b9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b9e:	9206      	str	r2, [sp, #24]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	d13f      	bne.n	8006c24 <_printf_float+0x17c>
 8006ba4:	2306      	movs	r3, #6
 8006ba6:	6063      	str	r3, [r4, #4]
 8006ba8:	9b05      	ldr	r3, [sp, #20]
 8006baa:	6861      	ldr	r1, [r4, #4]
 8006bac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9303      	str	r3, [sp, #12]
 8006bb4:	ab0a      	add	r3, sp, #40	; 0x28
 8006bb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bba:	ab09      	add	r3, sp, #36	; 0x24
 8006bbc:	ec49 8b10 	vmov	d0, r8, r9
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	6022      	str	r2, [r4, #0]
 8006bc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f7ff fecd 	bl	8006968 <__cvt>
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bd2:	2b47      	cmp	r3, #71	; 0x47
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	d108      	bne.n	8006bea <_printf_float+0x142>
 8006bd8:	1cc8      	adds	r0, r1, #3
 8006bda:	db02      	blt.n	8006be2 <_printf_float+0x13a>
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	4299      	cmp	r1, r3
 8006be0:	dd41      	ble.n	8006c66 <_printf_float+0x1be>
 8006be2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006be6:	fa5f fb8b 	uxtb.w	fp, fp
 8006bea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bee:	d820      	bhi.n	8006c32 <_printf_float+0x18a>
 8006bf0:	3901      	subs	r1, #1
 8006bf2:	465a      	mov	r2, fp
 8006bf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bf8:	9109      	str	r1, [sp, #36]	; 0x24
 8006bfa:	f7ff ff17 	bl	8006a2c <__exponent>
 8006bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c00:	1813      	adds	r3, r2, r0
 8006c02:	2a01      	cmp	r2, #1
 8006c04:	4681      	mov	r9, r0
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	dc02      	bgt.n	8006c10 <_printf_float+0x168>
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	07d2      	lsls	r2, r2, #31
 8006c0e:	d501      	bpl.n	8006c14 <_printf_float+0x16c>
 8006c10:	3301      	adds	r3, #1
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d09c      	beq.n	8006b56 <_printf_float+0xae>
 8006c1c:	232d      	movs	r3, #45	; 0x2d
 8006c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c22:	e798      	b.n	8006b56 <_printf_float+0xae>
 8006c24:	9a06      	ldr	r2, [sp, #24]
 8006c26:	2a47      	cmp	r2, #71	; 0x47
 8006c28:	d1be      	bne.n	8006ba8 <_printf_float+0x100>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1bc      	bne.n	8006ba8 <_printf_float+0x100>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e7b9      	b.n	8006ba6 <_printf_float+0xfe>
 8006c32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c36:	d118      	bne.n	8006c6a <_printf_float+0x1c2>
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	dd0b      	ble.n	8006c56 <_printf_float+0x1ae>
 8006c3e:	6121      	str	r1, [r4, #16]
 8006c40:	b913      	cbnz	r3, 8006c48 <_printf_float+0x1a0>
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	07d0      	lsls	r0, r2, #31
 8006c46:	d502      	bpl.n	8006c4e <_printf_float+0x1a6>
 8006c48:	3301      	adds	r3, #1
 8006c4a:	440b      	add	r3, r1
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c50:	f04f 0900 	mov.w	r9, #0
 8006c54:	e7de      	b.n	8006c14 <_printf_float+0x16c>
 8006c56:	b913      	cbnz	r3, 8006c5e <_printf_float+0x1b6>
 8006c58:	6822      	ldr	r2, [r4, #0]
 8006c5a:	07d2      	lsls	r2, r2, #31
 8006c5c:	d501      	bpl.n	8006c62 <_printf_float+0x1ba>
 8006c5e:	3302      	adds	r3, #2
 8006c60:	e7f4      	b.n	8006c4c <_printf_float+0x1a4>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7f2      	b.n	8006c4c <_printf_float+0x1a4>
 8006c66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	db05      	blt.n	8006c7c <_printf_float+0x1d4>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	6121      	str	r1, [r4, #16]
 8006c74:	07d8      	lsls	r0, r3, #31
 8006c76:	d5ea      	bpl.n	8006c4e <_printf_float+0x1a6>
 8006c78:	1c4b      	adds	r3, r1, #1
 8006c7a:	e7e7      	b.n	8006c4c <_printf_float+0x1a4>
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	bfd4      	ite	le
 8006c80:	f1c1 0202 	rsble	r2, r1, #2
 8006c84:	2201      	movgt	r2, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	e7e0      	b.n	8006c4c <_printf_float+0x1a4>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	055a      	lsls	r2, r3, #21
 8006c8e:	d407      	bmi.n	8006ca0 <_printf_float+0x1f8>
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	4642      	mov	r2, r8
 8006c94:	4631      	mov	r1, r6
 8006c96:	4628      	mov	r0, r5
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d12c      	bne.n	8006cf8 <_printf_float+0x250>
 8006c9e:	e764      	b.n	8006b6a <_printf_float+0xc2>
 8006ca0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ca4:	f240 80e0 	bls.w	8006e68 <_printf_float+0x3c0>
 8006ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cac:	2200      	movs	r2, #0
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f7f9 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d034      	beq.n	8006d22 <_printf_float+0x27a>
 8006cb8:	4a37      	ldr	r2, [pc, #220]	; (8006d98 <_printf_float+0x2f0>)
 8006cba:	2301      	movs	r3, #1
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	47b8      	blx	r7
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	f43f af51 	beq.w	8006b6a <_printf_float+0xc2>
 8006cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	db02      	blt.n	8006cd6 <_printf_float+0x22e>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	07d8      	lsls	r0, r3, #31
 8006cd4:	d510      	bpl.n	8006cf8 <_printf_float+0x250>
 8006cd6:	ee18 3a10 	vmov	r3, s16
 8006cda:	4652      	mov	r2, sl
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f43f af41 	beq.w	8006b6a <_printf_float+0xc2>
 8006ce8:	f04f 0800 	mov.w	r8, #0
 8006cec:	f104 091a 	add.w	r9, r4, #26
 8006cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	4543      	cmp	r3, r8
 8006cf6:	dc09      	bgt.n	8006d0c <_printf_float+0x264>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	079b      	lsls	r3, r3, #30
 8006cfc:	f100 8105 	bmi.w	8006f0a <_printf_float+0x462>
 8006d00:	68e0      	ldr	r0, [r4, #12]
 8006d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d04:	4298      	cmp	r0, r3
 8006d06:	bfb8      	it	lt
 8006d08:	4618      	movlt	r0, r3
 8006d0a:	e730      	b.n	8006b6e <_printf_float+0xc6>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	464a      	mov	r2, r9
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af27 	beq.w	8006b6a <_printf_float+0xc2>
 8006d1c:	f108 0801 	add.w	r8, r8, #1
 8006d20:	e7e6      	b.n	8006cf0 <_printf_float+0x248>
 8006d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dc39      	bgt.n	8006d9c <_printf_float+0x2f4>
 8006d28:	4a1b      	ldr	r2, [pc, #108]	; (8006d98 <_printf_float+0x2f0>)
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f af19 	beq.w	8006b6a <_printf_float+0xc2>
 8006d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d102      	bne.n	8006d46 <_printf_float+0x29e>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	07d9      	lsls	r1, r3, #31
 8006d44:	d5d8      	bpl.n	8006cf8 <_printf_float+0x250>
 8006d46:	ee18 3a10 	vmov	r3, s16
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af09 	beq.w	8006b6a <_printf_float+0xc2>
 8006d58:	f04f 0900 	mov.w	r9, #0
 8006d5c:	f104 0a1a 	add.w	sl, r4, #26
 8006d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d62:	425b      	negs	r3, r3
 8006d64:	454b      	cmp	r3, r9
 8006d66:	dc01      	bgt.n	8006d6c <_printf_float+0x2c4>
 8006d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6a:	e792      	b.n	8006c92 <_printf_float+0x1ea>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4652      	mov	r2, sl
 8006d70:	4631      	mov	r1, r6
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	f43f aef7 	beq.w	8006b6a <_printf_float+0xc2>
 8006d7c:	f109 0901 	add.w	r9, r9, #1
 8006d80:	e7ee      	b.n	8006d60 <_printf_float+0x2b8>
 8006d82:	bf00      	nop
 8006d84:	7fefffff 	.word	0x7fefffff
 8006d88:	0800936c 	.word	0x0800936c
 8006d8c:	08009370 	.word	0x08009370
 8006d90:	08009378 	.word	0x08009378
 8006d94:	08009374 	.word	0x08009374
 8006d98:	0800937c 	.word	0x0800937c
 8006d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da0:	429a      	cmp	r2, r3
 8006da2:	bfa8      	it	ge
 8006da4:	461a      	movge	r2, r3
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	4691      	mov	r9, r2
 8006daa:	dc37      	bgt.n	8006e1c <_printf_float+0x374>
 8006dac:	f04f 0b00 	mov.w	fp, #0
 8006db0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006db4:	f104 021a 	add.w	r2, r4, #26
 8006db8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dba:	9305      	str	r3, [sp, #20]
 8006dbc:	eba3 0309 	sub.w	r3, r3, r9
 8006dc0:	455b      	cmp	r3, fp
 8006dc2:	dc33      	bgt.n	8006e2c <_printf_float+0x384>
 8006dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	db3b      	blt.n	8006e44 <_printf_float+0x39c>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07da      	lsls	r2, r3, #31
 8006dd0:	d438      	bmi.n	8006e44 <_printf_float+0x39c>
 8006dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd4:	9a05      	ldr	r2, [sp, #20]
 8006dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dd8:	1a9a      	subs	r2, r3, r2
 8006dda:	eba3 0901 	sub.w	r9, r3, r1
 8006dde:	4591      	cmp	r9, r2
 8006de0:	bfa8      	it	ge
 8006de2:	4691      	movge	r9, r2
 8006de4:	f1b9 0f00 	cmp.w	r9, #0
 8006de8:	dc35      	bgt.n	8006e56 <_printf_float+0x3ae>
 8006dea:	f04f 0800 	mov.w	r8, #0
 8006dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df2:	f104 0a1a 	add.w	sl, r4, #26
 8006df6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	eba3 0309 	sub.w	r3, r3, r9
 8006e00:	4543      	cmp	r3, r8
 8006e02:	f77f af79 	ble.w	8006cf8 <_printf_float+0x250>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4652      	mov	r2, sl
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	f43f aeaa 	beq.w	8006b6a <_printf_float+0xc2>
 8006e16:	f108 0801 	add.w	r8, r8, #1
 8006e1a:	e7ec      	b.n	8006df6 <_printf_float+0x34e>
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4642      	mov	r2, r8
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	d1c0      	bne.n	8006dac <_printf_float+0x304>
 8006e2a:	e69e      	b.n	8006b6a <_printf_float+0xc2>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	9205      	str	r2, [sp, #20]
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f ae97 	beq.w	8006b6a <_printf_float+0xc2>
 8006e3c:	9a05      	ldr	r2, [sp, #20]
 8006e3e:	f10b 0b01 	add.w	fp, fp, #1
 8006e42:	e7b9      	b.n	8006db8 <_printf_float+0x310>
 8006e44:	ee18 3a10 	vmov	r3, s16
 8006e48:	4652      	mov	r2, sl
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	d1be      	bne.n	8006dd2 <_printf_float+0x32a>
 8006e54:	e689      	b.n	8006b6a <_printf_float+0xc2>
 8006e56:	9a05      	ldr	r2, [sp, #20]
 8006e58:	464b      	mov	r3, r9
 8006e5a:	4442      	add	r2, r8
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	d1c1      	bne.n	8006dea <_printf_float+0x342>
 8006e66:	e680      	b.n	8006b6a <_printf_float+0xc2>
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	2a01      	cmp	r2, #1
 8006e6c:	dc01      	bgt.n	8006e72 <_printf_float+0x3ca>
 8006e6e:	07db      	lsls	r3, r3, #31
 8006e70:	d538      	bpl.n	8006ee4 <_printf_float+0x43c>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4642      	mov	r2, r8
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f ae74 	beq.w	8006b6a <_printf_float+0xc2>
 8006e82:	ee18 3a10 	vmov	r3, s16
 8006e86:	4652      	mov	r2, sl
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f ae6b 	beq.w	8006b6a <_printf_float+0xc2>
 8006e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f7f9 fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ea0:	b9d8      	cbnz	r0, 8006eda <_printf_float+0x432>
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea4:	f108 0201 	add.w	r2, r8, #1
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d10e      	bne.n	8006ed2 <_printf_float+0x42a>
 8006eb4:	e659      	b.n	8006b6a <_printf_float+0xc2>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4652      	mov	r2, sl
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f ae52 	beq.w	8006b6a <_printf_float+0xc2>
 8006ec6:	f108 0801 	add.w	r8, r8, #1
 8006eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	4543      	cmp	r3, r8
 8006ed0:	dcf1      	bgt.n	8006eb6 <_printf_float+0x40e>
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ed8:	e6dc      	b.n	8006c94 <_printf_float+0x1ec>
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	f104 0a1a 	add.w	sl, r4, #26
 8006ee2:	e7f2      	b.n	8006eca <_printf_float+0x422>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	e7df      	b.n	8006eaa <_printf_float+0x402>
 8006eea:	2301      	movs	r3, #1
 8006eec:	464a      	mov	r2, r9
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	f43f ae38 	beq.w	8006b6a <_printf_float+0xc2>
 8006efa:	f108 0801 	add.w	r8, r8, #1
 8006efe:	68e3      	ldr	r3, [r4, #12]
 8006f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f02:	1a5b      	subs	r3, r3, r1
 8006f04:	4543      	cmp	r3, r8
 8006f06:	dcf0      	bgt.n	8006eea <_printf_float+0x442>
 8006f08:	e6fa      	b.n	8006d00 <_printf_float+0x258>
 8006f0a:	f04f 0800 	mov.w	r8, #0
 8006f0e:	f104 0919 	add.w	r9, r4, #25
 8006f12:	e7f4      	b.n	8006efe <_printf_float+0x456>

08006f14 <_printf_common>:
 8006f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	4616      	mov	r6, r2
 8006f1a:	4699      	mov	r9, r3
 8006f1c:	688a      	ldr	r2, [r1, #8]
 8006f1e:	690b      	ldr	r3, [r1, #16]
 8006f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f24:	4293      	cmp	r3, r2
 8006f26:	bfb8      	it	lt
 8006f28:	4613      	movlt	r3, r2
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f30:	4607      	mov	r7, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	b10a      	cbz	r2, 8006f3a <_printf_common+0x26>
 8006f36:	3301      	adds	r3, #1
 8006f38:	6033      	str	r3, [r6, #0]
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	0699      	lsls	r1, r3, #26
 8006f3e:	bf42      	ittt	mi
 8006f40:	6833      	ldrmi	r3, [r6, #0]
 8006f42:	3302      	addmi	r3, #2
 8006f44:	6033      	strmi	r3, [r6, #0]
 8006f46:	6825      	ldr	r5, [r4, #0]
 8006f48:	f015 0506 	ands.w	r5, r5, #6
 8006f4c:	d106      	bne.n	8006f5c <_printf_common+0x48>
 8006f4e:	f104 0a19 	add.w	sl, r4, #25
 8006f52:	68e3      	ldr	r3, [r4, #12]
 8006f54:	6832      	ldr	r2, [r6, #0]
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	42ab      	cmp	r3, r5
 8006f5a:	dc26      	bgt.n	8006faa <_printf_common+0x96>
 8006f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f60:	1e13      	subs	r3, r2, #0
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	bf18      	it	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	0692      	lsls	r2, r2, #26
 8006f6a:	d42b      	bmi.n	8006fc4 <_printf_common+0xb0>
 8006f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f70:	4649      	mov	r1, r9
 8006f72:	4638      	mov	r0, r7
 8006f74:	47c0      	blx	r8
 8006f76:	3001      	adds	r0, #1
 8006f78:	d01e      	beq.n	8006fb8 <_printf_common+0xa4>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	68e5      	ldr	r5, [r4, #12]
 8006f7e:	6832      	ldr	r2, [r6, #0]
 8006f80:	f003 0306 	and.w	r3, r3, #6
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	bf08      	it	eq
 8006f88:	1aad      	subeq	r5, r5, r2
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	6922      	ldr	r2, [r4, #16]
 8006f8e:	bf0c      	ite	eq
 8006f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f94:	2500      	movne	r5, #0
 8006f96:	4293      	cmp	r3, r2
 8006f98:	bfc4      	itt	gt
 8006f9a:	1a9b      	subgt	r3, r3, r2
 8006f9c:	18ed      	addgt	r5, r5, r3
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	341a      	adds	r4, #26
 8006fa2:	42b5      	cmp	r5, r6
 8006fa4:	d11a      	bne.n	8006fdc <_printf_common+0xc8>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e008      	b.n	8006fbc <_printf_common+0xa8>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4652      	mov	r2, sl
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	47c0      	blx	r8
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d103      	bne.n	8006fc0 <_printf_common+0xac>
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	e7c6      	b.n	8006f52 <_printf_common+0x3e>
 8006fc4:	18e1      	adds	r1, r4, r3
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	2030      	movs	r0, #48	; 0x30
 8006fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fce:	4422      	add	r2, r4
 8006fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fd8:	3302      	adds	r3, #2
 8006fda:	e7c7      	b.n	8006f6c <_printf_common+0x58>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d0e6      	beq.n	8006fb8 <_printf_common+0xa4>
 8006fea:	3601      	adds	r6, #1
 8006fec:	e7d9      	b.n	8006fa2 <_printf_common+0x8e>
	...

08006ff0 <_printf_i>:
 8006ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	7e0f      	ldrb	r7, [r1, #24]
 8006ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ff8:	2f78      	cmp	r7, #120	; 0x78
 8006ffa:	4691      	mov	r9, r2
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	469a      	mov	sl, r3
 8007002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007006:	d807      	bhi.n	8007018 <_printf_i+0x28>
 8007008:	2f62      	cmp	r7, #98	; 0x62
 800700a:	d80a      	bhi.n	8007022 <_printf_i+0x32>
 800700c:	2f00      	cmp	r7, #0
 800700e:	f000 80d8 	beq.w	80071c2 <_printf_i+0x1d2>
 8007012:	2f58      	cmp	r7, #88	; 0x58
 8007014:	f000 80a3 	beq.w	800715e <_printf_i+0x16e>
 8007018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800701c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007020:	e03a      	b.n	8007098 <_printf_i+0xa8>
 8007022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007026:	2b15      	cmp	r3, #21
 8007028:	d8f6      	bhi.n	8007018 <_printf_i+0x28>
 800702a:	a101      	add	r1, pc, #4	; (adr r1, 8007030 <_printf_i+0x40>)
 800702c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007030:	08007089 	.word	0x08007089
 8007034:	0800709d 	.word	0x0800709d
 8007038:	08007019 	.word	0x08007019
 800703c:	08007019 	.word	0x08007019
 8007040:	08007019 	.word	0x08007019
 8007044:	08007019 	.word	0x08007019
 8007048:	0800709d 	.word	0x0800709d
 800704c:	08007019 	.word	0x08007019
 8007050:	08007019 	.word	0x08007019
 8007054:	08007019 	.word	0x08007019
 8007058:	08007019 	.word	0x08007019
 800705c:	080071a9 	.word	0x080071a9
 8007060:	080070cd 	.word	0x080070cd
 8007064:	0800718b 	.word	0x0800718b
 8007068:	08007019 	.word	0x08007019
 800706c:	08007019 	.word	0x08007019
 8007070:	080071cb 	.word	0x080071cb
 8007074:	08007019 	.word	0x08007019
 8007078:	080070cd 	.word	0x080070cd
 800707c:	08007019 	.word	0x08007019
 8007080:	08007019 	.word	0x08007019
 8007084:	08007193 	.word	0x08007193
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	1d1a      	adds	r2, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	602a      	str	r2, [r5, #0]
 8007090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007098:	2301      	movs	r3, #1
 800709a:	e0a3      	b.n	80071e4 <_printf_i+0x1f4>
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	6829      	ldr	r1, [r5, #0]
 80070a0:	0606      	lsls	r6, r0, #24
 80070a2:	f101 0304 	add.w	r3, r1, #4
 80070a6:	d50a      	bpl.n	80070be <_printf_i+0xce>
 80070a8:	680e      	ldr	r6, [r1, #0]
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	2e00      	cmp	r6, #0
 80070ae:	da03      	bge.n	80070b8 <_printf_i+0xc8>
 80070b0:	232d      	movs	r3, #45	; 0x2d
 80070b2:	4276      	negs	r6, r6
 80070b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b8:	485e      	ldr	r0, [pc, #376]	; (8007234 <_printf_i+0x244>)
 80070ba:	230a      	movs	r3, #10
 80070bc:	e019      	b.n	80070f2 <_printf_i+0x102>
 80070be:	680e      	ldr	r6, [r1, #0]
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070c6:	bf18      	it	ne
 80070c8:	b236      	sxthne	r6, r6
 80070ca:	e7ef      	b.n	80070ac <_printf_i+0xbc>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	6820      	ldr	r0, [r4, #0]
 80070d0:	1d19      	adds	r1, r3, #4
 80070d2:	6029      	str	r1, [r5, #0]
 80070d4:	0601      	lsls	r1, r0, #24
 80070d6:	d501      	bpl.n	80070dc <_printf_i+0xec>
 80070d8:	681e      	ldr	r6, [r3, #0]
 80070da:	e002      	b.n	80070e2 <_printf_i+0xf2>
 80070dc:	0646      	lsls	r6, r0, #25
 80070de:	d5fb      	bpl.n	80070d8 <_printf_i+0xe8>
 80070e0:	881e      	ldrh	r6, [r3, #0]
 80070e2:	4854      	ldr	r0, [pc, #336]	; (8007234 <_printf_i+0x244>)
 80070e4:	2f6f      	cmp	r7, #111	; 0x6f
 80070e6:	bf0c      	ite	eq
 80070e8:	2308      	moveq	r3, #8
 80070ea:	230a      	movne	r3, #10
 80070ec:	2100      	movs	r1, #0
 80070ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070f2:	6865      	ldr	r5, [r4, #4]
 80070f4:	60a5      	str	r5, [r4, #8]
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	bfa2      	ittt	ge
 80070fa:	6821      	ldrge	r1, [r4, #0]
 80070fc:	f021 0104 	bicge.w	r1, r1, #4
 8007100:	6021      	strge	r1, [r4, #0]
 8007102:	b90e      	cbnz	r6, 8007108 <_printf_i+0x118>
 8007104:	2d00      	cmp	r5, #0
 8007106:	d04d      	beq.n	80071a4 <_printf_i+0x1b4>
 8007108:	4615      	mov	r5, r2
 800710a:	fbb6 f1f3 	udiv	r1, r6, r3
 800710e:	fb03 6711 	mls	r7, r3, r1, r6
 8007112:	5dc7      	ldrb	r7, [r0, r7]
 8007114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007118:	4637      	mov	r7, r6
 800711a:	42bb      	cmp	r3, r7
 800711c:	460e      	mov	r6, r1
 800711e:	d9f4      	bls.n	800710a <_printf_i+0x11a>
 8007120:	2b08      	cmp	r3, #8
 8007122:	d10b      	bne.n	800713c <_printf_i+0x14c>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	07de      	lsls	r6, r3, #31
 8007128:	d508      	bpl.n	800713c <_printf_i+0x14c>
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	6861      	ldr	r1, [r4, #4]
 800712e:	4299      	cmp	r1, r3
 8007130:	bfde      	ittt	le
 8007132:	2330      	movle	r3, #48	; 0x30
 8007134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007138:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800713c:	1b52      	subs	r2, r2, r5
 800713e:	6122      	str	r2, [r4, #16]
 8007140:	f8cd a000 	str.w	sl, [sp]
 8007144:	464b      	mov	r3, r9
 8007146:	aa03      	add	r2, sp, #12
 8007148:	4621      	mov	r1, r4
 800714a:	4640      	mov	r0, r8
 800714c:	f7ff fee2 	bl	8006f14 <_printf_common>
 8007150:	3001      	adds	r0, #1
 8007152:	d14c      	bne.n	80071ee <_printf_i+0x1fe>
 8007154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007158:	b004      	add	sp, #16
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	4835      	ldr	r0, [pc, #212]	; (8007234 <_printf_i+0x244>)
 8007160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007164:	6829      	ldr	r1, [r5, #0]
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	f851 6b04 	ldr.w	r6, [r1], #4
 800716c:	6029      	str	r1, [r5, #0]
 800716e:	061d      	lsls	r5, r3, #24
 8007170:	d514      	bpl.n	800719c <_printf_i+0x1ac>
 8007172:	07df      	lsls	r7, r3, #31
 8007174:	bf44      	itt	mi
 8007176:	f043 0320 	orrmi.w	r3, r3, #32
 800717a:	6023      	strmi	r3, [r4, #0]
 800717c:	b91e      	cbnz	r6, 8007186 <_printf_i+0x196>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f023 0320 	bic.w	r3, r3, #32
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	2310      	movs	r3, #16
 8007188:	e7b0      	b.n	80070ec <_printf_i+0xfc>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	f043 0320 	orr.w	r3, r3, #32
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	2378      	movs	r3, #120	; 0x78
 8007194:	4828      	ldr	r0, [pc, #160]	; (8007238 <_printf_i+0x248>)
 8007196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800719a:	e7e3      	b.n	8007164 <_printf_i+0x174>
 800719c:	0659      	lsls	r1, r3, #25
 800719e:	bf48      	it	mi
 80071a0:	b2b6      	uxthmi	r6, r6
 80071a2:	e7e6      	b.n	8007172 <_printf_i+0x182>
 80071a4:	4615      	mov	r5, r2
 80071a6:	e7bb      	b.n	8007120 <_printf_i+0x130>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	6826      	ldr	r6, [r4, #0]
 80071ac:	6961      	ldr	r1, [r4, #20]
 80071ae:	1d18      	adds	r0, r3, #4
 80071b0:	6028      	str	r0, [r5, #0]
 80071b2:	0635      	lsls	r5, r6, #24
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	d501      	bpl.n	80071bc <_printf_i+0x1cc>
 80071b8:	6019      	str	r1, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <_printf_i+0x1d2>
 80071bc:	0670      	lsls	r0, r6, #25
 80071be:	d5fb      	bpl.n	80071b8 <_printf_i+0x1c8>
 80071c0:	8019      	strh	r1, [r3, #0]
 80071c2:	2300      	movs	r3, #0
 80071c4:	6123      	str	r3, [r4, #16]
 80071c6:	4615      	mov	r5, r2
 80071c8:	e7ba      	b.n	8007140 <_printf_i+0x150>
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	1d1a      	adds	r2, r3, #4
 80071ce:	602a      	str	r2, [r5, #0]
 80071d0:	681d      	ldr	r5, [r3, #0]
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	2100      	movs	r1, #0
 80071d6:	4628      	mov	r0, r5
 80071d8:	f7f9 f802 	bl	80001e0 <memchr>
 80071dc:	b108      	cbz	r0, 80071e2 <_printf_i+0x1f2>
 80071de:	1b40      	subs	r0, r0, r5
 80071e0:	6060      	str	r0, [r4, #4]
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	2300      	movs	r3, #0
 80071e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ec:	e7a8      	b.n	8007140 <_printf_i+0x150>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	462a      	mov	r2, r5
 80071f2:	4649      	mov	r1, r9
 80071f4:	4640      	mov	r0, r8
 80071f6:	47d0      	blx	sl
 80071f8:	3001      	adds	r0, #1
 80071fa:	d0ab      	beq.n	8007154 <_printf_i+0x164>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	079b      	lsls	r3, r3, #30
 8007200:	d413      	bmi.n	800722a <_printf_i+0x23a>
 8007202:	68e0      	ldr	r0, [r4, #12]
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	4298      	cmp	r0, r3
 8007208:	bfb8      	it	lt
 800720a:	4618      	movlt	r0, r3
 800720c:	e7a4      	b.n	8007158 <_printf_i+0x168>
 800720e:	2301      	movs	r3, #1
 8007210:	4632      	mov	r2, r6
 8007212:	4649      	mov	r1, r9
 8007214:	4640      	mov	r0, r8
 8007216:	47d0      	blx	sl
 8007218:	3001      	adds	r0, #1
 800721a:	d09b      	beq.n	8007154 <_printf_i+0x164>
 800721c:	3501      	adds	r5, #1
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	9903      	ldr	r1, [sp, #12]
 8007222:	1a5b      	subs	r3, r3, r1
 8007224:	42ab      	cmp	r3, r5
 8007226:	dcf2      	bgt.n	800720e <_printf_i+0x21e>
 8007228:	e7eb      	b.n	8007202 <_printf_i+0x212>
 800722a:	2500      	movs	r5, #0
 800722c:	f104 0619 	add.w	r6, r4, #25
 8007230:	e7f5      	b.n	800721e <_printf_i+0x22e>
 8007232:	bf00      	nop
 8007234:	0800937e 	.word	0x0800937e
 8007238:	0800938f 	.word	0x0800938f

0800723c <_puts_r>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	460e      	mov	r6, r1
 8007240:	4605      	mov	r5, r0
 8007242:	b118      	cbz	r0, 800724c <_puts_r+0x10>
 8007244:	6983      	ldr	r3, [r0, #24]
 8007246:	b90b      	cbnz	r3, 800724c <_puts_r+0x10>
 8007248:	f7ff fa1e 	bl	8006688 <__sinit>
 800724c:	69ab      	ldr	r3, [r5, #24]
 800724e:	68ac      	ldr	r4, [r5, #8]
 8007250:	b913      	cbnz	r3, 8007258 <_puts_r+0x1c>
 8007252:	4628      	mov	r0, r5
 8007254:	f7ff fa18 	bl	8006688 <__sinit>
 8007258:	4b2c      	ldr	r3, [pc, #176]	; (800730c <_puts_r+0xd0>)
 800725a:	429c      	cmp	r4, r3
 800725c:	d120      	bne.n	80072a0 <_puts_r+0x64>
 800725e:	686c      	ldr	r4, [r5, #4]
 8007260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d405      	bmi.n	8007272 <_puts_r+0x36>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	0598      	lsls	r0, r3, #22
 800726a:	d402      	bmi.n	8007272 <_puts_r+0x36>
 800726c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800726e:	f7ff face 	bl	800680e <__retarget_lock_acquire_recursive>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	0719      	lsls	r1, r3, #28
 8007276:	d51d      	bpl.n	80072b4 <_puts_r+0x78>
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	b1db      	cbz	r3, 80072b4 <_puts_r+0x78>
 800727c:	3e01      	subs	r6, #1
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007284:	3b01      	subs	r3, #1
 8007286:	60a3      	str	r3, [r4, #8]
 8007288:	bb39      	cbnz	r1, 80072da <_puts_r+0x9e>
 800728a:	2b00      	cmp	r3, #0
 800728c:	da38      	bge.n	8007300 <_puts_r+0xc4>
 800728e:	4622      	mov	r2, r4
 8007290:	210a      	movs	r1, #10
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f906 	bl	80074a4 <__swbuf_r>
 8007298:	3001      	adds	r0, #1
 800729a:	d011      	beq.n	80072c0 <_puts_r+0x84>
 800729c:	250a      	movs	r5, #10
 800729e:	e011      	b.n	80072c4 <_puts_r+0x88>
 80072a0:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <_puts_r+0xd4>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <_puts_r+0x6e>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e7da      	b.n	8007260 <_puts_r+0x24>
 80072aa:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <_puts_r+0xd8>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	e7d5      	b.n	8007260 <_puts_r+0x24>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 f958 	bl	800756c <__swsetup_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d0dd      	beq.n	800727c <_puts_r+0x40>
 80072c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80072c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c6:	07da      	lsls	r2, r3, #31
 80072c8:	d405      	bmi.n	80072d6 <_puts_r+0x9a>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	059b      	lsls	r3, r3, #22
 80072ce:	d402      	bmi.n	80072d6 <_puts_r+0x9a>
 80072d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d2:	f7ff fa9d 	bl	8006810 <__retarget_lock_release_recursive>
 80072d6:	4628      	mov	r0, r5
 80072d8:	bd70      	pop	{r4, r5, r6, pc}
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da04      	bge.n	80072e8 <_puts_r+0xac>
 80072de:	69a2      	ldr	r2, [r4, #24]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	dc06      	bgt.n	80072f2 <_puts_r+0xb6>
 80072e4:	290a      	cmp	r1, #10
 80072e6:	d004      	beq.n	80072f2 <_puts_r+0xb6>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	7019      	strb	r1, [r3, #0]
 80072f0:	e7c5      	b.n	800727e <_puts_r+0x42>
 80072f2:	4622      	mov	r2, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 f8d5 	bl	80074a4 <__swbuf_r>
 80072fa:	3001      	adds	r0, #1
 80072fc:	d1bf      	bne.n	800727e <_puts_r+0x42>
 80072fe:	e7df      	b.n	80072c0 <_puts_r+0x84>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	250a      	movs	r5, #10
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	6022      	str	r2, [r4, #0]
 8007308:	701d      	strb	r5, [r3, #0]
 800730a:	e7db      	b.n	80072c4 <_puts_r+0x88>
 800730c:	08009328 	.word	0x08009328
 8007310:	08009348 	.word	0x08009348
 8007314:	08009308 	.word	0x08009308

08007318 <puts>:
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <puts+0xc>)
 800731a:	4601      	mov	r1, r0
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	f7ff bf8d 	b.w	800723c <_puts_r>
 8007322:	bf00      	nop
 8007324:	20000010 	.word	0x20000010

08007328 <cleanup_glue>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	460c      	mov	r4, r1
 800732c:	6809      	ldr	r1, [r1, #0]
 800732e:	4605      	mov	r5, r0
 8007330:	b109      	cbz	r1, 8007336 <cleanup_glue+0xe>
 8007332:	f7ff fff9 	bl	8007328 <cleanup_glue>
 8007336:	4621      	mov	r1, r4
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800733e:	f001 bcf9 	b.w	8008d34 <_free_r>
	...

08007344 <_reclaim_reent>:
 8007344:	4b2c      	ldr	r3, [pc, #176]	; (80073f8 <_reclaim_reent+0xb4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4283      	cmp	r3, r0
 800734a:	b570      	push	{r4, r5, r6, lr}
 800734c:	4604      	mov	r4, r0
 800734e:	d051      	beq.n	80073f4 <_reclaim_reent+0xb0>
 8007350:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007352:	b143      	cbz	r3, 8007366 <_reclaim_reent+0x22>
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d14a      	bne.n	80073f0 <_reclaim_reent+0xac>
 800735a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	b111      	cbz	r1, 8007366 <_reclaim_reent+0x22>
 8007360:	4620      	mov	r0, r4
 8007362:	f001 fce7 	bl	8008d34 <_free_r>
 8007366:	6961      	ldr	r1, [r4, #20]
 8007368:	b111      	cbz	r1, 8007370 <_reclaim_reent+0x2c>
 800736a:	4620      	mov	r0, r4
 800736c:	f001 fce2 	bl	8008d34 <_free_r>
 8007370:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007372:	b111      	cbz	r1, 800737a <_reclaim_reent+0x36>
 8007374:	4620      	mov	r0, r4
 8007376:	f001 fcdd 	bl	8008d34 <_free_r>
 800737a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800737c:	b111      	cbz	r1, 8007384 <_reclaim_reent+0x40>
 800737e:	4620      	mov	r0, r4
 8007380:	f001 fcd8 	bl	8008d34 <_free_r>
 8007384:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007386:	b111      	cbz	r1, 800738e <_reclaim_reent+0x4a>
 8007388:	4620      	mov	r0, r4
 800738a:	f001 fcd3 	bl	8008d34 <_free_r>
 800738e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007390:	b111      	cbz	r1, 8007398 <_reclaim_reent+0x54>
 8007392:	4620      	mov	r0, r4
 8007394:	f001 fcce 	bl	8008d34 <_free_r>
 8007398:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800739a:	b111      	cbz	r1, 80073a2 <_reclaim_reent+0x5e>
 800739c:	4620      	mov	r0, r4
 800739e:	f001 fcc9 	bl	8008d34 <_free_r>
 80073a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80073a4:	b111      	cbz	r1, 80073ac <_reclaim_reent+0x68>
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 fcc4 	bl	8008d34 <_free_r>
 80073ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ae:	b111      	cbz	r1, 80073b6 <_reclaim_reent+0x72>
 80073b0:	4620      	mov	r0, r4
 80073b2:	f001 fcbf 	bl	8008d34 <_free_r>
 80073b6:	69a3      	ldr	r3, [r4, #24]
 80073b8:	b1e3      	cbz	r3, 80073f4 <_reclaim_reent+0xb0>
 80073ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073bc:	4620      	mov	r0, r4
 80073be:	4798      	blx	r3
 80073c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80073c2:	b1b9      	cbz	r1, 80073f4 <_reclaim_reent+0xb0>
 80073c4:	4620      	mov	r0, r4
 80073c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073ca:	f7ff bfad 	b.w	8007328 <cleanup_glue>
 80073ce:	5949      	ldr	r1, [r1, r5]
 80073d0:	b941      	cbnz	r1, 80073e4 <_reclaim_reent+0xa0>
 80073d2:	3504      	adds	r5, #4
 80073d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d6:	2d80      	cmp	r5, #128	; 0x80
 80073d8:	68d9      	ldr	r1, [r3, #12]
 80073da:	d1f8      	bne.n	80073ce <_reclaim_reent+0x8a>
 80073dc:	4620      	mov	r0, r4
 80073de:	f001 fca9 	bl	8008d34 <_free_r>
 80073e2:	e7ba      	b.n	800735a <_reclaim_reent+0x16>
 80073e4:	680e      	ldr	r6, [r1, #0]
 80073e6:	4620      	mov	r0, r4
 80073e8:	f001 fca4 	bl	8008d34 <_free_r>
 80073ec:	4631      	mov	r1, r6
 80073ee:	e7ef      	b.n	80073d0 <_reclaim_reent+0x8c>
 80073f0:	2500      	movs	r5, #0
 80073f2:	e7ef      	b.n	80073d4 <_reclaim_reent+0x90>
 80073f4:	bd70      	pop	{r4, r5, r6, pc}
 80073f6:	bf00      	nop
 80073f8:	20000010 	.word	0x20000010

080073fc <_sbrk_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d06      	ldr	r5, [pc, #24]	; (8007418 <_sbrk_r+0x1c>)
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	f7f9 fef2 	bl	80011f0 <_sbrk>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_sbrk_r+0x1a>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_sbrk_r+0x1a>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	20001cf4 	.word	0x20001cf4

0800741c <__sread>:
 800741c:	b510      	push	{r4, lr}
 800741e:	460c      	mov	r4, r1
 8007420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007424:	f001 fcd2 	bl	8008dcc <_read_r>
 8007428:	2800      	cmp	r0, #0
 800742a:	bfab      	itete	ge
 800742c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800742e:	89a3      	ldrhlt	r3, [r4, #12]
 8007430:	181b      	addge	r3, r3, r0
 8007432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007436:	bfac      	ite	ge
 8007438:	6563      	strge	r3, [r4, #84]	; 0x54
 800743a:	81a3      	strhlt	r3, [r4, #12]
 800743c:	bd10      	pop	{r4, pc}

0800743e <__swrite>:
 800743e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007442:	461f      	mov	r7, r3
 8007444:	898b      	ldrh	r3, [r1, #12]
 8007446:	05db      	lsls	r3, r3, #23
 8007448:	4605      	mov	r5, r0
 800744a:	460c      	mov	r4, r1
 800744c:	4616      	mov	r6, r2
 800744e:	d505      	bpl.n	800745c <__swrite+0x1e>
 8007450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007454:	2302      	movs	r3, #2
 8007456:	2200      	movs	r2, #0
 8007458:	f001 f846 	bl	80084e8 <_lseek_r>
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007466:	81a3      	strh	r3, [r4, #12]
 8007468:	4632      	mov	r2, r6
 800746a:	463b      	mov	r3, r7
 800746c:	4628      	mov	r0, r5
 800746e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007472:	f000 b869 	b.w	8007548 <_write_r>

08007476 <__sseek>:
 8007476:	b510      	push	{r4, lr}
 8007478:	460c      	mov	r4, r1
 800747a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747e:	f001 f833 	bl	80084e8 <_lseek_r>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	bf15      	itete	ne
 8007488:	6560      	strne	r0, [r4, #84]	; 0x54
 800748a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800748e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007492:	81a3      	strheq	r3, [r4, #12]
 8007494:	bf18      	it	ne
 8007496:	81a3      	strhne	r3, [r4, #12]
 8007498:	bd10      	pop	{r4, pc}

0800749a <__sclose>:
 800749a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749e:	f000 b8d3 	b.w	8007648 <_close_r>
	...

080074a4 <__swbuf_r>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	460e      	mov	r6, r1
 80074a8:	4614      	mov	r4, r2
 80074aa:	4605      	mov	r5, r0
 80074ac:	b118      	cbz	r0, 80074b6 <__swbuf_r+0x12>
 80074ae:	6983      	ldr	r3, [r0, #24]
 80074b0:	b90b      	cbnz	r3, 80074b6 <__swbuf_r+0x12>
 80074b2:	f7ff f8e9 	bl	8006688 <__sinit>
 80074b6:	4b21      	ldr	r3, [pc, #132]	; (800753c <__swbuf_r+0x98>)
 80074b8:	429c      	cmp	r4, r3
 80074ba:	d12b      	bne.n	8007514 <__swbuf_r+0x70>
 80074bc:	686c      	ldr	r4, [r5, #4]
 80074be:	69a3      	ldr	r3, [r4, #24]
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	071a      	lsls	r2, r3, #28
 80074c6:	d52f      	bpl.n	8007528 <__swbuf_r+0x84>
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	b36b      	cbz	r3, 8007528 <__swbuf_r+0x84>
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	6820      	ldr	r0, [r4, #0]
 80074d0:	1ac0      	subs	r0, r0, r3
 80074d2:	6963      	ldr	r3, [r4, #20]
 80074d4:	b2f6      	uxtb	r6, r6
 80074d6:	4283      	cmp	r3, r0
 80074d8:	4637      	mov	r7, r6
 80074da:	dc04      	bgt.n	80074e6 <__swbuf_r+0x42>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 ffc2 	bl	8008468 <_fflush_r>
 80074e4:	bb30      	cbnz	r0, 8007534 <__swbuf_r+0x90>
 80074e6:	68a3      	ldr	r3, [r4, #8]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	60a3      	str	r3, [r4, #8]
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	6022      	str	r2, [r4, #0]
 80074f2:	701e      	strb	r6, [r3, #0]
 80074f4:	6963      	ldr	r3, [r4, #20]
 80074f6:	3001      	adds	r0, #1
 80074f8:	4283      	cmp	r3, r0
 80074fa:	d004      	beq.n	8007506 <__swbuf_r+0x62>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	07db      	lsls	r3, r3, #31
 8007500:	d506      	bpl.n	8007510 <__swbuf_r+0x6c>
 8007502:	2e0a      	cmp	r6, #10
 8007504:	d104      	bne.n	8007510 <__swbuf_r+0x6c>
 8007506:	4621      	mov	r1, r4
 8007508:	4628      	mov	r0, r5
 800750a:	f000 ffad 	bl	8008468 <_fflush_r>
 800750e:	b988      	cbnz	r0, 8007534 <__swbuf_r+0x90>
 8007510:	4638      	mov	r0, r7
 8007512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <__swbuf_r+0x9c>)
 8007516:	429c      	cmp	r4, r3
 8007518:	d101      	bne.n	800751e <__swbuf_r+0x7a>
 800751a:	68ac      	ldr	r4, [r5, #8]
 800751c:	e7cf      	b.n	80074be <__swbuf_r+0x1a>
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <__swbuf_r+0xa0>)
 8007520:	429c      	cmp	r4, r3
 8007522:	bf08      	it	eq
 8007524:	68ec      	ldreq	r4, [r5, #12]
 8007526:	e7ca      	b.n	80074be <__swbuf_r+0x1a>
 8007528:	4621      	mov	r1, r4
 800752a:	4628      	mov	r0, r5
 800752c:	f000 f81e 	bl	800756c <__swsetup_r>
 8007530:	2800      	cmp	r0, #0
 8007532:	d0cb      	beq.n	80074cc <__swbuf_r+0x28>
 8007534:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007538:	e7ea      	b.n	8007510 <__swbuf_r+0x6c>
 800753a:	bf00      	nop
 800753c:	08009328 	.word	0x08009328
 8007540:	08009348 	.word	0x08009348
 8007544:	08009308 	.word	0x08009308

08007548 <_write_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	; (8007568 <_write_r+0x20>)
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7f9 fdf9 	bl	800114e <_write>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_write_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_write_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20001cf4 	.word	0x20001cf4

0800756c <__swsetup_r>:
 800756c:	4b32      	ldr	r3, [pc, #200]	; (8007638 <__swsetup_r+0xcc>)
 800756e:	b570      	push	{r4, r5, r6, lr}
 8007570:	681d      	ldr	r5, [r3, #0]
 8007572:	4606      	mov	r6, r0
 8007574:	460c      	mov	r4, r1
 8007576:	b125      	cbz	r5, 8007582 <__swsetup_r+0x16>
 8007578:	69ab      	ldr	r3, [r5, #24]
 800757a:	b913      	cbnz	r3, 8007582 <__swsetup_r+0x16>
 800757c:	4628      	mov	r0, r5
 800757e:	f7ff f883 	bl	8006688 <__sinit>
 8007582:	4b2e      	ldr	r3, [pc, #184]	; (800763c <__swsetup_r+0xd0>)
 8007584:	429c      	cmp	r4, r3
 8007586:	d10f      	bne.n	80075a8 <__swsetup_r+0x3c>
 8007588:	686c      	ldr	r4, [r5, #4]
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007590:	0719      	lsls	r1, r3, #28
 8007592:	d42c      	bmi.n	80075ee <__swsetup_r+0x82>
 8007594:	06dd      	lsls	r5, r3, #27
 8007596:	d411      	bmi.n	80075bc <__swsetup_r+0x50>
 8007598:	2309      	movs	r3, #9
 800759a:	6033      	str	r3, [r6, #0]
 800759c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a6:	e03e      	b.n	8007626 <__swsetup_r+0xba>
 80075a8:	4b25      	ldr	r3, [pc, #148]	; (8007640 <__swsetup_r+0xd4>)
 80075aa:	429c      	cmp	r4, r3
 80075ac:	d101      	bne.n	80075b2 <__swsetup_r+0x46>
 80075ae:	68ac      	ldr	r4, [r5, #8]
 80075b0:	e7eb      	b.n	800758a <__swsetup_r+0x1e>
 80075b2:	4b24      	ldr	r3, [pc, #144]	; (8007644 <__swsetup_r+0xd8>)
 80075b4:	429c      	cmp	r4, r3
 80075b6:	bf08      	it	eq
 80075b8:	68ec      	ldreq	r4, [r5, #12]
 80075ba:	e7e6      	b.n	800758a <__swsetup_r+0x1e>
 80075bc:	0758      	lsls	r0, r3, #29
 80075be:	d512      	bpl.n	80075e6 <__swsetup_r+0x7a>
 80075c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075c2:	b141      	cbz	r1, 80075d6 <__swsetup_r+0x6a>
 80075c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075c8:	4299      	cmp	r1, r3
 80075ca:	d002      	beq.n	80075d2 <__swsetup_r+0x66>
 80075cc:	4630      	mov	r0, r6
 80075ce:	f001 fbb1 	bl	8008d34 <_free_r>
 80075d2:	2300      	movs	r3, #0
 80075d4:	6363      	str	r3, [r4, #52]	; 0x34
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	2300      	movs	r3, #0
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	f043 0308 	orr.w	r3, r3, #8
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	b94b      	cbnz	r3, 8007606 <__swsetup_r+0x9a>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fc:	d003      	beq.n	8007606 <__swsetup_r+0x9a>
 80075fe:	4621      	mov	r1, r4
 8007600:	4630      	mov	r0, r6
 8007602:	f000 ffa9 	bl	8008558 <__smakebuf_r>
 8007606:	89a0      	ldrh	r0, [r4, #12]
 8007608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800760c:	f010 0301 	ands.w	r3, r0, #1
 8007610:	d00a      	beq.n	8007628 <__swsetup_r+0xbc>
 8007612:	2300      	movs	r3, #0
 8007614:	60a3      	str	r3, [r4, #8]
 8007616:	6963      	ldr	r3, [r4, #20]
 8007618:	425b      	negs	r3, r3
 800761a:	61a3      	str	r3, [r4, #24]
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	b943      	cbnz	r3, 8007632 <__swsetup_r+0xc6>
 8007620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007624:	d1ba      	bne.n	800759c <__swsetup_r+0x30>
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	0781      	lsls	r1, r0, #30
 800762a:	bf58      	it	pl
 800762c:	6963      	ldrpl	r3, [r4, #20]
 800762e:	60a3      	str	r3, [r4, #8]
 8007630:	e7f4      	b.n	800761c <__swsetup_r+0xb0>
 8007632:	2000      	movs	r0, #0
 8007634:	e7f7      	b.n	8007626 <__swsetup_r+0xba>
 8007636:	bf00      	nop
 8007638:	20000010 	.word	0x20000010
 800763c:	08009328 	.word	0x08009328
 8007640:	08009348 	.word	0x08009348
 8007644:	08009308 	.word	0x08009308

08007648 <_close_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d06      	ldr	r5, [pc, #24]	; (8007664 <_close_r+0x1c>)
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	f7f9 fd97 	bl	8001186 <_close>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d102      	bne.n	8007662 <_close_r+0x1a>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	b103      	cbz	r3, 8007662 <_close_r+0x1a>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	20001cf4 	.word	0x20001cf4

08007668 <quorem>:
 8007668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	6903      	ldr	r3, [r0, #16]
 800766e:	690c      	ldr	r4, [r1, #16]
 8007670:	42a3      	cmp	r3, r4
 8007672:	4607      	mov	r7, r0
 8007674:	f2c0 8081 	blt.w	800777a <quorem+0x112>
 8007678:	3c01      	subs	r4, #1
 800767a:	f101 0814 	add.w	r8, r1, #20
 800767e:	f100 0514 	add.w	r5, r0, #20
 8007682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800768c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007690:	3301      	adds	r3, #1
 8007692:	429a      	cmp	r2, r3
 8007694:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800769c:	fbb2 f6f3 	udiv	r6, r2, r3
 80076a0:	d331      	bcc.n	8007706 <quorem+0x9e>
 80076a2:	f04f 0e00 	mov.w	lr, #0
 80076a6:	4640      	mov	r0, r8
 80076a8:	46ac      	mov	ip, r5
 80076aa:	46f2      	mov	sl, lr
 80076ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80076b0:	b293      	uxth	r3, r2
 80076b2:	fb06 e303 	mla	r3, r6, r3, lr
 80076b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	ebaa 0303 	sub.w	r3, sl, r3
 80076c0:	f8dc a000 	ldr.w	sl, [ip]
 80076c4:	0c12      	lsrs	r2, r2, #16
 80076c6:	fa13 f38a 	uxtah	r3, r3, sl
 80076ca:	fb06 e202 	mla	r2, r6, r2, lr
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076d6:	b292      	uxth	r2, r2
 80076d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80076e4:	4581      	cmp	r9, r0
 80076e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ea:	f84c 3b04 	str.w	r3, [ip], #4
 80076ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076f2:	d2db      	bcs.n	80076ac <quorem+0x44>
 80076f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80076f8:	b92b      	cbnz	r3, 8007706 <quorem+0x9e>
 80076fa:	9b01      	ldr	r3, [sp, #4]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	429d      	cmp	r5, r3
 8007700:	461a      	mov	r2, r3
 8007702:	d32e      	bcc.n	8007762 <quorem+0xfa>
 8007704:	613c      	str	r4, [r7, #16]
 8007706:	4638      	mov	r0, r7
 8007708:	f001 f9fc 	bl	8008b04 <__mcmp>
 800770c:	2800      	cmp	r0, #0
 800770e:	db24      	blt.n	800775a <quorem+0xf2>
 8007710:	3601      	adds	r6, #1
 8007712:	4628      	mov	r0, r5
 8007714:	f04f 0c00 	mov.w	ip, #0
 8007718:	f858 2b04 	ldr.w	r2, [r8], #4
 800771c:	f8d0 e000 	ldr.w	lr, [r0]
 8007720:	b293      	uxth	r3, r2
 8007722:	ebac 0303 	sub.w	r3, ip, r3
 8007726:	0c12      	lsrs	r2, r2, #16
 8007728:	fa13 f38e 	uxtah	r3, r3, lr
 800772c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007734:	b29b      	uxth	r3, r3
 8007736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800773a:	45c1      	cmp	r9, r8
 800773c:	f840 3b04 	str.w	r3, [r0], #4
 8007740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007744:	d2e8      	bcs.n	8007718 <quorem+0xb0>
 8007746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800774a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800774e:	b922      	cbnz	r2, 800775a <quorem+0xf2>
 8007750:	3b04      	subs	r3, #4
 8007752:	429d      	cmp	r5, r3
 8007754:	461a      	mov	r2, r3
 8007756:	d30a      	bcc.n	800776e <quorem+0x106>
 8007758:	613c      	str	r4, [r7, #16]
 800775a:	4630      	mov	r0, r6
 800775c:	b003      	add	sp, #12
 800775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	3b04      	subs	r3, #4
 8007766:	2a00      	cmp	r2, #0
 8007768:	d1cc      	bne.n	8007704 <quorem+0x9c>
 800776a:	3c01      	subs	r4, #1
 800776c:	e7c7      	b.n	80076fe <quorem+0x96>
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	3b04      	subs	r3, #4
 8007772:	2a00      	cmp	r2, #0
 8007774:	d1f0      	bne.n	8007758 <quorem+0xf0>
 8007776:	3c01      	subs	r4, #1
 8007778:	e7eb      	b.n	8007752 <quorem+0xea>
 800777a:	2000      	movs	r0, #0
 800777c:	e7ee      	b.n	800775c <quorem+0xf4>
	...

08007780 <_dtoa_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	ed2d 8b04 	vpush	{d8-d9}
 8007788:	ec57 6b10 	vmov	r6, r7, d0
 800778c:	b093      	sub	sp, #76	; 0x4c
 800778e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007794:	9106      	str	r1, [sp, #24]
 8007796:	ee10 aa10 	vmov	sl, s0
 800779a:	4604      	mov	r4, r0
 800779c:	9209      	str	r2, [sp, #36]	; 0x24
 800779e:	930c      	str	r3, [sp, #48]	; 0x30
 80077a0:	46bb      	mov	fp, r7
 80077a2:	b975      	cbnz	r5, 80077c2 <_dtoa_r+0x42>
 80077a4:	2010      	movs	r0, #16
 80077a6:	f000 ff17 	bl	80085d8 <malloc>
 80077aa:	4602      	mov	r2, r0
 80077ac:	6260      	str	r0, [r4, #36]	; 0x24
 80077ae:	b920      	cbnz	r0, 80077ba <_dtoa_r+0x3a>
 80077b0:	4ba7      	ldr	r3, [pc, #668]	; (8007a50 <_dtoa_r+0x2d0>)
 80077b2:	21ea      	movs	r1, #234	; 0xea
 80077b4:	48a7      	ldr	r0, [pc, #668]	; (8007a54 <_dtoa_r+0x2d4>)
 80077b6:	f001 fb1b 	bl	8008df0 <__assert_func>
 80077ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077be:	6005      	str	r5, [r0, #0]
 80077c0:	60c5      	str	r5, [r0, #12]
 80077c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c4:	6819      	ldr	r1, [r3, #0]
 80077c6:	b151      	cbz	r1, 80077de <_dtoa_r+0x5e>
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	604a      	str	r2, [r1, #4]
 80077cc:	2301      	movs	r3, #1
 80077ce:	4093      	lsls	r3, r2
 80077d0:	608b      	str	r3, [r1, #8]
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 ff54 	bl	8008680 <_Bfree>
 80077d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	1e3b      	subs	r3, r7, #0
 80077e0:	bfaa      	itet	ge
 80077e2:	2300      	movge	r3, #0
 80077e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077e8:	f8c8 3000 	strge.w	r3, [r8]
 80077ec:	4b9a      	ldr	r3, [pc, #616]	; (8007a58 <_dtoa_r+0x2d8>)
 80077ee:	bfbc      	itt	lt
 80077f0:	2201      	movlt	r2, #1
 80077f2:	f8c8 2000 	strlt.w	r2, [r8]
 80077f6:	ea33 030b 	bics.w	r3, r3, fp
 80077fa:	d11b      	bne.n	8007834 <_dtoa_r+0xb4>
 80077fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007808:	4333      	orrs	r3, r6
 800780a:	f000 8592 	beq.w	8008332 <_dtoa_r+0xbb2>
 800780e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007810:	b963      	cbnz	r3, 800782c <_dtoa_r+0xac>
 8007812:	4b92      	ldr	r3, [pc, #584]	; (8007a5c <_dtoa_r+0x2dc>)
 8007814:	e022      	b.n	800785c <_dtoa_r+0xdc>
 8007816:	4b92      	ldr	r3, [pc, #584]	; (8007a60 <_dtoa_r+0x2e0>)
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	3308      	adds	r3, #8
 800781c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	9801      	ldr	r0, [sp, #4]
 8007822:	b013      	add	sp, #76	; 0x4c
 8007824:	ecbd 8b04 	vpop	{d8-d9}
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	4b8b      	ldr	r3, [pc, #556]	; (8007a5c <_dtoa_r+0x2dc>)
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	3303      	adds	r3, #3
 8007832:	e7f3      	b.n	800781c <_dtoa_r+0x9c>
 8007834:	2200      	movs	r2, #0
 8007836:	2300      	movs	r3, #0
 8007838:	4650      	mov	r0, sl
 800783a:	4659      	mov	r1, fp
 800783c:	f7f9 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8007840:	ec4b ab19 	vmov	d9, sl, fp
 8007844:	4680      	mov	r8, r0
 8007846:	b158      	cbz	r0, 8007860 <_dtoa_r+0xe0>
 8007848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800784a:	2301      	movs	r3, #1
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 856b 	beq.w	800832c <_dtoa_r+0xbac>
 8007856:	4883      	ldr	r0, [pc, #524]	; (8007a64 <_dtoa_r+0x2e4>)
 8007858:	6018      	str	r0, [r3, #0]
 800785a:	1e43      	subs	r3, r0, #1
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	e7df      	b.n	8007820 <_dtoa_r+0xa0>
 8007860:	ec4b ab10 	vmov	d0, sl, fp
 8007864:	aa10      	add	r2, sp, #64	; 0x40
 8007866:	a911      	add	r1, sp, #68	; 0x44
 8007868:	4620      	mov	r0, r4
 800786a:	f001 f9f1 	bl	8008c50 <__d2b>
 800786e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007872:	ee08 0a10 	vmov	s16, r0
 8007876:	2d00      	cmp	r5, #0
 8007878:	f000 8084 	beq.w	8007984 <_dtoa_r+0x204>
 800787c:	ee19 3a90 	vmov	r3, s19
 8007880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007884:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007888:	4656      	mov	r6, sl
 800788a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800788e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007892:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007896:	4b74      	ldr	r3, [pc, #464]	; (8007a68 <_dtoa_r+0x2e8>)
 8007898:	2200      	movs	r2, #0
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7f8 fcf3 	bl	8000288 <__aeabi_dsub>
 80078a2:	a365      	add	r3, pc, #404	; (adr r3, 8007a38 <_dtoa_r+0x2b8>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fea6 	bl	80005f8 <__aeabi_dmul>
 80078ac:	a364      	add	r3, pc, #400	; (adr r3, 8007a40 <_dtoa_r+0x2c0>)
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f7f8 fceb 	bl	800028c <__adddf3>
 80078b6:	4606      	mov	r6, r0
 80078b8:	4628      	mov	r0, r5
 80078ba:	460f      	mov	r7, r1
 80078bc:	f7f8 fe32 	bl	8000524 <__aeabi_i2d>
 80078c0:	a361      	add	r3, pc, #388	; (adr r3, 8007a48 <_dtoa_r+0x2c8>)
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f7f8 fe97 	bl	80005f8 <__aeabi_dmul>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4630      	mov	r0, r6
 80078d0:	4639      	mov	r1, r7
 80078d2:	f7f8 fcdb 	bl	800028c <__adddf3>
 80078d6:	4606      	mov	r6, r0
 80078d8:	460f      	mov	r7, r1
 80078da:	f7f9 f93d 	bl	8000b58 <__aeabi_d2iz>
 80078de:	2200      	movs	r2, #0
 80078e0:	9000      	str	r0, [sp, #0]
 80078e2:	2300      	movs	r3, #0
 80078e4:	4630      	mov	r0, r6
 80078e6:	4639      	mov	r1, r7
 80078e8:	f7f9 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80078ec:	b150      	cbz	r0, 8007904 <_dtoa_r+0x184>
 80078ee:	9800      	ldr	r0, [sp, #0]
 80078f0:	f7f8 fe18 	bl	8000524 <__aeabi_i2d>
 80078f4:	4632      	mov	r2, r6
 80078f6:	463b      	mov	r3, r7
 80078f8:	f7f9 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80078fc:	b910      	cbnz	r0, 8007904 <_dtoa_r+0x184>
 80078fe:	9b00      	ldr	r3, [sp, #0]
 8007900:	3b01      	subs	r3, #1
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	9b00      	ldr	r3, [sp, #0]
 8007906:	2b16      	cmp	r3, #22
 8007908:	d85a      	bhi.n	80079c0 <_dtoa_r+0x240>
 800790a:	9a00      	ldr	r2, [sp, #0]
 800790c:	4b57      	ldr	r3, [pc, #348]	; (8007a6c <_dtoa_r+0x2ec>)
 800790e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	ec51 0b19 	vmov	r0, r1, d9
 800791a:	f7f9 f8df 	bl	8000adc <__aeabi_dcmplt>
 800791e:	2800      	cmp	r0, #0
 8007920:	d050      	beq.n	80079c4 <_dtoa_r+0x244>
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	2300      	movs	r3, #0
 800792a:	930b      	str	r3, [sp, #44]	; 0x2c
 800792c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800792e:	1b5d      	subs	r5, r3, r5
 8007930:	1e6b      	subs	r3, r5, #1
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	bf45      	ittet	mi
 8007936:	f1c5 0301 	rsbmi	r3, r5, #1
 800793a:	9304      	strmi	r3, [sp, #16]
 800793c:	2300      	movpl	r3, #0
 800793e:	2300      	movmi	r3, #0
 8007940:	bf4c      	ite	mi
 8007942:	9305      	strmi	r3, [sp, #20]
 8007944:	9304      	strpl	r3, [sp, #16]
 8007946:	9b00      	ldr	r3, [sp, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	db3d      	blt.n	80079c8 <_dtoa_r+0x248>
 800794c:	9b05      	ldr	r3, [sp, #20]
 800794e:	9a00      	ldr	r2, [sp, #0]
 8007950:	920a      	str	r2, [sp, #40]	; 0x28
 8007952:	4413      	add	r3, r2
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	2300      	movs	r3, #0
 8007958:	9307      	str	r3, [sp, #28]
 800795a:	9b06      	ldr	r3, [sp, #24]
 800795c:	2b09      	cmp	r3, #9
 800795e:	f200 8089 	bhi.w	8007a74 <_dtoa_r+0x2f4>
 8007962:	2b05      	cmp	r3, #5
 8007964:	bfc4      	itt	gt
 8007966:	3b04      	subgt	r3, #4
 8007968:	9306      	strgt	r3, [sp, #24]
 800796a:	9b06      	ldr	r3, [sp, #24]
 800796c:	f1a3 0302 	sub.w	r3, r3, #2
 8007970:	bfcc      	ite	gt
 8007972:	2500      	movgt	r5, #0
 8007974:	2501      	movle	r5, #1
 8007976:	2b03      	cmp	r3, #3
 8007978:	f200 8087 	bhi.w	8007a8a <_dtoa_r+0x30a>
 800797c:	e8df f003 	tbb	[pc, r3]
 8007980:	59383a2d 	.word	0x59383a2d
 8007984:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007988:	441d      	add	r5, r3
 800798a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800798e:	2b20      	cmp	r3, #32
 8007990:	bfc1      	itttt	gt
 8007992:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007996:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800799a:	fa0b f303 	lslgt.w	r3, fp, r3
 800799e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80079a2:	bfda      	itte	le
 80079a4:	f1c3 0320 	rsble	r3, r3, #32
 80079a8:	fa06 f003 	lslle.w	r0, r6, r3
 80079ac:	4318      	orrgt	r0, r3
 80079ae:	f7f8 fda9 	bl	8000504 <__aeabi_ui2d>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4606      	mov	r6, r0
 80079b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80079ba:	3d01      	subs	r5, #1
 80079bc:	930e      	str	r3, [sp, #56]	; 0x38
 80079be:	e76a      	b.n	8007896 <_dtoa_r+0x116>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e7b2      	b.n	800792a <_dtoa_r+0x1aa>
 80079c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80079c6:	e7b1      	b.n	800792c <_dtoa_r+0x1ac>
 80079c8:	9b04      	ldr	r3, [sp, #16]
 80079ca:	9a00      	ldr	r2, [sp, #0]
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	9304      	str	r3, [sp, #16]
 80079d0:	4253      	negs	r3, r2
 80079d2:	9307      	str	r3, [sp, #28]
 80079d4:	2300      	movs	r3, #0
 80079d6:	930a      	str	r3, [sp, #40]	; 0x28
 80079d8:	e7bf      	b.n	800795a <_dtoa_r+0x1da>
 80079da:	2300      	movs	r3, #0
 80079dc:	9308      	str	r3, [sp, #32]
 80079de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dc55      	bgt.n	8007a90 <_dtoa_r+0x310>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079ea:	461a      	mov	r2, r3
 80079ec:	9209      	str	r2, [sp, #36]	; 0x24
 80079ee:	e00c      	b.n	8007a0a <_dtoa_r+0x28a>
 80079f0:	2301      	movs	r3, #1
 80079f2:	e7f3      	b.n	80079dc <_dtoa_r+0x25c>
 80079f4:	2300      	movs	r3, #0
 80079f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f8:	9308      	str	r3, [sp, #32]
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	4413      	add	r3, r2
 80079fe:	9302      	str	r3, [sp, #8]
 8007a00:	3301      	adds	r3, #1
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	bfb8      	it	lt
 8007a08:	2301      	movlt	r3, #1
 8007a0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	6042      	str	r2, [r0, #4]
 8007a10:	2204      	movs	r2, #4
 8007a12:	f102 0614 	add.w	r6, r2, #20
 8007a16:	429e      	cmp	r6, r3
 8007a18:	6841      	ldr	r1, [r0, #4]
 8007a1a:	d93d      	bls.n	8007a98 <_dtoa_r+0x318>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fdef 	bl	8008600 <_Balloc>
 8007a22:	9001      	str	r0, [sp, #4]
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d13b      	bne.n	8007aa0 <_dtoa_r+0x320>
 8007a28:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <_dtoa_r+0x2f0>)
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a30:	e6c0      	b.n	80077b4 <_dtoa_r+0x34>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e7df      	b.n	80079f6 <_dtoa_r+0x276>
 8007a36:	bf00      	nop
 8007a38:	636f4361 	.word	0x636f4361
 8007a3c:	3fd287a7 	.word	0x3fd287a7
 8007a40:	8b60c8b3 	.word	0x8b60c8b3
 8007a44:	3fc68a28 	.word	0x3fc68a28
 8007a48:	509f79fb 	.word	0x509f79fb
 8007a4c:	3fd34413 	.word	0x3fd34413
 8007a50:	080093ad 	.word	0x080093ad
 8007a54:	080093c4 	.word	0x080093c4
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	080093a9 	.word	0x080093a9
 8007a60:	080093a0 	.word	0x080093a0
 8007a64:	0800937d 	.word	0x0800937d
 8007a68:	3ff80000 	.word	0x3ff80000
 8007a6c:	080094b8 	.word	0x080094b8
 8007a70:	0800941f 	.word	0x0800941f
 8007a74:	2501      	movs	r5, #1
 8007a76:	2300      	movs	r3, #0
 8007a78:	9306      	str	r3, [sp, #24]
 8007a7a:	9508      	str	r5, [sp, #32]
 8007a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	2312      	movs	r3, #18
 8007a88:	e7b0      	b.n	80079ec <_dtoa_r+0x26c>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	9308      	str	r3, [sp, #32]
 8007a8e:	e7f5      	b.n	8007a7c <_dtoa_r+0x2fc>
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a96:	e7b8      	b.n	8007a0a <_dtoa_r+0x28a>
 8007a98:	3101      	adds	r1, #1
 8007a9a:	6041      	str	r1, [r0, #4]
 8007a9c:	0052      	lsls	r2, r2, #1
 8007a9e:	e7b8      	b.n	8007a12 <_dtoa_r+0x292>
 8007aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa2:	9a01      	ldr	r2, [sp, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	2b0e      	cmp	r3, #14
 8007aaa:	f200 809d 	bhi.w	8007be8 <_dtoa_r+0x468>
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	f000 809a 	beq.w	8007be8 <_dtoa_r+0x468>
 8007ab4:	9b00      	ldr	r3, [sp, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dd32      	ble.n	8007b20 <_dtoa_r+0x3a0>
 8007aba:	4ab7      	ldr	r2, [pc, #732]	; (8007d98 <_dtoa_r+0x618>)
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ac8:	9b00      	ldr	r3, [sp, #0]
 8007aca:	05d8      	lsls	r0, r3, #23
 8007acc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ad0:	d516      	bpl.n	8007b00 <_dtoa_r+0x380>
 8007ad2:	4bb2      	ldr	r3, [pc, #712]	; (8007d9c <_dtoa_r+0x61c>)
 8007ad4:	ec51 0b19 	vmov	r0, r1, d9
 8007ad8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007adc:	f7f8 feb6 	bl	800084c <__aeabi_ddiv>
 8007ae0:	f007 070f 	and.w	r7, r7, #15
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	468b      	mov	fp, r1
 8007ae8:	2503      	movs	r5, #3
 8007aea:	4eac      	ldr	r6, [pc, #688]	; (8007d9c <_dtoa_r+0x61c>)
 8007aec:	b957      	cbnz	r7, 8007b04 <_dtoa_r+0x384>
 8007aee:	4642      	mov	r2, r8
 8007af0:	464b      	mov	r3, r9
 8007af2:	4650      	mov	r0, sl
 8007af4:	4659      	mov	r1, fp
 8007af6:	f7f8 fea9 	bl	800084c <__aeabi_ddiv>
 8007afa:	4682      	mov	sl, r0
 8007afc:	468b      	mov	fp, r1
 8007afe:	e028      	b.n	8007b52 <_dtoa_r+0x3d2>
 8007b00:	2502      	movs	r5, #2
 8007b02:	e7f2      	b.n	8007aea <_dtoa_r+0x36a>
 8007b04:	07f9      	lsls	r1, r7, #31
 8007b06:	d508      	bpl.n	8007b1a <_dtoa_r+0x39a>
 8007b08:	4640      	mov	r0, r8
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b10:	f7f8 fd72 	bl	80005f8 <__aeabi_dmul>
 8007b14:	3501      	adds	r5, #1
 8007b16:	4680      	mov	r8, r0
 8007b18:	4689      	mov	r9, r1
 8007b1a:	107f      	asrs	r7, r7, #1
 8007b1c:	3608      	adds	r6, #8
 8007b1e:	e7e5      	b.n	8007aec <_dtoa_r+0x36c>
 8007b20:	f000 809b 	beq.w	8007c5a <_dtoa_r+0x4da>
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	4f9d      	ldr	r7, [pc, #628]	; (8007d9c <_dtoa_r+0x61c>)
 8007b28:	425e      	negs	r6, r3
 8007b2a:	4b9b      	ldr	r3, [pc, #620]	; (8007d98 <_dtoa_r+0x618>)
 8007b2c:	f006 020f 	and.w	r2, r6, #15
 8007b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	ec51 0b19 	vmov	r0, r1, d9
 8007b3c:	f7f8 fd5c 	bl	80005f8 <__aeabi_dmul>
 8007b40:	1136      	asrs	r6, r6, #4
 8007b42:	4682      	mov	sl, r0
 8007b44:	468b      	mov	fp, r1
 8007b46:	2300      	movs	r3, #0
 8007b48:	2502      	movs	r5, #2
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	d17a      	bne.n	8007c44 <_dtoa_r+0x4c4>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1d3      	bne.n	8007afa <_dtoa_r+0x37a>
 8007b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8082 	beq.w	8007c5e <_dtoa_r+0x4de>
 8007b5a:	4b91      	ldr	r3, [pc, #580]	; (8007da0 <_dtoa_r+0x620>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4650      	mov	r0, sl
 8007b60:	4659      	mov	r1, fp
 8007b62:	f7f8 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d079      	beq.n	8007c5e <_dtoa_r+0x4de>
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d076      	beq.n	8007c5e <_dtoa_r+0x4de>
 8007b70:	9b02      	ldr	r3, [sp, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd36      	ble.n	8007be4 <_dtoa_r+0x464>
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	4650      	mov	r0, sl
 8007b7a:	4659      	mov	r1, fp
 8007b7c:	1e5f      	subs	r7, r3, #1
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4b88      	ldr	r3, [pc, #544]	; (8007da4 <_dtoa_r+0x624>)
 8007b82:	f7f8 fd39 	bl	80005f8 <__aeabi_dmul>
 8007b86:	9e02      	ldr	r6, [sp, #8]
 8007b88:	4682      	mov	sl, r0
 8007b8a:	468b      	mov	fp, r1
 8007b8c:	3501      	adds	r5, #1
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f7f8 fcc8 	bl	8000524 <__aeabi_i2d>
 8007b94:	4652      	mov	r2, sl
 8007b96:	465b      	mov	r3, fp
 8007b98:	f7f8 fd2e 	bl	80005f8 <__aeabi_dmul>
 8007b9c:	4b82      	ldr	r3, [pc, #520]	; (8007da8 <_dtoa_r+0x628>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f7f8 fb74 	bl	800028c <__adddf3>
 8007ba4:	46d0      	mov	r8, sl
 8007ba6:	46d9      	mov	r9, fp
 8007ba8:	4682      	mov	sl, r0
 8007baa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d158      	bne.n	8007c64 <_dtoa_r+0x4e4>
 8007bb2:	4b7e      	ldr	r3, [pc, #504]	; (8007dac <_dtoa_r+0x62c>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4649      	mov	r1, r9
 8007bba:	f7f8 fb65 	bl	8000288 <__aeabi_dsub>
 8007bbe:	4652      	mov	r2, sl
 8007bc0:	465b      	mov	r3, fp
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	4689      	mov	r9, r1
 8007bc6:	f7f8 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f040 8295 	bne.w	80080fa <_dtoa_r+0x97a>
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f040 8289 	bne.w	80080f6 <_dtoa_r+0x976>
 8007be4:	ec5b ab19 	vmov	sl, fp, d9
 8007be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f2c0 8148 	blt.w	8007e80 <_dtoa_r+0x700>
 8007bf0:	9a00      	ldr	r2, [sp, #0]
 8007bf2:	2a0e      	cmp	r2, #14
 8007bf4:	f300 8144 	bgt.w	8007e80 <_dtoa_r+0x700>
 8007bf8:	4b67      	ldr	r3, [pc, #412]	; (8007d98 <_dtoa_r+0x618>)
 8007bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f280 80d5 	bge.w	8007db4 <_dtoa_r+0x634>
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f300 80d1 	bgt.w	8007db4 <_dtoa_r+0x634>
 8007c12:	f040 826f 	bne.w	80080f4 <_dtoa_r+0x974>
 8007c16:	4b65      	ldr	r3, [pc, #404]	; (8007dac <_dtoa_r+0x62c>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fceb 	bl	80005f8 <__aeabi_dmul>
 8007c22:	4652      	mov	r2, sl
 8007c24:	465b      	mov	r3, fp
 8007c26:	f7f8 ff6d 	bl	8000b04 <__aeabi_dcmpge>
 8007c2a:	9e03      	ldr	r6, [sp, #12]
 8007c2c:	4637      	mov	r7, r6
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f040 8245 	bne.w	80080be <_dtoa_r+0x93e>
 8007c34:	9d01      	ldr	r5, [sp, #4]
 8007c36:	2331      	movs	r3, #49	; 0x31
 8007c38:	f805 3b01 	strb.w	r3, [r5], #1
 8007c3c:	9b00      	ldr	r3, [sp, #0]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	e240      	b.n	80080c6 <_dtoa_r+0x946>
 8007c44:	07f2      	lsls	r2, r6, #31
 8007c46:	d505      	bpl.n	8007c54 <_dtoa_r+0x4d4>
 8007c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c4c:	f7f8 fcd4 	bl	80005f8 <__aeabi_dmul>
 8007c50:	3501      	adds	r5, #1
 8007c52:	2301      	movs	r3, #1
 8007c54:	1076      	asrs	r6, r6, #1
 8007c56:	3708      	adds	r7, #8
 8007c58:	e777      	b.n	8007b4a <_dtoa_r+0x3ca>
 8007c5a:	2502      	movs	r5, #2
 8007c5c:	e779      	b.n	8007b52 <_dtoa_r+0x3d2>
 8007c5e:	9f00      	ldr	r7, [sp, #0]
 8007c60:	9e03      	ldr	r6, [sp, #12]
 8007c62:	e794      	b.n	8007b8e <_dtoa_r+0x40e>
 8007c64:	9901      	ldr	r1, [sp, #4]
 8007c66:	4b4c      	ldr	r3, [pc, #304]	; (8007d98 <_dtoa_r+0x618>)
 8007c68:	4431      	add	r1, r6
 8007c6a:	910d      	str	r1, [sp, #52]	; 0x34
 8007c6c:	9908      	ldr	r1, [sp, #32]
 8007c6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c76:	2900      	cmp	r1, #0
 8007c78:	d043      	beq.n	8007d02 <_dtoa_r+0x582>
 8007c7a:	494d      	ldr	r1, [pc, #308]	; (8007db0 <_dtoa_r+0x630>)
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	f7f8 fde5 	bl	800084c <__aeabi_ddiv>
 8007c82:	4652      	mov	r2, sl
 8007c84:	465b      	mov	r3, fp
 8007c86:	f7f8 faff 	bl	8000288 <__aeabi_dsub>
 8007c8a:	9d01      	ldr	r5, [sp, #4]
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	468b      	mov	fp, r1
 8007c90:	4649      	mov	r1, r9
 8007c92:	4640      	mov	r0, r8
 8007c94:	f7f8 ff60 	bl	8000b58 <__aeabi_d2iz>
 8007c98:	4606      	mov	r6, r0
 8007c9a:	f7f8 fc43 	bl	8000524 <__aeabi_i2d>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	f7f8 faef 	bl	8000288 <__aeabi_dsub>
 8007caa:	3630      	adds	r6, #48	; 0x30
 8007cac:	f805 6b01 	strb.w	r6, [r5], #1
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	465b      	mov	r3, fp
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	4689      	mov	r9, r1
 8007cb8:	f7f8 ff10 	bl	8000adc <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d163      	bne.n	8007d88 <_dtoa_r+0x608>
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	4936      	ldr	r1, [pc, #216]	; (8007da0 <_dtoa_r+0x620>)
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f7f8 fade 	bl	8000288 <__aeabi_dsub>
 8007ccc:	4652      	mov	r2, sl
 8007cce:	465b      	mov	r3, fp
 8007cd0:	f7f8 ff04 	bl	8000adc <__aeabi_dcmplt>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f040 80b5 	bne.w	8007e44 <_dtoa_r+0x6c4>
 8007cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	d081      	beq.n	8007be4 <_dtoa_r+0x464>
 8007ce0:	4b30      	ldr	r3, [pc, #192]	; (8007da4 <_dtoa_r+0x624>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	4659      	mov	r1, fp
 8007ce8:	f7f8 fc86 	bl	80005f8 <__aeabi_dmul>
 8007cec:	4b2d      	ldr	r3, [pc, #180]	; (8007da4 <_dtoa_r+0x624>)
 8007cee:	4682      	mov	sl, r0
 8007cf0:	468b      	mov	fp, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f7f8 fc7e 	bl	80005f8 <__aeabi_dmul>
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	e7c6      	b.n	8007c90 <_dtoa_r+0x510>
 8007d02:	4650      	mov	r0, sl
 8007d04:	4659      	mov	r1, fp
 8007d06:	f7f8 fc77 	bl	80005f8 <__aeabi_dmul>
 8007d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d0c:	9d01      	ldr	r5, [sp, #4]
 8007d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d10:	4682      	mov	sl, r0
 8007d12:	468b      	mov	fp, r1
 8007d14:	4649      	mov	r1, r9
 8007d16:	4640      	mov	r0, r8
 8007d18:	f7f8 ff1e 	bl	8000b58 <__aeabi_d2iz>
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	f7f8 fc01 	bl	8000524 <__aeabi_i2d>
 8007d22:	3630      	adds	r6, #48	; 0x30
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4640      	mov	r0, r8
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	f7f8 faac 	bl	8000288 <__aeabi_dsub>
 8007d30:	f805 6b01 	strb.w	r6, [r5], #1
 8007d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d36:	429d      	cmp	r5, r3
 8007d38:	4680      	mov	r8, r0
 8007d3a:	4689      	mov	r9, r1
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	d124      	bne.n	8007d8c <_dtoa_r+0x60c>
 8007d42:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <_dtoa_r+0x630>)
 8007d44:	4650      	mov	r0, sl
 8007d46:	4659      	mov	r1, fp
 8007d48:	f7f8 faa0 	bl	800028c <__adddf3>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 fee0 	bl	8000b18 <__aeabi_dcmpgt>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d173      	bne.n	8007e44 <_dtoa_r+0x6c4>
 8007d5c:	4652      	mov	r2, sl
 8007d5e:	465b      	mov	r3, fp
 8007d60:	4913      	ldr	r1, [pc, #76]	; (8007db0 <_dtoa_r+0x630>)
 8007d62:	2000      	movs	r0, #0
 8007d64:	f7f8 fa90 	bl	8000288 <__aeabi_dsub>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	4649      	mov	r1, r9
 8007d70:	f7f8 feb4 	bl	8000adc <__aeabi_dcmplt>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f43f af35 	beq.w	8007be4 <_dtoa_r+0x464>
 8007d7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d7c:	1e6b      	subs	r3, r5, #1
 8007d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d84:	2b30      	cmp	r3, #48	; 0x30
 8007d86:	d0f8      	beq.n	8007d7a <_dtoa_r+0x5fa>
 8007d88:	9700      	str	r7, [sp, #0]
 8007d8a:	e049      	b.n	8007e20 <_dtoa_r+0x6a0>
 8007d8c:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <_dtoa_r+0x624>)
 8007d8e:	f7f8 fc33 	bl	80005f8 <__aeabi_dmul>
 8007d92:	4680      	mov	r8, r0
 8007d94:	4689      	mov	r9, r1
 8007d96:	e7bd      	b.n	8007d14 <_dtoa_r+0x594>
 8007d98:	080094b8 	.word	0x080094b8
 8007d9c:	08009490 	.word	0x08009490
 8007da0:	3ff00000 	.word	0x3ff00000
 8007da4:	40240000 	.word	0x40240000
 8007da8:	401c0000 	.word	0x401c0000
 8007dac:	40140000 	.word	0x40140000
 8007db0:	3fe00000 	.word	0x3fe00000
 8007db4:	9d01      	ldr	r5, [sp, #4]
 8007db6:	4656      	mov	r6, sl
 8007db8:	465f      	mov	r7, fp
 8007dba:	4642      	mov	r2, r8
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	f7f8 fd43 	bl	800084c <__aeabi_ddiv>
 8007dc6:	f7f8 fec7 	bl	8000b58 <__aeabi_d2iz>
 8007dca:	4682      	mov	sl, r0
 8007dcc:	f7f8 fbaa 	bl	8000524 <__aeabi_i2d>
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	f7f8 fc10 	bl	80005f8 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4630      	mov	r0, r6
 8007dde:	4639      	mov	r1, r7
 8007de0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007de4:	f7f8 fa50 	bl	8000288 <__aeabi_dsub>
 8007de8:	f805 6b01 	strb.w	r6, [r5], #1
 8007dec:	9e01      	ldr	r6, [sp, #4]
 8007dee:	9f03      	ldr	r7, [sp, #12]
 8007df0:	1bae      	subs	r6, r5, r6
 8007df2:	42b7      	cmp	r7, r6
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	d135      	bne.n	8007e66 <_dtoa_r+0x6e6>
 8007dfa:	f7f8 fa47 	bl	800028c <__adddf3>
 8007dfe:	4642      	mov	r2, r8
 8007e00:	464b      	mov	r3, r9
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	f7f8 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 8007e0a:	b9d0      	cbnz	r0, 8007e42 <_dtoa_r+0x6c2>
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	464b      	mov	r3, r9
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e18:	b110      	cbz	r0, 8007e20 <_dtoa_r+0x6a0>
 8007e1a:	f01a 0f01 	tst.w	sl, #1
 8007e1e:	d110      	bne.n	8007e42 <_dtoa_r+0x6c2>
 8007e20:	4620      	mov	r0, r4
 8007e22:	ee18 1a10 	vmov	r1, s16
 8007e26:	f000 fc2b 	bl	8008680 <_Bfree>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9800      	ldr	r0, [sp, #0]
 8007e2e:	702b      	strb	r3, [r5, #0]
 8007e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e32:	3001      	adds	r0, #1
 8007e34:	6018      	str	r0, [r3, #0]
 8007e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f43f acf1 	beq.w	8007820 <_dtoa_r+0xa0>
 8007e3e:	601d      	str	r5, [r3, #0]
 8007e40:	e4ee      	b.n	8007820 <_dtoa_r+0xa0>
 8007e42:	9f00      	ldr	r7, [sp, #0]
 8007e44:	462b      	mov	r3, r5
 8007e46:	461d      	mov	r5, r3
 8007e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e4c:	2a39      	cmp	r2, #57	; 0x39
 8007e4e:	d106      	bne.n	8007e5e <_dtoa_r+0x6de>
 8007e50:	9a01      	ldr	r2, [sp, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d1f7      	bne.n	8007e46 <_dtoa_r+0x6c6>
 8007e56:	9901      	ldr	r1, [sp, #4]
 8007e58:	2230      	movs	r2, #48	; 0x30
 8007e5a:	3701      	adds	r7, #1
 8007e5c:	700a      	strb	r2, [r1, #0]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	3201      	adds	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e790      	b.n	8007d88 <_dtoa_r+0x608>
 8007e66:	4ba6      	ldr	r3, [pc, #664]	; (8008100 <_dtoa_r+0x980>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f7f8 fbc5 	bl	80005f8 <__aeabi_dmul>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2300      	movs	r3, #0
 8007e72:	4606      	mov	r6, r0
 8007e74:	460f      	mov	r7, r1
 8007e76:	f7f8 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d09d      	beq.n	8007dba <_dtoa_r+0x63a>
 8007e7e:	e7cf      	b.n	8007e20 <_dtoa_r+0x6a0>
 8007e80:	9a08      	ldr	r2, [sp, #32]
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	f000 80d7 	beq.w	8008036 <_dtoa_r+0x8b6>
 8007e88:	9a06      	ldr	r2, [sp, #24]
 8007e8a:	2a01      	cmp	r2, #1
 8007e8c:	f300 80ba 	bgt.w	8008004 <_dtoa_r+0x884>
 8007e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	f000 80b2 	beq.w	8007ffc <_dtoa_r+0x87c>
 8007e98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e9c:	9e07      	ldr	r6, [sp, #28]
 8007e9e:	9d04      	ldr	r5, [sp, #16]
 8007ea0:	9a04      	ldr	r2, [sp, #16]
 8007ea2:	441a      	add	r2, r3
 8007ea4:	9204      	str	r2, [sp, #16]
 8007ea6:	9a05      	ldr	r2, [sp, #20]
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	441a      	add	r2, r3
 8007eac:	4620      	mov	r0, r4
 8007eae:	9205      	str	r2, [sp, #20]
 8007eb0:	f000 fc9e 	bl	80087f0 <__i2b>
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	dd0c      	ble.n	8007ed4 <_dtoa_r+0x754>
 8007eba:	9b05      	ldr	r3, [sp, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dd09      	ble.n	8007ed4 <_dtoa_r+0x754>
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	9a04      	ldr	r2, [sp, #16]
 8007ec4:	bfa8      	it	ge
 8007ec6:	462b      	movge	r3, r5
 8007ec8:	1ad2      	subs	r2, r2, r3
 8007eca:	9204      	str	r2, [sp, #16]
 8007ecc:	9a05      	ldr	r2, [sp, #20]
 8007ece:	1aed      	subs	r5, r5, r3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	9305      	str	r3, [sp, #20]
 8007ed4:	9b07      	ldr	r3, [sp, #28]
 8007ed6:	b31b      	cbz	r3, 8007f20 <_dtoa_r+0x7a0>
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80af 	beq.w	800803e <_dtoa_r+0x8be>
 8007ee0:	2e00      	cmp	r6, #0
 8007ee2:	dd13      	ble.n	8007f0c <_dtoa_r+0x78c>
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fd41 	bl	8008970 <__pow5mult>
 8007eee:	ee18 2a10 	vmov	r2, s16
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 fc90 	bl	800881c <__multiply>
 8007efc:	ee18 1a10 	vmov	r1, s16
 8007f00:	4680      	mov	r8, r0
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fbbc 	bl	8008680 <_Bfree>
 8007f08:	ee08 8a10 	vmov	s16, r8
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	1b9a      	subs	r2, r3, r6
 8007f10:	d006      	beq.n	8007f20 <_dtoa_r+0x7a0>
 8007f12:	ee18 1a10 	vmov	r1, s16
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 fd2a 	bl	8008970 <__pow5mult>
 8007f1c:	ee08 0a10 	vmov	s16, r0
 8007f20:	2101      	movs	r1, #1
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 fc64 	bl	80087f0 <__i2b>
 8007f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	f340 8088 	ble.w	8008042 <_dtoa_r+0x8c2>
 8007f32:	461a      	mov	r2, r3
 8007f34:	4601      	mov	r1, r0
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 fd1a 	bl	8008970 <__pow5mult>
 8007f3c:	9b06      	ldr	r3, [sp, #24]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	4606      	mov	r6, r0
 8007f42:	f340 8081 	ble.w	8008048 <_dtoa_r+0x8c8>
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	6933      	ldr	r3, [r6, #16]
 8007f4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f50:	6918      	ldr	r0, [r3, #16]
 8007f52:	f000 fbfd 	bl	8008750 <__hi0bits>
 8007f56:	f1c0 0020 	rsb	r0, r0, #32
 8007f5a:	9b05      	ldr	r3, [sp, #20]
 8007f5c:	4418      	add	r0, r3
 8007f5e:	f010 001f 	ands.w	r0, r0, #31
 8007f62:	f000 8092 	beq.w	800808a <_dtoa_r+0x90a>
 8007f66:	f1c0 0320 	rsb	r3, r0, #32
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	f340 808a 	ble.w	8008084 <_dtoa_r+0x904>
 8007f70:	f1c0 001c 	rsb	r0, r0, #28
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	4403      	add	r3, r0
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	9b05      	ldr	r3, [sp, #20]
 8007f7c:	4403      	add	r3, r0
 8007f7e:	4405      	add	r5, r0
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	9b04      	ldr	r3, [sp, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dd07      	ble.n	8007f98 <_dtoa_r+0x818>
 8007f88:	ee18 1a10 	vmov	r1, s16
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 fd48 	bl	8008a24 <__lshift>
 8007f94:	ee08 0a10 	vmov	s16, r0
 8007f98:	9b05      	ldr	r3, [sp, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dd05      	ble.n	8007faa <_dtoa_r+0x82a>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fd3e 	bl	8008a24 <__lshift>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d06e      	beq.n	800808e <_dtoa_r+0x90e>
 8007fb0:	ee18 0a10 	vmov	r0, s16
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	f000 fda5 	bl	8008b04 <__mcmp>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	da67      	bge.n	800808e <_dtoa_r+0x90e>
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	ee18 1a10 	vmov	r1, s16
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	220a      	movs	r2, #10
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fb79 	bl	80086c4 <__multadd>
 8007fd2:	9b08      	ldr	r3, [sp, #32]
 8007fd4:	ee08 0a10 	vmov	s16, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 81b1 	beq.w	8008340 <_dtoa_r+0xbc0>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	220a      	movs	r2, #10
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 fb6d 	bl	80086c4 <__multadd>
 8007fea:	9b02      	ldr	r3, [sp, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	4607      	mov	r7, r0
 8007ff0:	f300 808e 	bgt.w	8008110 <_dtoa_r+0x990>
 8007ff4:	9b06      	ldr	r3, [sp, #24]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	dc51      	bgt.n	800809e <_dtoa_r+0x91e>
 8007ffa:	e089      	b.n	8008110 <_dtoa_r+0x990>
 8007ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008002:	e74b      	b.n	8007e9c <_dtoa_r+0x71c>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	1e5e      	subs	r6, r3, #1
 8008008:	9b07      	ldr	r3, [sp, #28]
 800800a:	42b3      	cmp	r3, r6
 800800c:	bfbf      	itttt	lt
 800800e:	9b07      	ldrlt	r3, [sp, #28]
 8008010:	9607      	strlt	r6, [sp, #28]
 8008012:	1af2      	sublt	r2, r6, r3
 8008014:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008016:	bfb6      	itet	lt
 8008018:	189b      	addlt	r3, r3, r2
 800801a:	1b9e      	subge	r6, r3, r6
 800801c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	bfb8      	it	lt
 8008022:	2600      	movlt	r6, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfb7      	itett	lt
 8008028:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800802c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008030:	1a9d      	sublt	r5, r3, r2
 8008032:	2300      	movlt	r3, #0
 8008034:	e734      	b.n	8007ea0 <_dtoa_r+0x720>
 8008036:	9e07      	ldr	r6, [sp, #28]
 8008038:	9d04      	ldr	r5, [sp, #16]
 800803a:	9f08      	ldr	r7, [sp, #32]
 800803c:	e73b      	b.n	8007eb6 <_dtoa_r+0x736>
 800803e:	9a07      	ldr	r2, [sp, #28]
 8008040:	e767      	b.n	8007f12 <_dtoa_r+0x792>
 8008042:	9b06      	ldr	r3, [sp, #24]
 8008044:	2b01      	cmp	r3, #1
 8008046:	dc18      	bgt.n	800807a <_dtoa_r+0x8fa>
 8008048:	f1ba 0f00 	cmp.w	sl, #0
 800804c:	d115      	bne.n	800807a <_dtoa_r+0x8fa>
 800804e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008052:	b993      	cbnz	r3, 800807a <_dtoa_r+0x8fa>
 8008054:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008058:	0d1b      	lsrs	r3, r3, #20
 800805a:	051b      	lsls	r3, r3, #20
 800805c:	b183      	cbz	r3, 8008080 <_dtoa_r+0x900>
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	3301      	adds	r3, #1
 8008062:	9304      	str	r3, [sp, #16]
 8008064:	9b05      	ldr	r3, [sp, #20]
 8008066:	3301      	adds	r3, #1
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	f04f 0801 	mov.w	r8, #1
 800806e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008070:	2b00      	cmp	r3, #0
 8008072:	f47f af6a 	bne.w	8007f4a <_dtoa_r+0x7ca>
 8008076:	2001      	movs	r0, #1
 8008078:	e76f      	b.n	8007f5a <_dtoa_r+0x7da>
 800807a:	f04f 0800 	mov.w	r8, #0
 800807e:	e7f6      	b.n	800806e <_dtoa_r+0x8ee>
 8008080:	4698      	mov	r8, r3
 8008082:	e7f4      	b.n	800806e <_dtoa_r+0x8ee>
 8008084:	f43f af7d 	beq.w	8007f82 <_dtoa_r+0x802>
 8008088:	4618      	mov	r0, r3
 800808a:	301c      	adds	r0, #28
 800808c:	e772      	b.n	8007f74 <_dtoa_r+0x7f4>
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc37      	bgt.n	8008104 <_dtoa_r+0x984>
 8008094:	9b06      	ldr	r3, [sp, #24]
 8008096:	2b02      	cmp	r3, #2
 8008098:	dd34      	ble.n	8008104 <_dtoa_r+0x984>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	9302      	str	r3, [sp, #8]
 800809e:	9b02      	ldr	r3, [sp, #8]
 80080a0:	b96b      	cbnz	r3, 80080be <_dtoa_r+0x93e>
 80080a2:	4631      	mov	r1, r6
 80080a4:	2205      	movs	r2, #5
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fb0c 	bl	80086c4 <__multadd>
 80080ac:	4601      	mov	r1, r0
 80080ae:	4606      	mov	r6, r0
 80080b0:	ee18 0a10 	vmov	r0, s16
 80080b4:	f000 fd26 	bl	8008b04 <__mcmp>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f73f adbb 	bgt.w	8007c34 <_dtoa_r+0x4b4>
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	9d01      	ldr	r5, [sp, #4]
 80080c2:	43db      	mvns	r3, r3
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	f04f 0800 	mov.w	r8, #0
 80080ca:	4631      	mov	r1, r6
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fad7 	bl	8008680 <_Bfree>
 80080d2:	2f00      	cmp	r7, #0
 80080d4:	f43f aea4 	beq.w	8007e20 <_dtoa_r+0x6a0>
 80080d8:	f1b8 0f00 	cmp.w	r8, #0
 80080dc:	d005      	beq.n	80080ea <_dtoa_r+0x96a>
 80080de:	45b8      	cmp	r8, r7
 80080e0:	d003      	beq.n	80080ea <_dtoa_r+0x96a>
 80080e2:	4641      	mov	r1, r8
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 facb 	bl	8008680 <_Bfree>
 80080ea:	4639      	mov	r1, r7
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 fac7 	bl	8008680 <_Bfree>
 80080f2:	e695      	b.n	8007e20 <_dtoa_r+0x6a0>
 80080f4:	2600      	movs	r6, #0
 80080f6:	4637      	mov	r7, r6
 80080f8:	e7e1      	b.n	80080be <_dtoa_r+0x93e>
 80080fa:	9700      	str	r7, [sp, #0]
 80080fc:	4637      	mov	r7, r6
 80080fe:	e599      	b.n	8007c34 <_dtoa_r+0x4b4>
 8008100:	40240000 	.word	0x40240000
 8008104:	9b08      	ldr	r3, [sp, #32]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80ca 	beq.w	80082a0 <_dtoa_r+0xb20>
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	9302      	str	r3, [sp, #8]
 8008110:	2d00      	cmp	r5, #0
 8008112:	dd05      	ble.n	8008120 <_dtoa_r+0x9a0>
 8008114:	4639      	mov	r1, r7
 8008116:	462a      	mov	r2, r5
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fc83 	bl	8008a24 <__lshift>
 800811e:	4607      	mov	r7, r0
 8008120:	f1b8 0f00 	cmp.w	r8, #0
 8008124:	d05b      	beq.n	80081de <_dtoa_r+0xa5e>
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fa69 	bl	8008600 <_Balloc>
 800812e:	4605      	mov	r5, r0
 8008130:	b928      	cbnz	r0, 800813e <_dtoa_r+0x9be>
 8008132:	4b87      	ldr	r3, [pc, #540]	; (8008350 <_dtoa_r+0xbd0>)
 8008134:	4602      	mov	r2, r0
 8008136:	f240 21ea 	movw	r1, #746	; 0x2ea
 800813a:	f7ff bb3b 	b.w	80077b4 <_dtoa_r+0x34>
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	3202      	adds	r2, #2
 8008142:	0092      	lsls	r2, r2, #2
 8008144:	f107 010c 	add.w	r1, r7, #12
 8008148:	300c      	adds	r0, #12
 800814a:	f7fe fb62 	bl	8006812 <memcpy>
 800814e:	2201      	movs	r2, #1
 8008150:	4629      	mov	r1, r5
 8008152:	4620      	mov	r0, r4
 8008154:	f000 fc66 	bl	8008a24 <__lshift>
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	f103 0901 	add.w	r9, r3, #1
 800815e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008162:	4413      	add	r3, r2
 8008164:	9305      	str	r3, [sp, #20]
 8008166:	f00a 0301 	and.w	r3, sl, #1
 800816a:	46b8      	mov	r8, r7
 800816c:	9304      	str	r3, [sp, #16]
 800816e:	4607      	mov	r7, r0
 8008170:	4631      	mov	r1, r6
 8008172:	ee18 0a10 	vmov	r0, s16
 8008176:	f7ff fa77 	bl	8007668 <quorem>
 800817a:	4641      	mov	r1, r8
 800817c:	9002      	str	r0, [sp, #8]
 800817e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008182:	ee18 0a10 	vmov	r0, s16
 8008186:	f000 fcbd 	bl	8008b04 <__mcmp>
 800818a:	463a      	mov	r2, r7
 800818c:	9003      	str	r0, [sp, #12]
 800818e:	4631      	mov	r1, r6
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fcd3 	bl	8008b3c <__mdiff>
 8008196:	68c2      	ldr	r2, [r0, #12]
 8008198:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800819c:	4605      	mov	r5, r0
 800819e:	bb02      	cbnz	r2, 80081e2 <_dtoa_r+0xa62>
 80081a0:	4601      	mov	r1, r0
 80081a2:	ee18 0a10 	vmov	r0, s16
 80081a6:	f000 fcad 	bl	8008b04 <__mcmp>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4629      	mov	r1, r5
 80081ae:	4620      	mov	r0, r4
 80081b0:	9207      	str	r2, [sp, #28]
 80081b2:	f000 fa65 	bl	8008680 <_Bfree>
 80081b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80081ba:	ea43 0102 	orr.w	r1, r3, r2
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	430b      	orrs	r3, r1
 80081c2:	464d      	mov	r5, r9
 80081c4:	d10f      	bne.n	80081e6 <_dtoa_r+0xa66>
 80081c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081ca:	d02a      	beq.n	8008222 <_dtoa_r+0xaa2>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd02      	ble.n	80081d8 <_dtoa_r+0xa58>
 80081d2:	9b02      	ldr	r3, [sp, #8]
 80081d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081d8:	f88b a000 	strb.w	sl, [fp]
 80081dc:	e775      	b.n	80080ca <_dtoa_r+0x94a>
 80081de:	4638      	mov	r0, r7
 80081e0:	e7ba      	b.n	8008158 <_dtoa_r+0x9d8>
 80081e2:	2201      	movs	r2, #1
 80081e4:	e7e2      	b.n	80081ac <_dtoa_r+0xa2c>
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	db04      	blt.n	80081f6 <_dtoa_r+0xa76>
 80081ec:	9906      	ldr	r1, [sp, #24]
 80081ee:	430b      	orrs	r3, r1
 80081f0:	9904      	ldr	r1, [sp, #16]
 80081f2:	430b      	orrs	r3, r1
 80081f4:	d122      	bne.n	800823c <_dtoa_r+0xabc>
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	ddee      	ble.n	80081d8 <_dtoa_r+0xa58>
 80081fa:	ee18 1a10 	vmov	r1, s16
 80081fe:	2201      	movs	r2, #1
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fc0f 	bl	8008a24 <__lshift>
 8008206:	4631      	mov	r1, r6
 8008208:	ee08 0a10 	vmov	s16, r0
 800820c:	f000 fc7a 	bl	8008b04 <__mcmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	dc03      	bgt.n	800821c <_dtoa_r+0xa9c>
 8008214:	d1e0      	bne.n	80081d8 <_dtoa_r+0xa58>
 8008216:	f01a 0f01 	tst.w	sl, #1
 800821a:	d0dd      	beq.n	80081d8 <_dtoa_r+0xa58>
 800821c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008220:	d1d7      	bne.n	80081d2 <_dtoa_r+0xa52>
 8008222:	2339      	movs	r3, #57	; 0x39
 8008224:	f88b 3000 	strb.w	r3, [fp]
 8008228:	462b      	mov	r3, r5
 800822a:	461d      	mov	r5, r3
 800822c:	3b01      	subs	r3, #1
 800822e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008232:	2a39      	cmp	r2, #57	; 0x39
 8008234:	d071      	beq.n	800831a <_dtoa_r+0xb9a>
 8008236:	3201      	adds	r2, #1
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e746      	b.n	80080ca <_dtoa_r+0x94a>
 800823c:	2a00      	cmp	r2, #0
 800823e:	dd07      	ble.n	8008250 <_dtoa_r+0xad0>
 8008240:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008244:	d0ed      	beq.n	8008222 <_dtoa_r+0xaa2>
 8008246:	f10a 0301 	add.w	r3, sl, #1
 800824a:	f88b 3000 	strb.w	r3, [fp]
 800824e:	e73c      	b.n	80080ca <_dtoa_r+0x94a>
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008256:	4599      	cmp	r9, r3
 8008258:	d047      	beq.n	80082ea <_dtoa_r+0xb6a>
 800825a:	ee18 1a10 	vmov	r1, s16
 800825e:	2300      	movs	r3, #0
 8008260:	220a      	movs	r2, #10
 8008262:	4620      	mov	r0, r4
 8008264:	f000 fa2e 	bl	80086c4 <__multadd>
 8008268:	45b8      	cmp	r8, r7
 800826a:	ee08 0a10 	vmov	s16, r0
 800826e:	f04f 0300 	mov.w	r3, #0
 8008272:	f04f 020a 	mov.w	r2, #10
 8008276:	4641      	mov	r1, r8
 8008278:	4620      	mov	r0, r4
 800827a:	d106      	bne.n	800828a <_dtoa_r+0xb0a>
 800827c:	f000 fa22 	bl	80086c4 <__multadd>
 8008280:	4680      	mov	r8, r0
 8008282:	4607      	mov	r7, r0
 8008284:	f109 0901 	add.w	r9, r9, #1
 8008288:	e772      	b.n	8008170 <_dtoa_r+0x9f0>
 800828a:	f000 fa1b 	bl	80086c4 <__multadd>
 800828e:	4639      	mov	r1, r7
 8008290:	4680      	mov	r8, r0
 8008292:	2300      	movs	r3, #0
 8008294:	220a      	movs	r2, #10
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fa14 	bl	80086c4 <__multadd>
 800829c:	4607      	mov	r7, r0
 800829e:	e7f1      	b.n	8008284 <_dtoa_r+0xb04>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	9302      	str	r3, [sp, #8]
 80082a4:	9d01      	ldr	r5, [sp, #4]
 80082a6:	ee18 0a10 	vmov	r0, s16
 80082aa:	4631      	mov	r1, r6
 80082ac:	f7ff f9dc 	bl	8007668 <quorem>
 80082b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	f805 ab01 	strb.w	sl, [r5], #1
 80082ba:	1aea      	subs	r2, r5, r3
 80082bc:	9b02      	ldr	r3, [sp, #8]
 80082be:	4293      	cmp	r3, r2
 80082c0:	dd09      	ble.n	80082d6 <_dtoa_r+0xb56>
 80082c2:	ee18 1a10 	vmov	r1, s16
 80082c6:	2300      	movs	r3, #0
 80082c8:	220a      	movs	r2, #10
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f9fa 	bl	80086c4 <__multadd>
 80082d0:	ee08 0a10 	vmov	s16, r0
 80082d4:	e7e7      	b.n	80082a6 <_dtoa_r+0xb26>
 80082d6:	9b02      	ldr	r3, [sp, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bfc8      	it	gt
 80082dc:	461d      	movgt	r5, r3
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	bfd8      	it	le
 80082e2:	2501      	movle	r5, #1
 80082e4:	441d      	add	r5, r3
 80082e6:	f04f 0800 	mov.w	r8, #0
 80082ea:	ee18 1a10 	vmov	r1, s16
 80082ee:	2201      	movs	r2, #1
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 fb97 	bl	8008a24 <__lshift>
 80082f6:	4631      	mov	r1, r6
 80082f8:	ee08 0a10 	vmov	s16, r0
 80082fc:	f000 fc02 	bl	8008b04 <__mcmp>
 8008300:	2800      	cmp	r0, #0
 8008302:	dc91      	bgt.n	8008228 <_dtoa_r+0xaa8>
 8008304:	d102      	bne.n	800830c <_dtoa_r+0xb8c>
 8008306:	f01a 0f01 	tst.w	sl, #1
 800830a:	d18d      	bne.n	8008228 <_dtoa_r+0xaa8>
 800830c:	462b      	mov	r3, r5
 800830e:	461d      	mov	r5, r3
 8008310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008314:	2a30      	cmp	r2, #48	; 0x30
 8008316:	d0fa      	beq.n	800830e <_dtoa_r+0xb8e>
 8008318:	e6d7      	b.n	80080ca <_dtoa_r+0x94a>
 800831a:	9a01      	ldr	r2, [sp, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	d184      	bne.n	800822a <_dtoa_r+0xaaa>
 8008320:	9b00      	ldr	r3, [sp, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	2331      	movs	r3, #49	; 0x31
 8008328:	7013      	strb	r3, [r2, #0]
 800832a:	e6ce      	b.n	80080ca <_dtoa_r+0x94a>
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <_dtoa_r+0xbd4>)
 800832e:	f7ff ba95 	b.w	800785c <_dtoa_r+0xdc>
 8008332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008334:	2b00      	cmp	r3, #0
 8008336:	f47f aa6e 	bne.w	8007816 <_dtoa_r+0x96>
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <_dtoa_r+0xbd8>)
 800833c:	f7ff ba8e 	b.w	800785c <_dtoa_r+0xdc>
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	dcae      	bgt.n	80082a4 <_dtoa_r+0xb24>
 8008346:	9b06      	ldr	r3, [sp, #24]
 8008348:	2b02      	cmp	r3, #2
 800834a:	f73f aea8 	bgt.w	800809e <_dtoa_r+0x91e>
 800834e:	e7a9      	b.n	80082a4 <_dtoa_r+0xb24>
 8008350:	0800941f 	.word	0x0800941f
 8008354:	0800937c 	.word	0x0800937c
 8008358:	080093a0 	.word	0x080093a0

0800835c <__sflush_r>:
 800835c:	898a      	ldrh	r2, [r1, #12]
 800835e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008362:	4605      	mov	r5, r0
 8008364:	0710      	lsls	r0, r2, #28
 8008366:	460c      	mov	r4, r1
 8008368:	d458      	bmi.n	800841c <__sflush_r+0xc0>
 800836a:	684b      	ldr	r3, [r1, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dc05      	bgt.n	800837c <__sflush_r+0x20>
 8008370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	dc02      	bgt.n	800837c <__sflush_r+0x20>
 8008376:	2000      	movs	r0, #0
 8008378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800837e:	2e00      	cmp	r6, #0
 8008380:	d0f9      	beq.n	8008376 <__sflush_r+0x1a>
 8008382:	2300      	movs	r3, #0
 8008384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008388:	682f      	ldr	r7, [r5, #0]
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	d032      	beq.n	80083f4 <__sflush_r+0x98>
 800838e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	075a      	lsls	r2, r3, #29
 8008394:	d505      	bpl.n	80083a2 <__sflush_r+0x46>
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	1ac0      	subs	r0, r0, r3
 800839a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800839c:	b10b      	cbz	r3, 80083a2 <__sflush_r+0x46>
 800839e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083a0:	1ac0      	subs	r0, r0, r3
 80083a2:	2300      	movs	r3, #0
 80083a4:	4602      	mov	r2, r0
 80083a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a8:	6a21      	ldr	r1, [r4, #32]
 80083aa:	4628      	mov	r0, r5
 80083ac:	47b0      	blx	r6
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	d106      	bne.n	80083c2 <__sflush_r+0x66>
 80083b4:	6829      	ldr	r1, [r5, #0]
 80083b6:	291d      	cmp	r1, #29
 80083b8:	d82c      	bhi.n	8008414 <__sflush_r+0xb8>
 80083ba:	4a2a      	ldr	r2, [pc, #168]	; (8008464 <__sflush_r+0x108>)
 80083bc:	40ca      	lsrs	r2, r1
 80083be:	07d6      	lsls	r6, r2, #31
 80083c0:	d528      	bpl.n	8008414 <__sflush_r+0xb8>
 80083c2:	2200      	movs	r2, #0
 80083c4:	6062      	str	r2, [r4, #4]
 80083c6:	04d9      	lsls	r1, r3, #19
 80083c8:	6922      	ldr	r2, [r4, #16]
 80083ca:	6022      	str	r2, [r4, #0]
 80083cc:	d504      	bpl.n	80083d8 <__sflush_r+0x7c>
 80083ce:	1c42      	adds	r2, r0, #1
 80083d0:	d101      	bne.n	80083d6 <__sflush_r+0x7a>
 80083d2:	682b      	ldr	r3, [r5, #0]
 80083d4:	b903      	cbnz	r3, 80083d8 <__sflush_r+0x7c>
 80083d6:	6560      	str	r0, [r4, #84]	; 0x54
 80083d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083da:	602f      	str	r7, [r5, #0]
 80083dc:	2900      	cmp	r1, #0
 80083de:	d0ca      	beq.n	8008376 <__sflush_r+0x1a>
 80083e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083e4:	4299      	cmp	r1, r3
 80083e6:	d002      	beq.n	80083ee <__sflush_r+0x92>
 80083e8:	4628      	mov	r0, r5
 80083ea:	f000 fca3 	bl	8008d34 <_free_r>
 80083ee:	2000      	movs	r0, #0
 80083f0:	6360      	str	r0, [r4, #52]	; 0x34
 80083f2:	e7c1      	b.n	8008378 <__sflush_r+0x1c>
 80083f4:	6a21      	ldr	r1, [r4, #32]
 80083f6:	2301      	movs	r3, #1
 80083f8:	4628      	mov	r0, r5
 80083fa:	47b0      	blx	r6
 80083fc:	1c41      	adds	r1, r0, #1
 80083fe:	d1c7      	bne.n	8008390 <__sflush_r+0x34>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0c4      	beq.n	8008390 <__sflush_r+0x34>
 8008406:	2b1d      	cmp	r3, #29
 8008408:	d001      	beq.n	800840e <__sflush_r+0xb2>
 800840a:	2b16      	cmp	r3, #22
 800840c:	d101      	bne.n	8008412 <__sflush_r+0xb6>
 800840e:	602f      	str	r7, [r5, #0]
 8008410:	e7b1      	b.n	8008376 <__sflush_r+0x1a>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	e7ad      	b.n	8008378 <__sflush_r+0x1c>
 800841c:	690f      	ldr	r7, [r1, #16]
 800841e:	2f00      	cmp	r7, #0
 8008420:	d0a9      	beq.n	8008376 <__sflush_r+0x1a>
 8008422:	0793      	lsls	r3, r2, #30
 8008424:	680e      	ldr	r6, [r1, #0]
 8008426:	bf08      	it	eq
 8008428:	694b      	ldreq	r3, [r1, #20]
 800842a:	600f      	str	r7, [r1, #0]
 800842c:	bf18      	it	ne
 800842e:	2300      	movne	r3, #0
 8008430:	eba6 0807 	sub.w	r8, r6, r7
 8008434:	608b      	str	r3, [r1, #8]
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	dd9c      	ble.n	8008376 <__sflush_r+0x1a>
 800843c:	6a21      	ldr	r1, [r4, #32]
 800843e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008440:	4643      	mov	r3, r8
 8008442:	463a      	mov	r2, r7
 8008444:	4628      	mov	r0, r5
 8008446:	47b0      	blx	r6
 8008448:	2800      	cmp	r0, #0
 800844a:	dc06      	bgt.n	800845a <__sflush_r+0xfe>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008458:	e78e      	b.n	8008378 <__sflush_r+0x1c>
 800845a:	4407      	add	r7, r0
 800845c:	eba8 0800 	sub.w	r8, r8, r0
 8008460:	e7e9      	b.n	8008436 <__sflush_r+0xda>
 8008462:	bf00      	nop
 8008464:	20400001 	.word	0x20400001

08008468 <_fflush_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	690b      	ldr	r3, [r1, #16]
 800846c:	4605      	mov	r5, r0
 800846e:	460c      	mov	r4, r1
 8008470:	b913      	cbnz	r3, 8008478 <_fflush_r+0x10>
 8008472:	2500      	movs	r5, #0
 8008474:	4628      	mov	r0, r5
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	b118      	cbz	r0, 8008482 <_fflush_r+0x1a>
 800847a:	6983      	ldr	r3, [r0, #24]
 800847c:	b90b      	cbnz	r3, 8008482 <_fflush_r+0x1a>
 800847e:	f7fe f903 	bl	8006688 <__sinit>
 8008482:	4b14      	ldr	r3, [pc, #80]	; (80084d4 <_fflush_r+0x6c>)
 8008484:	429c      	cmp	r4, r3
 8008486:	d11b      	bne.n	80084c0 <_fflush_r+0x58>
 8008488:	686c      	ldr	r4, [r5, #4]
 800848a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0ef      	beq.n	8008472 <_fflush_r+0xa>
 8008492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008494:	07d0      	lsls	r0, r2, #31
 8008496:	d404      	bmi.n	80084a2 <_fflush_r+0x3a>
 8008498:	0599      	lsls	r1, r3, #22
 800849a:	d402      	bmi.n	80084a2 <_fflush_r+0x3a>
 800849c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849e:	f7fe f9b6 	bl	800680e <__retarget_lock_acquire_recursive>
 80084a2:	4628      	mov	r0, r5
 80084a4:	4621      	mov	r1, r4
 80084a6:	f7ff ff59 	bl	800835c <__sflush_r>
 80084aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084ac:	07da      	lsls	r2, r3, #31
 80084ae:	4605      	mov	r5, r0
 80084b0:	d4e0      	bmi.n	8008474 <_fflush_r+0xc>
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	059b      	lsls	r3, r3, #22
 80084b6:	d4dd      	bmi.n	8008474 <_fflush_r+0xc>
 80084b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ba:	f7fe f9a9 	bl	8006810 <__retarget_lock_release_recursive>
 80084be:	e7d9      	b.n	8008474 <_fflush_r+0xc>
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <_fflush_r+0x70>)
 80084c2:	429c      	cmp	r4, r3
 80084c4:	d101      	bne.n	80084ca <_fflush_r+0x62>
 80084c6:	68ac      	ldr	r4, [r5, #8]
 80084c8:	e7df      	b.n	800848a <_fflush_r+0x22>
 80084ca:	4b04      	ldr	r3, [pc, #16]	; (80084dc <_fflush_r+0x74>)
 80084cc:	429c      	cmp	r4, r3
 80084ce:	bf08      	it	eq
 80084d0:	68ec      	ldreq	r4, [r5, #12]
 80084d2:	e7da      	b.n	800848a <_fflush_r+0x22>
 80084d4:	08009328 	.word	0x08009328
 80084d8:	08009348 	.word	0x08009348
 80084dc:	08009308 	.word	0x08009308

080084e0 <_localeconv_r>:
 80084e0:	4800      	ldr	r0, [pc, #0]	; (80084e4 <_localeconv_r+0x4>)
 80084e2:	4770      	bx	lr
 80084e4:	20000164 	.word	0x20000164

080084e8 <_lseek_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d07      	ldr	r5, [pc, #28]	; (8008508 <_lseek_r+0x20>)
 80084ec:	4604      	mov	r4, r0
 80084ee:	4608      	mov	r0, r1
 80084f0:	4611      	mov	r1, r2
 80084f2:	2200      	movs	r2, #0
 80084f4:	602a      	str	r2, [r5, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	f7f8 fe6c 	bl	80011d4 <_lseek>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d102      	bne.n	8008506 <_lseek_r+0x1e>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	b103      	cbz	r3, 8008506 <_lseek_r+0x1e>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	20001cf4 	.word	0x20001cf4

0800850c <__swhatbuf_r>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	460e      	mov	r6, r1
 8008510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008514:	2900      	cmp	r1, #0
 8008516:	b096      	sub	sp, #88	; 0x58
 8008518:	4614      	mov	r4, r2
 800851a:	461d      	mov	r5, r3
 800851c:	da08      	bge.n	8008530 <__swhatbuf_r+0x24>
 800851e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	602a      	str	r2, [r5, #0]
 8008526:	061a      	lsls	r2, r3, #24
 8008528:	d410      	bmi.n	800854c <__swhatbuf_r+0x40>
 800852a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800852e:	e00e      	b.n	800854e <__swhatbuf_r+0x42>
 8008530:	466a      	mov	r2, sp
 8008532:	f000 fc8d 	bl	8008e50 <_fstat_r>
 8008536:	2800      	cmp	r0, #0
 8008538:	dbf1      	blt.n	800851e <__swhatbuf_r+0x12>
 800853a:	9a01      	ldr	r2, [sp, #4]
 800853c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008540:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008544:	425a      	negs	r2, r3
 8008546:	415a      	adcs	r2, r3
 8008548:	602a      	str	r2, [r5, #0]
 800854a:	e7ee      	b.n	800852a <__swhatbuf_r+0x1e>
 800854c:	2340      	movs	r3, #64	; 0x40
 800854e:	2000      	movs	r0, #0
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	b016      	add	sp, #88	; 0x58
 8008554:	bd70      	pop	{r4, r5, r6, pc}
	...

08008558 <__smakebuf_r>:
 8008558:	898b      	ldrh	r3, [r1, #12]
 800855a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800855c:	079d      	lsls	r5, r3, #30
 800855e:	4606      	mov	r6, r0
 8008560:	460c      	mov	r4, r1
 8008562:	d507      	bpl.n	8008574 <__smakebuf_r+0x1c>
 8008564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	6123      	str	r3, [r4, #16]
 800856c:	2301      	movs	r3, #1
 800856e:	6163      	str	r3, [r4, #20]
 8008570:	b002      	add	sp, #8
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	ab01      	add	r3, sp, #4
 8008576:	466a      	mov	r2, sp
 8008578:	f7ff ffc8 	bl	800850c <__swhatbuf_r>
 800857c:	9900      	ldr	r1, [sp, #0]
 800857e:	4605      	mov	r5, r0
 8008580:	4630      	mov	r0, r6
 8008582:	f7fe f97d 	bl	8006880 <_malloc_r>
 8008586:	b948      	cbnz	r0, 800859c <__smakebuf_r+0x44>
 8008588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858c:	059a      	lsls	r2, r3, #22
 800858e:	d4ef      	bmi.n	8008570 <__smakebuf_r+0x18>
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	f043 0302 	orr.w	r3, r3, #2
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	e7e3      	b.n	8008564 <__smakebuf_r+0xc>
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <__smakebuf_r+0x7c>)
 800859e:	62b3      	str	r3, [r6, #40]	; 0x28
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	6020      	str	r0, [r4, #0]
 80085a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	9b00      	ldr	r3, [sp, #0]
 80085ac:	6163      	str	r3, [r4, #20]
 80085ae:	9b01      	ldr	r3, [sp, #4]
 80085b0:	6120      	str	r0, [r4, #16]
 80085b2:	b15b      	cbz	r3, 80085cc <__smakebuf_r+0x74>
 80085b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b8:	4630      	mov	r0, r6
 80085ba:	f000 fc5b 	bl	8008e74 <_isatty_r>
 80085be:	b128      	cbz	r0, 80085cc <__smakebuf_r+0x74>
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	f043 0301 	orr.w	r3, r3, #1
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	89a0      	ldrh	r0, [r4, #12]
 80085ce:	4305      	orrs	r5, r0
 80085d0:	81a5      	strh	r5, [r4, #12]
 80085d2:	e7cd      	b.n	8008570 <__smakebuf_r+0x18>
 80085d4:	08006621 	.word	0x08006621

080085d8 <malloc>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <malloc+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f7fe b94f 	b.w	8006880 <_malloc_r>
 80085e2:	bf00      	nop
 80085e4:	20000010 	.word	0x20000010

080085e8 <__malloc_lock>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__malloc_lock+0x8>)
 80085ea:	f7fe b910 	b.w	800680e <__retarget_lock_acquire_recursive>
 80085ee:	bf00      	nop
 80085f0:	20001ce8 	.word	0x20001ce8

080085f4 <__malloc_unlock>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__malloc_unlock+0x8>)
 80085f6:	f7fe b90b 	b.w	8006810 <__retarget_lock_release_recursive>
 80085fa:	bf00      	nop
 80085fc:	20001ce8 	.word	0x20001ce8

08008600 <_Balloc>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008604:	4604      	mov	r4, r0
 8008606:	460d      	mov	r5, r1
 8008608:	b976      	cbnz	r6, 8008628 <_Balloc+0x28>
 800860a:	2010      	movs	r0, #16
 800860c:	f7ff ffe4 	bl	80085d8 <malloc>
 8008610:	4602      	mov	r2, r0
 8008612:	6260      	str	r0, [r4, #36]	; 0x24
 8008614:	b920      	cbnz	r0, 8008620 <_Balloc+0x20>
 8008616:	4b18      	ldr	r3, [pc, #96]	; (8008678 <_Balloc+0x78>)
 8008618:	4818      	ldr	r0, [pc, #96]	; (800867c <_Balloc+0x7c>)
 800861a:	2166      	movs	r1, #102	; 0x66
 800861c:	f000 fbe8 	bl	8008df0 <__assert_func>
 8008620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008624:	6006      	str	r6, [r0, #0]
 8008626:	60c6      	str	r6, [r0, #12]
 8008628:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800862a:	68f3      	ldr	r3, [r6, #12]
 800862c:	b183      	cbz	r3, 8008650 <_Balloc+0x50>
 800862e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008636:	b9b8      	cbnz	r0, 8008668 <_Balloc+0x68>
 8008638:	2101      	movs	r1, #1
 800863a:	fa01 f605 	lsl.w	r6, r1, r5
 800863e:	1d72      	adds	r2, r6, #5
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fb60 	bl	8008d08 <_calloc_r>
 8008648:	b160      	cbz	r0, 8008664 <_Balloc+0x64>
 800864a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800864e:	e00e      	b.n	800866e <_Balloc+0x6e>
 8008650:	2221      	movs	r2, #33	; 0x21
 8008652:	2104      	movs	r1, #4
 8008654:	4620      	mov	r0, r4
 8008656:	f000 fb57 	bl	8008d08 <_calloc_r>
 800865a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800865c:	60f0      	str	r0, [r6, #12]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e4      	bne.n	800862e <_Balloc+0x2e>
 8008664:	2000      	movs	r0, #0
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	6802      	ldr	r2, [r0, #0]
 800866a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800866e:	2300      	movs	r3, #0
 8008670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008674:	e7f7      	b.n	8008666 <_Balloc+0x66>
 8008676:	bf00      	nop
 8008678:	080093ad 	.word	0x080093ad
 800867c:	08009430 	.word	0x08009430

08008680 <_Bfree>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b976      	cbnz	r6, 80086a8 <_Bfree+0x28>
 800868a:	2010      	movs	r0, #16
 800868c:	f7ff ffa4 	bl	80085d8 <malloc>
 8008690:	4602      	mov	r2, r0
 8008692:	6268      	str	r0, [r5, #36]	; 0x24
 8008694:	b920      	cbnz	r0, 80086a0 <_Bfree+0x20>
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <_Bfree+0x3c>)
 8008698:	4809      	ldr	r0, [pc, #36]	; (80086c0 <_Bfree+0x40>)
 800869a:	218a      	movs	r1, #138	; 0x8a
 800869c:	f000 fba8 	bl	8008df0 <__assert_func>
 80086a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a4:	6006      	str	r6, [r0, #0]
 80086a6:	60c6      	str	r6, [r0, #12]
 80086a8:	b13c      	cbz	r4, 80086ba <_Bfree+0x3a>
 80086aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086ac:	6862      	ldr	r2, [r4, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b4:	6021      	str	r1, [r4, #0]
 80086b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	080093ad 	.word	0x080093ad
 80086c0:	08009430 	.word	0x08009430

080086c4 <__multadd>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	690d      	ldr	r5, [r1, #16]
 80086ca:	4607      	mov	r7, r0
 80086cc:	460c      	mov	r4, r1
 80086ce:	461e      	mov	r6, r3
 80086d0:	f101 0c14 	add.w	ip, r1, #20
 80086d4:	2000      	movs	r0, #0
 80086d6:	f8dc 3000 	ldr.w	r3, [ip]
 80086da:	b299      	uxth	r1, r3
 80086dc:	fb02 6101 	mla	r1, r2, r1, r6
 80086e0:	0c1e      	lsrs	r6, r3, #16
 80086e2:	0c0b      	lsrs	r3, r1, #16
 80086e4:	fb02 3306 	mla	r3, r2, r6, r3
 80086e8:	b289      	uxth	r1, r1
 80086ea:	3001      	adds	r0, #1
 80086ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086f0:	4285      	cmp	r5, r0
 80086f2:	f84c 1b04 	str.w	r1, [ip], #4
 80086f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086fa:	dcec      	bgt.n	80086d6 <__multadd+0x12>
 80086fc:	b30e      	cbz	r6, 8008742 <__multadd+0x7e>
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	42ab      	cmp	r3, r5
 8008702:	dc19      	bgt.n	8008738 <__multadd+0x74>
 8008704:	6861      	ldr	r1, [r4, #4]
 8008706:	4638      	mov	r0, r7
 8008708:	3101      	adds	r1, #1
 800870a:	f7ff ff79 	bl	8008600 <_Balloc>
 800870e:	4680      	mov	r8, r0
 8008710:	b928      	cbnz	r0, 800871e <__multadd+0x5a>
 8008712:	4602      	mov	r2, r0
 8008714:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <__multadd+0x84>)
 8008716:	480d      	ldr	r0, [pc, #52]	; (800874c <__multadd+0x88>)
 8008718:	21b5      	movs	r1, #181	; 0xb5
 800871a:	f000 fb69 	bl	8008df0 <__assert_func>
 800871e:	6922      	ldr	r2, [r4, #16]
 8008720:	3202      	adds	r2, #2
 8008722:	f104 010c 	add.w	r1, r4, #12
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	300c      	adds	r0, #12
 800872a:	f7fe f872 	bl	8006812 <memcpy>
 800872e:	4621      	mov	r1, r4
 8008730:	4638      	mov	r0, r7
 8008732:	f7ff ffa5 	bl	8008680 <_Bfree>
 8008736:	4644      	mov	r4, r8
 8008738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800873c:	3501      	adds	r5, #1
 800873e:	615e      	str	r6, [r3, #20]
 8008740:	6125      	str	r5, [r4, #16]
 8008742:	4620      	mov	r0, r4
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008748:	0800941f 	.word	0x0800941f
 800874c:	08009430 	.word	0x08009430

08008750 <__hi0bits>:
 8008750:	0c03      	lsrs	r3, r0, #16
 8008752:	041b      	lsls	r3, r3, #16
 8008754:	b9d3      	cbnz	r3, 800878c <__hi0bits+0x3c>
 8008756:	0400      	lsls	r0, r0, #16
 8008758:	2310      	movs	r3, #16
 800875a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800875e:	bf04      	itt	eq
 8008760:	0200      	lsleq	r0, r0, #8
 8008762:	3308      	addeq	r3, #8
 8008764:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008768:	bf04      	itt	eq
 800876a:	0100      	lsleq	r0, r0, #4
 800876c:	3304      	addeq	r3, #4
 800876e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008772:	bf04      	itt	eq
 8008774:	0080      	lsleq	r0, r0, #2
 8008776:	3302      	addeq	r3, #2
 8008778:	2800      	cmp	r0, #0
 800877a:	db05      	blt.n	8008788 <__hi0bits+0x38>
 800877c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008780:	f103 0301 	add.w	r3, r3, #1
 8008784:	bf08      	it	eq
 8008786:	2320      	moveq	r3, #32
 8008788:	4618      	mov	r0, r3
 800878a:	4770      	bx	lr
 800878c:	2300      	movs	r3, #0
 800878e:	e7e4      	b.n	800875a <__hi0bits+0xa>

08008790 <__lo0bits>:
 8008790:	6803      	ldr	r3, [r0, #0]
 8008792:	f013 0207 	ands.w	r2, r3, #7
 8008796:	4601      	mov	r1, r0
 8008798:	d00b      	beq.n	80087b2 <__lo0bits+0x22>
 800879a:	07da      	lsls	r2, r3, #31
 800879c:	d423      	bmi.n	80087e6 <__lo0bits+0x56>
 800879e:	0798      	lsls	r0, r3, #30
 80087a0:	bf49      	itett	mi
 80087a2:	085b      	lsrmi	r3, r3, #1
 80087a4:	089b      	lsrpl	r3, r3, #2
 80087a6:	2001      	movmi	r0, #1
 80087a8:	600b      	strmi	r3, [r1, #0]
 80087aa:	bf5c      	itt	pl
 80087ac:	600b      	strpl	r3, [r1, #0]
 80087ae:	2002      	movpl	r0, #2
 80087b0:	4770      	bx	lr
 80087b2:	b298      	uxth	r0, r3
 80087b4:	b9a8      	cbnz	r0, 80087e2 <__lo0bits+0x52>
 80087b6:	0c1b      	lsrs	r3, r3, #16
 80087b8:	2010      	movs	r0, #16
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	b90a      	cbnz	r2, 80087c2 <__lo0bits+0x32>
 80087be:	3008      	adds	r0, #8
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	071a      	lsls	r2, r3, #28
 80087c4:	bf04      	itt	eq
 80087c6:	091b      	lsreq	r3, r3, #4
 80087c8:	3004      	addeq	r0, #4
 80087ca:	079a      	lsls	r2, r3, #30
 80087cc:	bf04      	itt	eq
 80087ce:	089b      	lsreq	r3, r3, #2
 80087d0:	3002      	addeq	r0, #2
 80087d2:	07da      	lsls	r2, r3, #31
 80087d4:	d403      	bmi.n	80087de <__lo0bits+0x4e>
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	f100 0001 	add.w	r0, r0, #1
 80087dc:	d005      	beq.n	80087ea <__lo0bits+0x5a>
 80087de:	600b      	str	r3, [r1, #0]
 80087e0:	4770      	bx	lr
 80087e2:	4610      	mov	r0, r2
 80087e4:	e7e9      	b.n	80087ba <__lo0bits+0x2a>
 80087e6:	2000      	movs	r0, #0
 80087e8:	4770      	bx	lr
 80087ea:	2020      	movs	r0, #32
 80087ec:	4770      	bx	lr
	...

080087f0 <__i2b>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	460c      	mov	r4, r1
 80087f4:	2101      	movs	r1, #1
 80087f6:	f7ff ff03 	bl	8008600 <_Balloc>
 80087fa:	4602      	mov	r2, r0
 80087fc:	b928      	cbnz	r0, 800880a <__i2b+0x1a>
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <__i2b+0x24>)
 8008800:	4805      	ldr	r0, [pc, #20]	; (8008818 <__i2b+0x28>)
 8008802:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008806:	f000 faf3 	bl	8008df0 <__assert_func>
 800880a:	2301      	movs	r3, #1
 800880c:	6144      	str	r4, [r0, #20]
 800880e:	6103      	str	r3, [r0, #16]
 8008810:	bd10      	pop	{r4, pc}
 8008812:	bf00      	nop
 8008814:	0800941f 	.word	0x0800941f
 8008818:	08009430 	.word	0x08009430

0800881c <__multiply>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	4691      	mov	r9, r2
 8008822:	690a      	ldr	r2, [r1, #16]
 8008824:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	bfb8      	it	lt
 800882c:	460b      	movlt	r3, r1
 800882e:	460c      	mov	r4, r1
 8008830:	bfbc      	itt	lt
 8008832:	464c      	movlt	r4, r9
 8008834:	4699      	movlt	r9, r3
 8008836:	6927      	ldr	r7, [r4, #16]
 8008838:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	6861      	ldr	r1, [r4, #4]
 8008840:	eb07 060a 	add.w	r6, r7, sl
 8008844:	42b3      	cmp	r3, r6
 8008846:	b085      	sub	sp, #20
 8008848:	bfb8      	it	lt
 800884a:	3101      	addlt	r1, #1
 800884c:	f7ff fed8 	bl	8008600 <_Balloc>
 8008850:	b930      	cbnz	r0, 8008860 <__multiply+0x44>
 8008852:	4602      	mov	r2, r0
 8008854:	4b44      	ldr	r3, [pc, #272]	; (8008968 <__multiply+0x14c>)
 8008856:	4845      	ldr	r0, [pc, #276]	; (800896c <__multiply+0x150>)
 8008858:	f240 115d 	movw	r1, #349	; 0x15d
 800885c:	f000 fac8 	bl	8008df0 <__assert_func>
 8008860:	f100 0514 	add.w	r5, r0, #20
 8008864:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008868:	462b      	mov	r3, r5
 800886a:	2200      	movs	r2, #0
 800886c:	4543      	cmp	r3, r8
 800886e:	d321      	bcc.n	80088b4 <__multiply+0x98>
 8008870:	f104 0314 	add.w	r3, r4, #20
 8008874:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008878:	f109 0314 	add.w	r3, r9, #20
 800887c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008880:	9202      	str	r2, [sp, #8]
 8008882:	1b3a      	subs	r2, r7, r4
 8008884:	3a15      	subs	r2, #21
 8008886:	f022 0203 	bic.w	r2, r2, #3
 800888a:	3204      	adds	r2, #4
 800888c:	f104 0115 	add.w	r1, r4, #21
 8008890:	428f      	cmp	r7, r1
 8008892:	bf38      	it	cc
 8008894:	2204      	movcc	r2, #4
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	9a02      	ldr	r2, [sp, #8]
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	429a      	cmp	r2, r3
 800889e:	d80c      	bhi.n	80088ba <__multiply+0x9e>
 80088a0:	2e00      	cmp	r6, #0
 80088a2:	dd03      	ble.n	80088ac <__multiply+0x90>
 80088a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d05a      	beq.n	8008962 <__multiply+0x146>
 80088ac:	6106      	str	r6, [r0, #16]
 80088ae:	b005      	add	sp, #20
 80088b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b4:	f843 2b04 	str.w	r2, [r3], #4
 80088b8:	e7d8      	b.n	800886c <__multiply+0x50>
 80088ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80088be:	f1ba 0f00 	cmp.w	sl, #0
 80088c2:	d024      	beq.n	800890e <__multiply+0xf2>
 80088c4:	f104 0e14 	add.w	lr, r4, #20
 80088c8:	46a9      	mov	r9, r5
 80088ca:	f04f 0c00 	mov.w	ip, #0
 80088ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088d2:	f8d9 1000 	ldr.w	r1, [r9]
 80088d6:	fa1f fb82 	uxth.w	fp, r2
 80088da:	b289      	uxth	r1, r1
 80088dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80088e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088e4:	f8d9 2000 	ldr.w	r2, [r9]
 80088e8:	4461      	add	r1, ip
 80088ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80088f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088f6:	b289      	uxth	r1, r1
 80088f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088fc:	4577      	cmp	r7, lr
 80088fe:	f849 1b04 	str.w	r1, [r9], #4
 8008902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008906:	d8e2      	bhi.n	80088ce <__multiply+0xb2>
 8008908:	9a01      	ldr	r2, [sp, #4]
 800890a:	f845 c002 	str.w	ip, [r5, r2]
 800890e:	9a03      	ldr	r2, [sp, #12]
 8008910:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008914:	3304      	adds	r3, #4
 8008916:	f1b9 0f00 	cmp.w	r9, #0
 800891a:	d020      	beq.n	800895e <__multiply+0x142>
 800891c:	6829      	ldr	r1, [r5, #0]
 800891e:	f104 0c14 	add.w	ip, r4, #20
 8008922:	46ae      	mov	lr, r5
 8008924:	f04f 0a00 	mov.w	sl, #0
 8008928:	f8bc b000 	ldrh.w	fp, [ip]
 800892c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008930:	fb09 220b 	mla	r2, r9, fp, r2
 8008934:	4492      	add	sl, r2
 8008936:	b289      	uxth	r1, r1
 8008938:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800893c:	f84e 1b04 	str.w	r1, [lr], #4
 8008940:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008944:	f8be 1000 	ldrh.w	r1, [lr]
 8008948:	0c12      	lsrs	r2, r2, #16
 800894a:	fb09 1102 	mla	r1, r9, r2, r1
 800894e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008952:	4567      	cmp	r7, ip
 8008954:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008958:	d8e6      	bhi.n	8008928 <__multiply+0x10c>
 800895a:	9a01      	ldr	r2, [sp, #4]
 800895c:	50a9      	str	r1, [r5, r2]
 800895e:	3504      	adds	r5, #4
 8008960:	e79a      	b.n	8008898 <__multiply+0x7c>
 8008962:	3e01      	subs	r6, #1
 8008964:	e79c      	b.n	80088a0 <__multiply+0x84>
 8008966:	bf00      	nop
 8008968:	0800941f 	.word	0x0800941f
 800896c:	08009430 	.word	0x08009430

08008970 <__pow5mult>:
 8008970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008974:	4615      	mov	r5, r2
 8008976:	f012 0203 	ands.w	r2, r2, #3
 800897a:	4606      	mov	r6, r0
 800897c:	460f      	mov	r7, r1
 800897e:	d007      	beq.n	8008990 <__pow5mult+0x20>
 8008980:	4c25      	ldr	r4, [pc, #148]	; (8008a18 <__pow5mult+0xa8>)
 8008982:	3a01      	subs	r2, #1
 8008984:	2300      	movs	r3, #0
 8008986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800898a:	f7ff fe9b 	bl	80086c4 <__multadd>
 800898e:	4607      	mov	r7, r0
 8008990:	10ad      	asrs	r5, r5, #2
 8008992:	d03d      	beq.n	8008a10 <__pow5mult+0xa0>
 8008994:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008996:	b97c      	cbnz	r4, 80089b8 <__pow5mult+0x48>
 8008998:	2010      	movs	r0, #16
 800899a:	f7ff fe1d 	bl	80085d8 <malloc>
 800899e:	4602      	mov	r2, r0
 80089a0:	6270      	str	r0, [r6, #36]	; 0x24
 80089a2:	b928      	cbnz	r0, 80089b0 <__pow5mult+0x40>
 80089a4:	4b1d      	ldr	r3, [pc, #116]	; (8008a1c <__pow5mult+0xac>)
 80089a6:	481e      	ldr	r0, [pc, #120]	; (8008a20 <__pow5mult+0xb0>)
 80089a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089ac:	f000 fa20 	bl	8008df0 <__assert_func>
 80089b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089b4:	6004      	str	r4, [r0, #0]
 80089b6:	60c4      	str	r4, [r0, #12]
 80089b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089c0:	b94c      	cbnz	r4, 80089d6 <__pow5mult+0x66>
 80089c2:	f240 2171 	movw	r1, #625	; 0x271
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff ff12 	bl	80087f0 <__i2b>
 80089cc:	2300      	movs	r3, #0
 80089ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80089d2:	4604      	mov	r4, r0
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	f04f 0900 	mov.w	r9, #0
 80089da:	07eb      	lsls	r3, r5, #31
 80089dc:	d50a      	bpl.n	80089f4 <__pow5mult+0x84>
 80089de:	4639      	mov	r1, r7
 80089e0:	4622      	mov	r2, r4
 80089e2:	4630      	mov	r0, r6
 80089e4:	f7ff ff1a 	bl	800881c <__multiply>
 80089e8:	4639      	mov	r1, r7
 80089ea:	4680      	mov	r8, r0
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff fe47 	bl	8008680 <_Bfree>
 80089f2:	4647      	mov	r7, r8
 80089f4:	106d      	asrs	r5, r5, #1
 80089f6:	d00b      	beq.n	8008a10 <__pow5mult+0xa0>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	b938      	cbnz	r0, 8008a0c <__pow5mult+0x9c>
 80089fc:	4622      	mov	r2, r4
 80089fe:	4621      	mov	r1, r4
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff ff0b 	bl	800881c <__multiply>
 8008a06:	6020      	str	r0, [r4, #0]
 8008a08:	f8c0 9000 	str.w	r9, [r0]
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	e7e4      	b.n	80089da <__pow5mult+0x6a>
 8008a10:	4638      	mov	r0, r7
 8008a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a16:	bf00      	nop
 8008a18:	08009580 	.word	0x08009580
 8008a1c:	080093ad 	.word	0x080093ad
 8008a20:	08009430 	.word	0x08009430

08008a24 <__lshift>:
 8008a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	460c      	mov	r4, r1
 8008a2a:	6849      	ldr	r1, [r1, #4]
 8008a2c:	6923      	ldr	r3, [r4, #16]
 8008a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	4607      	mov	r7, r0
 8008a36:	4691      	mov	r9, r2
 8008a38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a3c:	f108 0601 	add.w	r6, r8, #1
 8008a40:	42b3      	cmp	r3, r6
 8008a42:	db0b      	blt.n	8008a5c <__lshift+0x38>
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff fddb 	bl	8008600 <_Balloc>
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	b948      	cbnz	r0, 8008a62 <__lshift+0x3e>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	4b2a      	ldr	r3, [pc, #168]	; (8008afc <__lshift+0xd8>)
 8008a52:	482b      	ldr	r0, [pc, #172]	; (8008b00 <__lshift+0xdc>)
 8008a54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a58:	f000 f9ca 	bl	8008df0 <__assert_func>
 8008a5c:	3101      	adds	r1, #1
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	e7ee      	b.n	8008a40 <__lshift+0x1c>
 8008a62:	2300      	movs	r3, #0
 8008a64:	f100 0114 	add.w	r1, r0, #20
 8008a68:	f100 0210 	add.w	r2, r0, #16
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	4553      	cmp	r3, sl
 8008a70:	db37      	blt.n	8008ae2 <__lshift+0xbe>
 8008a72:	6920      	ldr	r0, [r4, #16]
 8008a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a78:	f104 0314 	add.w	r3, r4, #20
 8008a7c:	f019 091f 	ands.w	r9, r9, #31
 8008a80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a88:	d02f      	beq.n	8008aea <__lshift+0xc6>
 8008a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a8e:	468a      	mov	sl, r1
 8008a90:	f04f 0c00 	mov.w	ip, #0
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	fa02 f209 	lsl.w	r2, r2, r9
 8008a9a:	ea42 020c 	orr.w	r2, r2, ip
 8008a9e:	f84a 2b04 	str.w	r2, [sl], #4
 8008aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa6:	4298      	cmp	r0, r3
 8008aa8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008aac:	d8f2      	bhi.n	8008a94 <__lshift+0x70>
 8008aae:	1b03      	subs	r3, r0, r4
 8008ab0:	3b15      	subs	r3, #21
 8008ab2:	f023 0303 	bic.w	r3, r3, #3
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	f104 0215 	add.w	r2, r4, #21
 8008abc:	4290      	cmp	r0, r2
 8008abe:	bf38      	it	cc
 8008ac0:	2304      	movcc	r3, #4
 8008ac2:	f841 c003 	str.w	ip, [r1, r3]
 8008ac6:	f1bc 0f00 	cmp.w	ip, #0
 8008aca:	d001      	beq.n	8008ad0 <__lshift+0xac>
 8008acc:	f108 0602 	add.w	r6, r8, #2
 8008ad0:	3e01      	subs	r6, #1
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	612e      	str	r6, [r5, #16]
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	f7ff fdd2 	bl	8008680 <_Bfree>
 8008adc:	4628      	mov	r0, r5
 8008ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	e7c1      	b.n	8008a6e <__lshift+0x4a>
 8008aea:	3904      	subs	r1, #4
 8008aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008af4:	4298      	cmp	r0, r3
 8008af6:	d8f9      	bhi.n	8008aec <__lshift+0xc8>
 8008af8:	e7ea      	b.n	8008ad0 <__lshift+0xac>
 8008afa:	bf00      	nop
 8008afc:	0800941f 	.word	0x0800941f
 8008b00:	08009430 	.word	0x08009430

08008b04 <__mcmp>:
 8008b04:	b530      	push	{r4, r5, lr}
 8008b06:	6902      	ldr	r2, [r0, #16]
 8008b08:	690c      	ldr	r4, [r1, #16]
 8008b0a:	1b12      	subs	r2, r2, r4
 8008b0c:	d10e      	bne.n	8008b2c <__mcmp+0x28>
 8008b0e:	f100 0314 	add.w	r3, r0, #20
 8008b12:	3114      	adds	r1, #20
 8008b14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b24:	42a5      	cmp	r5, r4
 8008b26:	d003      	beq.n	8008b30 <__mcmp+0x2c>
 8008b28:	d305      	bcc.n	8008b36 <__mcmp+0x32>
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	bd30      	pop	{r4, r5, pc}
 8008b30:	4283      	cmp	r3, r0
 8008b32:	d3f3      	bcc.n	8008b1c <__mcmp+0x18>
 8008b34:	e7fa      	b.n	8008b2c <__mcmp+0x28>
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b3a:	e7f7      	b.n	8008b2c <__mcmp+0x28>

08008b3c <__mdiff>:
 8008b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	460c      	mov	r4, r1
 8008b42:	4606      	mov	r6, r0
 8008b44:	4611      	mov	r1, r2
 8008b46:	4620      	mov	r0, r4
 8008b48:	4690      	mov	r8, r2
 8008b4a:	f7ff ffdb 	bl	8008b04 <__mcmp>
 8008b4e:	1e05      	subs	r5, r0, #0
 8008b50:	d110      	bne.n	8008b74 <__mdiff+0x38>
 8008b52:	4629      	mov	r1, r5
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7ff fd53 	bl	8008600 <_Balloc>
 8008b5a:	b930      	cbnz	r0, 8008b6a <__mdiff+0x2e>
 8008b5c:	4b3a      	ldr	r3, [pc, #232]	; (8008c48 <__mdiff+0x10c>)
 8008b5e:	4602      	mov	r2, r0
 8008b60:	f240 2132 	movw	r1, #562	; 0x232
 8008b64:	4839      	ldr	r0, [pc, #228]	; (8008c4c <__mdiff+0x110>)
 8008b66:	f000 f943 	bl	8008df0 <__assert_func>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b74:	bfa4      	itt	ge
 8008b76:	4643      	movge	r3, r8
 8008b78:	46a0      	movge	r8, r4
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b80:	bfa6      	itte	ge
 8008b82:	461c      	movge	r4, r3
 8008b84:	2500      	movge	r5, #0
 8008b86:	2501      	movlt	r5, #1
 8008b88:	f7ff fd3a 	bl	8008600 <_Balloc>
 8008b8c:	b920      	cbnz	r0, 8008b98 <__mdiff+0x5c>
 8008b8e:	4b2e      	ldr	r3, [pc, #184]	; (8008c48 <__mdiff+0x10c>)
 8008b90:	4602      	mov	r2, r0
 8008b92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b96:	e7e5      	b.n	8008b64 <__mdiff+0x28>
 8008b98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b9c:	6926      	ldr	r6, [r4, #16]
 8008b9e:	60c5      	str	r5, [r0, #12]
 8008ba0:	f104 0914 	add.w	r9, r4, #20
 8008ba4:	f108 0514 	add.w	r5, r8, #20
 8008ba8:	f100 0e14 	add.w	lr, r0, #20
 8008bac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bb4:	f108 0210 	add.w	r2, r8, #16
 8008bb8:	46f2      	mov	sl, lr
 8008bba:	2100      	movs	r1, #0
 8008bbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bc4:	fa1f f883 	uxth.w	r8, r3
 8008bc8:	fa11 f18b 	uxtah	r1, r1, fp
 8008bcc:	0c1b      	lsrs	r3, r3, #16
 8008bce:	eba1 0808 	sub.w	r8, r1, r8
 8008bd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bda:	fa1f f888 	uxth.w	r8, r8
 8008bde:	1419      	asrs	r1, r3, #16
 8008be0:	454e      	cmp	r6, r9
 8008be2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008be6:	f84a 3b04 	str.w	r3, [sl], #4
 8008bea:	d8e7      	bhi.n	8008bbc <__mdiff+0x80>
 8008bec:	1b33      	subs	r3, r6, r4
 8008bee:	3b15      	subs	r3, #21
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	3415      	adds	r4, #21
 8008bf8:	42a6      	cmp	r6, r4
 8008bfa:	bf38      	it	cc
 8008bfc:	2304      	movcc	r3, #4
 8008bfe:	441d      	add	r5, r3
 8008c00:	4473      	add	r3, lr
 8008c02:	469e      	mov	lr, r3
 8008c04:	462e      	mov	r6, r5
 8008c06:	4566      	cmp	r6, ip
 8008c08:	d30e      	bcc.n	8008c28 <__mdiff+0xec>
 8008c0a:	f10c 0203 	add.w	r2, ip, #3
 8008c0e:	1b52      	subs	r2, r2, r5
 8008c10:	f022 0203 	bic.w	r2, r2, #3
 8008c14:	3d03      	subs	r5, #3
 8008c16:	45ac      	cmp	ip, r5
 8008c18:	bf38      	it	cc
 8008c1a:	2200      	movcc	r2, #0
 8008c1c:	441a      	add	r2, r3
 8008c1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c22:	b17b      	cbz	r3, 8008c44 <__mdiff+0x108>
 8008c24:	6107      	str	r7, [r0, #16]
 8008c26:	e7a3      	b.n	8008b70 <__mdiff+0x34>
 8008c28:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c2c:	fa11 f288 	uxtah	r2, r1, r8
 8008c30:	1414      	asrs	r4, r2, #16
 8008c32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c36:	b292      	uxth	r2, r2
 8008c38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c3c:	f84e 2b04 	str.w	r2, [lr], #4
 8008c40:	1421      	asrs	r1, r4, #16
 8008c42:	e7e0      	b.n	8008c06 <__mdiff+0xca>
 8008c44:	3f01      	subs	r7, #1
 8008c46:	e7ea      	b.n	8008c1e <__mdiff+0xe2>
 8008c48:	0800941f 	.word	0x0800941f
 8008c4c:	08009430 	.word	0x08009430

08008c50 <__d2b>:
 8008c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c54:	4689      	mov	r9, r1
 8008c56:	2101      	movs	r1, #1
 8008c58:	ec57 6b10 	vmov	r6, r7, d0
 8008c5c:	4690      	mov	r8, r2
 8008c5e:	f7ff fccf 	bl	8008600 <_Balloc>
 8008c62:	4604      	mov	r4, r0
 8008c64:	b930      	cbnz	r0, 8008c74 <__d2b+0x24>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b25      	ldr	r3, [pc, #148]	; (8008d00 <__d2b+0xb0>)
 8008c6a:	4826      	ldr	r0, [pc, #152]	; (8008d04 <__d2b+0xb4>)
 8008c6c:	f240 310a 	movw	r1, #778	; 0x30a
 8008c70:	f000 f8be 	bl	8008df0 <__assert_func>
 8008c74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c7c:	bb35      	cbnz	r5, 8008ccc <__d2b+0x7c>
 8008c7e:	2e00      	cmp	r6, #0
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	d028      	beq.n	8008cd6 <__d2b+0x86>
 8008c84:	4668      	mov	r0, sp
 8008c86:	9600      	str	r6, [sp, #0]
 8008c88:	f7ff fd82 	bl	8008790 <__lo0bits>
 8008c8c:	9900      	ldr	r1, [sp, #0]
 8008c8e:	b300      	cbz	r0, 8008cd2 <__d2b+0x82>
 8008c90:	9a01      	ldr	r2, [sp, #4]
 8008c92:	f1c0 0320 	rsb	r3, r0, #32
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	40c2      	lsrs	r2, r0
 8008c9e:	6163      	str	r3, [r4, #20]
 8008ca0:	9201      	str	r2, [sp, #4]
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	61a3      	str	r3, [r4, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bf14      	ite	ne
 8008caa:	2202      	movne	r2, #2
 8008cac:	2201      	moveq	r2, #1
 8008cae:	6122      	str	r2, [r4, #16]
 8008cb0:	b1d5      	cbz	r5, 8008ce8 <__d2b+0x98>
 8008cb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cb6:	4405      	add	r5, r0
 8008cb8:	f8c9 5000 	str.w	r5, [r9]
 8008cbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cc0:	f8c8 0000 	str.w	r0, [r8]
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	b003      	add	sp, #12
 8008cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cd0:	e7d5      	b.n	8008c7e <__d2b+0x2e>
 8008cd2:	6161      	str	r1, [r4, #20]
 8008cd4:	e7e5      	b.n	8008ca2 <__d2b+0x52>
 8008cd6:	a801      	add	r0, sp, #4
 8008cd8:	f7ff fd5a 	bl	8008790 <__lo0bits>
 8008cdc:	9b01      	ldr	r3, [sp, #4]
 8008cde:	6163      	str	r3, [r4, #20]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	6122      	str	r2, [r4, #16]
 8008ce4:	3020      	adds	r0, #32
 8008ce6:	e7e3      	b.n	8008cb0 <__d2b+0x60>
 8008ce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cf0:	f8c9 0000 	str.w	r0, [r9]
 8008cf4:	6918      	ldr	r0, [r3, #16]
 8008cf6:	f7ff fd2b 	bl	8008750 <__hi0bits>
 8008cfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cfe:	e7df      	b.n	8008cc0 <__d2b+0x70>
 8008d00:	0800941f 	.word	0x0800941f
 8008d04:	08009430 	.word	0x08009430

08008d08 <_calloc_r>:
 8008d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d0a:	fba1 2402 	umull	r2, r4, r1, r2
 8008d0e:	b94c      	cbnz	r4, 8008d24 <_calloc_r+0x1c>
 8008d10:	4611      	mov	r1, r2
 8008d12:	9201      	str	r2, [sp, #4]
 8008d14:	f7fd fdb4 	bl	8006880 <_malloc_r>
 8008d18:	9a01      	ldr	r2, [sp, #4]
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	b930      	cbnz	r0, 8008d2c <_calloc_r+0x24>
 8008d1e:	4628      	mov	r0, r5
 8008d20:	b003      	add	sp, #12
 8008d22:	bd30      	pop	{r4, r5, pc}
 8008d24:	220c      	movs	r2, #12
 8008d26:	6002      	str	r2, [r0, #0]
 8008d28:	2500      	movs	r5, #0
 8008d2a:	e7f8      	b.n	8008d1e <_calloc_r+0x16>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f7fd fd7e 	bl	800682e <memset>
 8008d32:	e7f4      	b.n	8008d1e <_calloc_r+0x16>

08008d34 <_free_r>:
 8008d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d044      	beq.n	8008dc4 <_free_r+0x90>
 8008d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3e:	9001      	str	r0, [sp, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f1a1 0404 	sub.w	r4, r1, #4
 8008d46:	bfb8      	it	lt
 8008d48:	18e4      	addlt	r4, r4, r3
 8008d4a:	f7ff fc4d 	bl	80085e8 <__malloc_lock>
 8008d4e:	4a1e      	ldr	r2, [pc, #120]	; (8008dc8 <_free_r+0x94>)
 8008d50:	9801      	ldr	r0, [sp, #4]
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x30>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	b003      	add	sp, #12
 8008d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d60:	f7ff bc48 	b.w	80085f4 <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x46>
 8008d68:	6825      	ldr	r5, [r4, #0]
 8008d6a:	1961      	adds	r1, r4, r5
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1949      	addeq	r1, r1, r5
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x22>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x50>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x46>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1855      	adds	r5, r2, r1
 8008d88:	42a5      	cmp	r5, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x70>
 8008d8c:	6824      	ldr	r4, [r4, #0]
 8008d8e:	4421      	add	r1, r4
 8008d90:	1854      	adds	r4, r2, r1
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x26>
 8008d98:	681c      	ldr	r4, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6053      	str	r3, [r2, #4]
 8008d9e:	4421      	add	r1, r4
 8008da0:	6011      	str	r1, [r2, #0]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x26>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x78>
 8008da6:	230c      	movs	r3, #12
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x26>
 8008dac:	6825      	ldr	r5, [r4, #0]
 8008dae:	1961      	adds	r1, r4, r5
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf04      	itt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	bf04      	itt	eq
 8008dbc:	1949      	addeq	r1, r1, r5
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	6054      	str	r4, [r2, #4]
 8008dc2:	e7ca      	b.n	8008d5a <_free_r+0x26>
 8008dc4:	b003      	add	sp, #12
 8008dc6:	bd30      	pop	{r4, r5, pc}
 8008dc8:	20001cec 	.word	0x20001cec

08008dcc <_read_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d07      	ldr	r5, [pc, #28]	; (8008dec <_read_r+0x20>)
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	602a      	str	r2, [r5, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f7f8 f99a 	bl	8001114 <_read>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_read_r+0x1e>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_read_r+0x1e>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	20001cf4 	.word	0x20001cf4

08008df0 <__assert_func>:
 8008df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008df2:	4614      	mov	r4, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <__assert_func+0x2c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	68d8      	ldr	r0, [r3, #12]
 8008dfe:	b14c      	cbz	r4, 8008e14 <__assert_func+0x24>
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <__assert_func+0x30>)
 8008e02:	9100      	str	r1, [sp, #0]
 8008e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e08:	4906      	ldr	r1, [pc, #24]	; (8008e24 <__assert_func+0x34>)
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	f000 f80e 	bl	8008e2c <fiprintf>
 8008e10:	f000 f9b9 	bl	8009186 <abort>
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <__assert_func+0x38>)
 8008e16:	461c      	mov	r4, r3
 8008e18:	e7f3      	b.n	8008e02 <__assert_func+0x12>
 8008e1a:	bf00      	nop
 8008e1c:	20000010 	.word	0x20000010
 8008e20:	0800958c 	.word	0x0800958c
 8008e24:	08009599 	.word	0x08009599
 8008e28:	080095c7 	.word	0x080095c7

08008e2c <fiprintf>:
 8008e2c:	b40e      	push	{r1, r2, r3}
 8008e2e:	b503      	push	{r0, r1, lr}
 8008e30:	4601      	mov	r1, r0
 8008e32:	ab03      	add	r3, sp, #12
 8008e34:	4805      	ldr	r0, [pc, #20]	; (8008e4c <fiprintf+0x20>)
 8008e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	f000 f865 	bl	8008f0c <_vfiprintf_r>
 8008e42:	b002      	add	sp, #8
 8008e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e48:	b003      	add	sp, #12
 8008e4a:	4770      	bx	lr
 8008e4c:	20000010 	.word	0x20000010

08008e50 <_fstat_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d07      	ldr	r5, [pc, #28]	; (8008e70 <_fstat_r+0x20>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	f7f8 f99e 	bl	800119e <_fstat>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d102      	bne.n	8008e6c <_fstat_r+0x1c>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	b103      	cbz	r3, 8008e6c <_fstat_r+0x1c>
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	bd38      	pop	{r3, r4, r5, pc}
 8008e6e:	bf00      	nop
 8008e70:	20001cf4 	.word	0x20001cf4

08008e74 <_isatty_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d06      	ldr	r5, [pc, #24]	; (8008e90 <_isatty_r+0x1c>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f8 f99d 	bl	80011be <_isatty>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_isatty_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_isatty_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	20001cf4 	.word	0x20001cf4

08008e94 <__ascii_mbtowc>:
 8008e94:	b082      	sub	sp, #8
 8008e96:	b901      	cbnz	r1, 8008e9a <__ascii_mbtowc+0x6>
 8008e98:	a901      	add	r1, sp, #4
 8008e9a:	b142      	cbz	r2, 8008eae <__ascii_mbtowc+0x1a>
 8008e9c:	b14b      	cbz	r3, 8008eb2 <__ascii_mbtowc+0x1e>
 8008e9e:	7813      	ldrb	r3, [r2, #0]
 8008ea0:	600b      	str	r3, [r1, #0]
 8008ea2:	7812      	ldrb	r2, [r2, #0]
 8008ea4:	1e10      	subs	r0, r2, #0
 8008ea6:	bf18      	it	ne
 8008ea8:	2001      	movne	r0, #1
 8008eaa:	b002      	add	sp, #8
 8008eac:	4770      	bx	lr
 8008eae:	4610      	mov	r0, r2
 8008eb0:	e7fb      	b.n	8008eaa <__ascii_mbtowc+0x16>
 8008eb2:	f06f 0001 	mvn.w	r0, #1
 8008eb6:	e7f8      	b.n	8008eaa <__ascii_mbtowc+0x16>

08008eb8 <__sfputc_r>:
 8008eb8:	6893      	ldr	r3, [r2, #8]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	b410      	push	{r4}
 8008ec0:	6093      	str	r3, [r2, #8]
 8008ec2:	da08      	bge.n	8008ed6 <__sfputc_r+0x1e>
 8008ec4:	6994      	ldr	r4, [r2, #24]
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	db01      	blt.n	8008ece <__sfputc_r+0x16>
 8008eca:	290a      	cmp	r1, #10
 8008ecc:	d103      	bne.n	8008ed6 <__sfputc_r+0x1e>
 8008ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed2:	f7fe bae7 	b.w	80074a4 <__swbuf_r>
 8008ed6:	6813      	ldr	r3, [r2, #0]
 8008ed8:	1c58      	adds	r0, r3, #1
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	7019      	strb	r1, [r3, #0]
 8008ede:	4608      	mov	r0, r1
 8008ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <__sfputs_r>:
 8008ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	18d5      	adds	r5, r2, r3
 8008ef0:	42ac      	cmp	r4, r5
 8008ef2:	d101      	bne.n	8008ef8 <__sfputs_r+0x12>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e007      	b.n	8008f08 <__sfputs_r+0x22>
 8008ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efc:	463a      	mov	r2, r7
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ffda 	bl	8008eb8 <__sfputc_r>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d1f3      	bne.n	8008ef0 <__sfputs_r+0xa>
 8008f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f0c <_vfiprintf_r>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	460d      	mov	r5, r1
 8008f12:	b09d      	sub	sp, #116	; 0x74
 8008f14:	4614      	mov	r4, r2
 8008f16:	4698      	mov	r8, r3
 8008f18:	4606      	mov	r6, r0
 8008f1a:	b118      	cbz	r0, 8008f24 <_vfiprintf_r+0x18>
 8008f1c:	6983      	ldr	r3, [r0, #24]
 8008f1e:	b90b      	cbnz	r3, 8008f24 <_vfiprintf_r+0x18>
 8008f20:	f7fd fbb2 	bl	8006688 <__sinit>
 8008f24:	4b89      	ldr	r3, [pc, #548]	; (800914c <_vfiprintf_r+0x240>)
 8008f26:	429d      	cmp	r5, r3
 8008f28:	d11b      	bne.n	8008f62 <_vfiprintf_r+0x56>
 8008f2a:	6875      	ldr	r5, [r6, #4]
 8008f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2e:	07d9      	lsls	r1, r3, #31
 8008f30:	d405      	bmi.n	8008f3e <_vfiprintf_r+0x32>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	059a      	lsls	r2, r3, #22
 8008f36:	d402      	bmi.n	8008f3e <_vfiprintf_r+0x32>
 8008f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f3a:	f7fd fc68 	bl	800680e <__retarget_lock_acquire_recursive>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	071b      	lsls	r3, r3, #28
 8008f42:	d501      	bpl.n	8008f48 <_vfiprintf_r+0x3c>
 8008f44:	692b      	ldr	r3, [r5, #16]
 8008f46:	b9eb      	cbnz	r3, 8008f84 <_vfiprintf_r+0x78>
 8008f48:	4629      	mov	r1, r5
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f7fe fb0e 	bl	800756c <__swsetup_r>
 8008f50:	b1c0      	cbz	r0, 8008f84 <_vfiprintf_r+0x78>
 8008f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f54:	07dc      	lsls	r4, r3, #31
 8008f56:	d50e      	bpl.n	8008f76 <_vfiprintf_r+0x6a>
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f5c:	b01d      	add	sp, #116	; 0x74
 8008f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f62:	4b7b      	ldr	r3, [pc, #492]	; (8009150 <_vfiprintf_r+0x244>)
 8008f64:	429d      	cmp	r5, r3
 8008f66:	d101      	bne.n	8008f6c <_vfiprintf_r+0x60>
 8008f68:	68b5      	ldr	r5, [r6, #8]
 8008f6a:	e7df      	b.n	8008f2c <_vfiprintf_r+0x20>
 8008f6c:	4b79      	ldr	r3, [pc, #484]	; (8009154 <_vfiprintf_r+0x248>)
 8008f6e:	429d      	cmp	r5, r3
 8008f70:	bf08      	it	eq
 8008f72:	68f5      	ldreq	r5, [r6, #12]
 8008f74:	e7da      	b.n	8008f2c <_vfiprintf_r+0x20>
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	0598      	lsls	r0, r3, #22
 8008f7a:	d4ed      	bmi.n	8008f58 <_vfiprintf_r+0x4c>
 8008f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f7e:	f7fd fc47 	bl	8006810 <__retarget_lock_release_recursive>
 8008f82:	e7e9      	b.n	8008f58 <_vfiprintf_r+0x4c>
 8008f84:	2300      	movs	r3, #0
 8008f86:	9309      	str	r3, [sp, #36]	; 0x24
 8008f88:	2320      	movs	r3, #32
 8008f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f92:	2330      	movs	r3, #48	; 0x30
 8008f94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009158 <_vfiprintf_r+0x24c>
 8008f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f9c:	f04f 0901 	mov.w	r9, #1
 8008fa0:	4623      	mov	r3, r4
 8008fa2:	469a      	mov	sl, r3
 8008fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa8:	b10a      	cbz	r2, 8008fae <_vfiprintf_r+0xa2>
 8008faa:	2a25      	cmp	r2, #37	; 0x25
 8008fac:	d1f9      	bne.n	8008fa2 <_vfiprintf_r+0x96>
 8008fae:	ebba 0b04 	subs.w	fp, sl, r4
 8008fb2:	d00b      	beq.n	8008fcc <_vfiprintf_r+0xc0>
 8008fb4:	465b      	mov	r3, fp
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7ff ff93 	bl	8008ee6 <__sfputs_r>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f000 80aa 	beq.w	800911a <_vfiprintf_r+0x20e>
 8008fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc8:	445a      	add	r2, fp
 8008fca:	9209      	str	r2, [sp, #36]	; 0x24
 8008fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80a2 	beq.w	800911a <_vfiprintf_r+0x20e>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fe0:	f10a 0a01 	add.w	sl, sl, #1
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	9307      	str	r3, [sp, #28]
 8008fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fec:	931a      	str	r3, [sp, #104]	; 0x68
 8008fee:	4654      	mov	r4, sl
 8008ff0:	2205      	movs	r2, #5
 8008ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff6:	4858      	ldr	r0, [pc, #352]	; (8009158 <_vfiprintf_r+0x24c>)
 8008ff8:	f7f7 f8f2 	bl	80001e0 <memchr>
 8008ffc:	9a04      	ldr	r2, [sp, #16]
 8008ffe:	b9d8      	cbnz	r0, 8009038 <_vfiprintf_r+0x12c>
 8009000:	06d1      	lsls	r1, r2, #27
 8009002:	bf44      	itt	mi
 8009004:	2320      	movmi	r3, #32
 8009006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800900a:	0713      	lsls	r3, r2, #28
 800900c:	bf44      	itt	mi
 800900e:	232b      	movmi	r3, #43	; 0x2b
 8009010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009014:	f89a 3000 	ldrb.w	r3, [sl]
 8009018:	2b2a      	cmp	r3, #42	; 0x2a
 800901a:	d015      	beq.n	8009048 <_vfiprintf_r+0x13c>
 800901c:	9a07      	ldr	r2, [sp, #28]
 800901e:	4654      	mov	r4, sl
 8009020:	2000      	movs	r0, #0
 8009022:	f04f 0c0a 	mov.w	ip, #10
 8009026:	4621      	mov	r1, r4
 8009028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800902c:	3b30      	subs	r3, #48	; 0x30
 800902e:	2b09      	cmp	r3, #9
 8009030:	d94e      	bls.n	80090d0 <_vfiprintf_r+0x1c4>
 8009032:	b1b0      	cbz	r0, 8009062 <_vfiprintf_r+0x156>
 8009034:	9207      	str	r2, [sp, #28]
 8009036:	e014      	b.n	8009062 <_vfiprintf_r+0x156>
 8009038:	eba0 0308 	sub.w	r3, r0, r8
 800903c:	fa09 f303 	lsl.w	r3, r9, r3
 8009040:	4313      	orrs	r3, r2
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	46a2      	mov	sl, r4
 8009046:	e7d2      	b.n	8008fee <_vfiprintf_r+0xe2>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	1d19      	adds	r1, r3, #4
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	9103      	str	r1, [sp, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	bfbb      	ittet	lt
 8009054:	425b      	neglt	r3, r3
 8009056:	f042 0202 	orrlt.w	r2, r2, #2
 800905a:	9307      	strge	r3, [sp, #28]
 800905c:	9307      	strlt	r3, [sp, #28]
 800905e:	bfb8      	it	lt
 8009060:	9204      	strlt	r2, [sp, #16]
 8009062:	7823      	ldrb	r3, [r4, #0]
 8009064:	2b2e      	cmp	r3, #46	; 0x2e
 8009066:	d10c      	bne.n	8009082 <_vfiprintf_r+0x176>
 8009068:	7863      	ldrb	r3, [r4, #1]
 800906a:	2b2a      	cmp	r3, #42	; 0x2a
 800906c:	d135      	bne.n	80090da <_vfiprintf_r+0x1ce>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	1d1a      	adds	r2, r3, #4
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	9203      	str	r2, [sp, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfb8      	it	lt
 800907a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800907e:	3402      	adds	r4, #2
 8009080:	9305      	str	r3, [sp, #20]
 8009082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009168 <_vfiprintf_r+0x25c>
 8009086:	7821      	ldrb	r1, [r4, #0]
 8009088:	2203      	movs	r2, #3
 800908a:	4650      	mov	r0, sl
 800908c:	f7f7 f8a8 	bl	80001e0 <memchr>
 8009090:	b140      	cbz	r0, 80090a4 <_vfiprintf_r+0x198>
 8009092:	2340      	movs	r3, #64	; 0x40
 8009094:	eba0 000a 	sub.w	r0, r0, sl
 8009098:	fa03 f000 	lsl.w	r0, r3, r0
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	4303      	orrs	r3, r0
 80090a0:	3401      	adds	r4, #1
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a8:	482c      	ldr	r0, [pc, #176]	; (800915c <_vfiprintf_r+0x250>)
 80090aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ae:	2206      	movs	r2, #6
 80090b0:	f7f7 f896 	bl	80001e0 <memchr>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d03f      	beq.n	8009138 <_vfiprintf_r+0x22c>
 80090b8:	4b29      	ldr	r3, [pc, #164]	; (8009160 <_vfiprintf_r+0x254>)
 80090ba:	bb1b      	cbnz	r3, 8009104 <_vfiprintf_r+0x1f8>
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	3307      	adds	r3, #7
 80090c0:	f023 0307 	bic.w	r3, r3, #7
 80090c4:	3308      	adds	r3, #8
 80090c6:	9303      	str	r3, [sp, #12]
 80090c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ca:	443b      	add	r3, r7
 80090cc:	9309      	str	r3, [sp, #36]	; 0x24
 80090ce:	e767      	b.n	8008fa0 <_vfiprintf_r+0x94>
 80090d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090d4:	460c      	mov	r4, r1
 80090d6:	2001      	movs	r0, #1
 80090d8:	e7a5      	b.n	8009026 <_vfiprintf_r+0x11a>
 80090da:	2300      	movs	r3, #0
 80090dc:	3401      	adds	r4, #1
 80090de:	9305      	str	r3, [sp, #20]
 80090e0:	4619      	mov	r1, r3
 80090e2:	f04f 0c0a 	mov.w	ip, #10
 80090e6:	4620      	mov	r0, r4
 80090e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ec:	3a30      	subs	r2, #48	; 0x30
 80090ee:	2a09      	cmp	r2, #9
 80090f0:	d903      	bls.n	80090fa <_vfiprintf_r+0x1ee>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0c5      	beq.n	8009082 <_vfiprintf_r+0x176>
 80090f6:	9105      	str	r1, [sp, #20]
 80090f8:	e7c3      	b.n	8009082 <_vfiprintf_r+0x176>
 80090fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80090fe:	4604      	mov	r4, r0
 8009100:	2301      	movs	r3, #1
 8009102:	e7f0      	b.n	80090e6 <_vfiprintf_r+0x1da>
 8009104:	ab03      	add	r3, sp, #12
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	462a      	mov	r2, r5
 800910a:	4b16      	ldr	r3, [pc, #88]	; (8009164 <_vfiprintf_r+0x258>)
 800910c:	a904      	add	r1, sp, #16
 800910e:	4630      	mov	r0, r6
 8009110:	f7fd fcca 	bl	8006aa8 <_printf_float>
 8009114:	4607      	mov	r7, r0
 8009116:	1c78      	adds	r0, r7, #1
 8009118:	d1d6      	bne.n	80090c8 <_vfiprintf_r+0x1bc>
 800911a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800911c:	07d9      	lsls	r1, r3, #31
 800911e:	d405      	bmi.n	800912c <_vfiprintf_r+0x220>
 8009120:	89ab      	ldrh	r3, [r5, #12]
 8009122:	059a      	lsls	r2, r3, #22
 8009124:	d402      	bmi.n	800912c <_vfiprintf_r+0x220>
 8009126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009128:	f7fd fb72 	bl	8006810 <__retarget_lock_release_recursive>
 800912c:	89ab      	ldrh	r3, [r5, #12]
 800912e:	065b      	lsls	r3, r3, #25
 8009130:	f53f af12 	bmi.w	8008f58 <_vfiprintf_r+0x4c>
 8009134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009136:	e711      	b.n	8008f5c <_vfiprintf_r+0x50>
 8009138:	ab03      	add	r3, sp, #12
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	462a      	mov	r2, r5
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <_vfiprintf_r+0x258>)
 8009140:	a904      	add	r1, sp, #16
 8009142:	4630      	mov	r0, r6
 8009144:	f7fd ff54 	bl	8006ff0 <_printf_i>
 8009148:	e7e4      	b.n	8009114 <_vfiprintf_r+0x208>
 800914a:	bf00      	nop
 800914c:	08009328 	.word	0x08009328
 8009150:	08009348 	.word	0x08009348
 8009154:	08009308 	.word	0x08009308
 8009158:	080095d2 	.word	0x080095d2
 800915c:	080095dc 	.word	0x080095dc
 8009160:	08006aa9 	.word	0x08006aa9
 8009164:	08008ee7 	.word	0x08008ee7
 8009168:	080095d8 	.word	0x080095d8

0800916c <__ascii_wctomb>:
 800916c:	b149      	cbz	r1, 8009182 <__ascii_wctomb+0x16>
 800916e:	2aff      	cmp	r2, #255	; 0xff
 8009170:	bf85      	ittet	hi
 8009172:	238a      	movhi	r3, #138	; 0x8a
 8009174:	6003      	strhi	r3, [r0, #0]
 8009176:	700a      	strbls	r2, [r1, #0]
 8009178:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800917c:	bf98      	it	ls
 800917e:	2001      	movls	r0, #1
 8009180:	4770      	bx	lr
 8009182:	4608      	mov	r0, r1
 8009184:	4770      	bx	lr

08009186 <abort>:
 8009186:	b508      	push	{r3, lr}
 8009188:	2006      	movs	r0, #6
 800918a:	f000 f82b 	bl	80091e4 <raise>
 800918e:	2001      	movs	r0, #1
 8009190:	f7f7 ffb6 	bl	8001100 <_exit>

08009194 <_raise_r>:
 8009194:	291f      	cmp	r1, #31
 8009196:	b538      	push	{r3, r4, r5, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	460d      	mov	r5, r1
 800919c:	d904      	bls.n	80091a8 <_raise_r+0x14>
 800919e:	2316      	movs	r3, #22
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091aa:	b112      	cbz	r2, 80091b2 <_raise_r+0x1e>
 80091ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091b0:	b94b      	cbnz	r3, 80091c6 <_raise_r+0x32>
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 f830 	bl	8009218 <_getpid_r>
 80091b8:	462a      	mov	r2, r5
 80091ba:	4601      	mov	r1, r0
 80091bc:	4620      	mov	r0, r4
 80091be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c2:	f000 b817 	b.w	80091f4 <_kill_r>
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d00a      	beq.n	80091e0 <_raise_r+0x4c>
 80091ca:	1c59      	adds	r1, r3, #1
 80091cc:	d103      	bne.n	80091d6 <_raise_r+0x42>
 80091ce:	2316      	movs	r3, #22
 80091d0:	6003      	str	r3, [r0, #0]
 80091d2:	2001      	movs	r0, #1
 80091d4:	e7e7      	b.n	80091a6 <_raise_r+0x12>
 80091d6:	2400      	movs	r4, #0
 80091d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091dc:	4628      	mov	r0, r5
 80091de:	4798      	blx	r3
 80091e0:	2000      	movs	r0, #0
 80091e2:	e7e0      	b.n	80091a6 <_raise_r+0x12>

080091e4 <raise>:
 80091e4:	4b02      	ldr	r3, [pc, #8]	; (80091f0 <raise+0xc>)
 80091e6:	4601      	mov	r1, r0
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f7ff bfd3 	b.w	8009194 <_raise_r>
 80091ee:	bf00      	nop
 80091f0:	20000010 	.word	0x20000010

080091f4 <_kill_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_kill_r+0x20>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	f7f7 ff6d 	bl	80010e0 <_kill>
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	d102      	bne.n	8009210 <_kill_r+0x1c>
 800920a:	682b      	ldr	r3, [r5, #0]
 800920c:	b103      	cbz	r3, 8009210 <_kill_r+0x1c>
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	bd38      	pop	{r3, r4, r5, pc}
 8009212:	bf00      	nop
 8009214:	20001cf4 	.word	0x20001cf4

08009218 <_getpid_r>:
 8009218:	f7f7 bf5a 	b.w	80010d0 <_getpid>

0800921c <_init>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr

08009228 <_fini>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr
