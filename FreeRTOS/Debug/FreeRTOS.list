
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08009538  08009538  00019538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b08  08009b08  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009b08  08009b08  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b08  08009b08  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00001b18  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cf8  20001cf8  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a273  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003468  00000000  00000000  0003a483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f0  00000000  00000000  0003ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004087  00000000  00000000  00040028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018253  00000000  00000000  000440af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce9b3  00000000  00000000  0005c302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012acb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006544  00000000  00000000  0012ad08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800951c 	.word	0x0800951c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800951c 	.word	0x0800951c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <vInitController>:

void vTaskDataSync(void *pvParameters);
void vTaskGetSetPointFromNetwork(void *pvParameters);
void vTaskSimulatePointsFromNetwork(void *pvParameters);

BaseType_t vInitController(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
	gpsQueue = xQueueCreate(QUEUE_SIZE, sizeof(st_gpsPoint));
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f003 fb89 	bl	80042ca <xQueueGenericCreate>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <vInitController+0x70>)
 8000bbc:	6013      	str	r3, [r2, #0]

	if (gpsQueue == NULL) {
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <vInitController+0x70>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d104      	bne.n	8000bd0 <vInitController+0x28>
		printf("Falha ao criar a fila\n");
 8000bc6:	4815      	ldr	r0, [pc, #84]	; (8000c1c <vInitController+0x74>)
 8000bc8:	f006 fce6 	bl	8007598 <puts>
	    return pdFALSE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e020      	b.n	8000c12 <vInitController+0x6a>
	}

	xTaskCreate(vTaskDataSync,"Data Sync Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	4910      	ldr	r1, [pc, #64]	; (8000c20 <vInitController+0x78>)
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <vInitController+0x7c>)
 8000be0:	f004 f814 	bl	8004c0c <xTaskCreate>
	xTaskCreate(vTaskGetSetPointFromNetwork,"Set Point Task", 256, NULL, 1, NULL);
 8000be4:	2300      	movs	r3, #0
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	2301      	movs	r3, #1
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2300      	movs	r3, #0
 8000bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <vInitController+0x80>)
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <vInitController+0x84>)
 8000bf6:	f004 f809 	bl	8004c0c <xTaskCreate>
	xTaskCreate(vTaskSimulatePointsFromNetwork,"Generate data Task", 256, NULL, 1, NULL);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c08:	4909      	ldr	r1, [pc, #36]	; (8000c30 <vInitController+0x88>)
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <vInitController+0x8c>)
 8000c0c:	f003 fffe 	bl	8004c0c <xTaskCreate>

	return pdTRUE;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200001fc 	.word	0x200001fc
 8000c1c:	08009538 	.word	0x08009538
 8000c20:	08009550 	.word	0x08009550
 8000c24:	08000c39 	.word	0x08000c39
 8000c28:	08009560 	.word	0x08009560
 8000c2c:	08000cbd 	.word	0x08000cbd
 8000c30:	08009570 	.word	0x08009570
 8000c34:	08000d29 	.word	0x08000d29

08000c38 <vTaskDataSync>:

void vTaskDataSync(void *pvParameters) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	6078      	str	r0, [r7, #4]
	while(1) {
		st_gpsPoint gpsPoint_st = {
				.lat = randomInt(0,255) / 360.0,
 8000c40:	21ff      	movs	r1, #255	; 0xff
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f8a2 	bl	8000d8c <randomInt>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc6a 	bl	8000524 <__aeabi_i2d>
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <vTaskDataSync+0x7c>)
 8000c56:	f7ff fdf9 	bl	800084c <__aeabi_ddiv>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
		st_gpsPoint gpsPoint_st = {
 8000c5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
				.lon = randomInt(0,255) / 360.0,
 8000c62:	21ff      	movs	r1, #255	; 0xff
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f891 	bl	8000d8c <randomInt>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc59 	bl	8000524 <__aeabi_i2d>
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <vTaskDataSync+0x7c>)
 8000c78:	f7ff fde8 	bl	800084c <__aeabi_ddiv>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
		st_gpsPoint gpsPoint_st = {
 8000c80:	e9c7 2304 	strd	r2, r3, [r7, #16]
		};

		int compassOrietantion = randomInt(0,360);
 8000c84:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 f87f 	bl	8000d8c <randomInt>
 8000c8e:	61f8      	str	r0, [r7, #28]

		printf("Recebendo dados dos dois sensores | Compass = %d deg | Lat = %f | Lon = %f \n",
 8000c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c98:	e9cd 2300 	strd	r2, r3, [sp]
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	69f9      	ldr	r1, [r7, #28]
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <vTaskDataSync+0x80>)
 8000ca4:	f006 fbf2 	bl	800748c <iprintf>
				compassOrietantion, gpsPoint_st.lat, gpsPoint_st.lon);

		vTaskDelay(pdMS_TO_TICKS(1000));
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f004 f902 	bl	8004eb4 <vTaskDelay>
	while(1) {
 8000cb0:	e7c6      	b.n	8000c40 <vTaskDataSync+0x8>
 8000cb2:	bf00      	nop
 8000cb4:	40768000 	.word	0x40768000
 8000cb8:	08009584 	.word	0x08009584

08000cbc <vTaskGetSetPointFromNetwork>:
	}
}

void vTaskGetSetPointFromNetwork(void *pvParameters) {
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]

	st_gpsPoint gpsReceivedFromNetwork_st = {
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <vTaskGetSetPointFromNetwork+0x58>)
 8000cc6:	f107 0408 	add.w	r4, r7, #8
 8000cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.lat = -1,
		.lon = -1
	};

	while(1) {
        printf("Get from internet | ");
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <vTaskGetSetPointFromNetwork+0x5c>)
 8000cd2:	f006 fbdb 	bl	800748c <iprintf>

        if (xQueueReceive(gpsQueue, (void *)&gpsReceivedFromNetwork_st, 0) == pdTRUE) {
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <vTaskGetSetPointFromNetwork+0x60>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f107 0108 	add.w	r1, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fce9 	bl	80046b8 <xQueueReceive>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10b      	bne.n	8000d04 <vTaskGetSetPointFromNetwork+0x48>
            printf("Lat: %f, Lon: %f\n", gpsReceivedFromNetwork_st.lat, gpsReceivedFromNetwork_st.lon);
 8000cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cf4:	e9cd 2300 	strd	r2, r3, [sp]
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <vTaskGetSetPointFromNetwork+0x64>)
 8000cfe:	f006 fbc5 	bl	800748c <iprintf>
 8000d02:	e002      	b.n	8000d0a <vTaskGetSetPointFromNetwork+0x4e>
        } else {
        	printf("Nao tem dados na fila\n");
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <vTaskGetSetPointFromNetwork+0x68>)
 8000d06:	f006 fc47 	bl	8007598 <puts>
        }

		vTaskDelay(pdMS_TO_TICKS(3000));
 8000d0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d0e:	f004 f8d1 	bl	8004eb4 <vTaskDelay>
        printf("Get from internet | ");
 8000d12:	e7dd      	b.n	8000cd0 <vTaskGetSetPointFromNetwork+0x14>
 8000d14:	08009618 	.word	0x08009618
 8000d18:	080095d4 	.word	0x080095d4
 8000d1c:	200001fc 	.word	0x200001fc
 8000d20:	080095ec 	.word	0x080095ec
 8000d24:	08009600 	.word	0x08009600

08000d28 <vTaskSimulatePointsFromNetwork>:
	}
}

void vTaskSimulatePointsFromNetwork(void *pvParameters) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    st_gpsPoint gpsPointGenerateFromNetwork_st;

    while (1) {
        printf("New value from network\n");
 8000d30:	4813      	ldr	r0, [pc, #76]	; (8000d80 <vTaskSimulatePointsFromNetwork+0x58>)
 8000d32:	f006 fc31 	bl	8007598 <puts>

        // Simulação de geração de pontos de GPS a partir da rede
        gpsPointGenerateFromNetwork_st.lat = 0.2;
 8000d36:	a30e      	add	r3, pc, #56	; (adr r3, 8000d70 <vTaskSimulatePointsFromNetwork+0x48>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        gpsPointGenerateFromNetwork_st.lon = 0.3;
 8000d40:	a30d      	add	r3, pc, #52	; (adr r3, 8000d78 <vTaskSimulatePointsFromNetwork+0x50>)
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	e9c7 2304 	strd	r2, r3, [r7, #16]

        if (xQueueSend(gpsQueue, (void *)&gpsPointGenerateFromNetwork_st, 10) != pdPASS) {
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <vTaskSimulatePointsFromNetwork+0x5c>)
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	f107 0108 	add.w	r1, r7, #8
 8000d52:	2300      	movs	r3, #0
 8000d54:	220a      	movs	r2, #10
 8000d56:	f003 fb19 	bl	800438c <xQueueGenericSend>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d002      	beq.n	8000d66 <vTaskSimulatePointsFromNetwork+0x3e>
            printf("Fila cheia\n");
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <vTaskSimulatePointsFromNetwork+0x60>)
 8000d62:	f006 fc19 	bl	8007598 <puts>
        }

        vTaskDelay(pdMS_TO_TICKS(5000));
 8000d66:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d6a:	f004 f8a3 	bl	8004eb4 <vTaskDelay>
        printf("New value from network\n");
 8000d6e:	e7df      	b.n	8000d30 <vTaskSimulatePointsFromNetwork+0x8>
 8000d70:	9999999a 	.word	0x9999999a
 8000d74:	3fc99999 	.word	0x3fc99999
 8000d78:	33333333 	.word	0x33333333
 8000d7c:	3fd33333 	.word	0x3fd33333
 8000d80:	08009628 	.word	0x08009628
 8000d84:	200001fc 	.word	0x200001fc
 8000d88:	08009640 	.word	0x08009640

08000d8c <randomInt>:
#include "math_util.h"

int randomInt(int min, int max) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    // Gerar um número inteiro aleatório dentro do intervalo (min, max)
    int randomInt = min + rand() % (max - min + 1);
 8000d96:	f006 fc07 	bl	80075a8 <rand>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	6839      	ldr	r1, [r7, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	3301      	adds	r3, #1
 8000da4:	fb92 f1f3 	sdiv	r1, r2, r3
 8000da8:	fb01 f303 	mul.w	r3, r1, r3
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

    return randomInt;
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <__io_putchar+0x20>)
 8000dd2:	f002 fb9d 	bl	8003510 <HAL_UART_Transmit>
  return ch;
 8000dd6:	687b      	ldr	r3, [r7, #4]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000200 	.word	0x20000200

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f000 fb46 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f81a 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 f88a 	bl	8000f08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000df4:	f000 f858 	bl	8000ea8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  start_rtos();
 8000df8:	f000 f914 	bl	8001024 <start_rtos>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dfc:	f002 ff5e 	bl	8003cbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <main+0x34>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <main+0x38>)
 8000e06:	f002 ffc1 	bl	8003d8c <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <main+0x3c>)
 8000e0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e10:	f002 ff88 	bl	8003d24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <main+0x30>
 8000e16:	bf00      	nop
 8000e18:	08009678 	.word	0x08009678
 8000e1c:	08000fe5 	.word	0x08000fe5
 8000e20:	20000288 	.word	0x20000288

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b090      	sub	sp, #64	; 0x40
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	2228      	movs	r2, #40	; 0x28
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 fe23 	bl	8006a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	2302      	movs	r3, #2
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fdc3 	bl	80019f0 <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e70:	f000 f8d2 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
 8000e76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fdec 	bl	8002a6c <HAL_RCC_ClockConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e9a:	f000 f8bd 	bl	8001018 <Error_Handler>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3740      	adds	r7, #64	; 0x40
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <MX_USART2_UART_Init+0x5c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eb4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x58>)
 8000eec:	f002 fac2 	bl	8003474 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ef6:	f000 f88f 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000200 	.word	0x20000200
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f40:	6153      	str	r3, [r2, #20]
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 fd01 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_EXT_GPIO_Port, LD_EXT_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f000 fcfa 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_GPIO_Init+0xd8>)
 8000fb0:	f000 fb7a 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD_EXT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD_EXT_Pin;
 8000fb4:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f000 fb6a 	bl	80016a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000800 	.word	0x48000800

08000fe4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f002 ff77 	bl	8003ee0 <osDelay>
 8000ff2:	e7fb      	b.n	8000fec <StartDefaultTask+0x8>

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001006:	f000 fa4d 	bl	80014a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40001000 	.word	0x40001000

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <start_rtos>:
#include "ahrs.h"
#include "controller.h"

void ledTask(void *arg);

void start_rtos(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8

	vInitController();
 800102a:	f7ff fdbd 	bl	8000ba8 <vInitController>

	xTaskCreate(ledTask, "ledTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800102e:	2300      	movs	r3, #0
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	2301      	movs	r3, #1
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	4903      	ldr	r1, [pc, #12]	; (8001048 <start_rtos+0x24>)
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <start_rtos+0x28>)
 800103e:	f003 fde5 	bl	8004c0c <xTaskCreate>

	vTaskStartScheduler();
 8001042:	f003 ff6b 	bl	8004f1c <vTaskStartScheduler>

	while(1);
 8001046:	e7fe      	b.n	8001046 <start_rtos+0x22>
 8001048:	08009658 	.word	0x08009658
 800104c:	08001051 	.word	0x08001051

08001050 <ledTask>:
}

void ledTask(void *arg) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001058:	2120      	movs	r1, #32
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f000 fcad 	bl	80019bc <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(100));
 8001062:	2064      	movs	r0, #100	; 0x64
 8001064:	f003 ff26 	bl	8004eb4 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001068:	e7f6      	b.n	8001058 <ledTask+0x8>
	...

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_MspInit+0x4c>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <HAL_MspInit+0x4c>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_MspInit+0x4c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_MspInit+0x4c>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_MspInit+0x4c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	210f      	movs	r1, #15
 80010a6:	f06f 0001 	mvn.w	r0, #1
 80010aa:	f000 fad3 	bl	8001654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_UART_MspInit+0x7c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d128      	bne.n	8001130 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_UART_MspInit+0x80>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a16      	ldr	r2, [pc, #88]	; (800113c <HAL_UART_MspInit+0x80>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_UART_MspInit+0x80>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_UART_MspInit+0x80>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_UART_MspInit+0x80>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_UART_MspInit+0x80>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fabc 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40004400 	.word	0x40004400
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <HAL_InitTick+0xe0>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	4a32      	ldr	r2, [pc, #200]	; (8001220 <HAL_InitTick+0xe0>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	61d3      	str	r3, [r2, #28]
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_InitTick+0xe0>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001168:	f107 0210 	add.w	r2, r7, #16
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f001 feb0 	bl	8002ed8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	2b00      	cmp	r3, #0
 8001180:	d103      	bne.n	800118a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001182:	f001 fe65 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8001186:	6378      	str	r0, [r7, #52]	; 0x34
 8001188:	e004      	b.n	8001194 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800118a:	f001 fe61 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 800118e:	4603      	mov	r3, r0
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001196:	4a23      	ldr	r2, [pc, #140]	; (8001224 <HAL_InitTick+0xe4>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	0c9b      	lsrs	r3, r3, #18
 800119e:	3b01      	subs	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_InitTick+0xe8>)
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <HAL_InitTick+0xec>)
 80011a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_InitTick+0xe8>)
 80011aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_InitTick+0xe8>)
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_InitTick+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_InitTick+0xe8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_InitTick+0xe8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <HAL_InitTick+0xe8>)
 80011ca:	f001 feb7 	bl	8002f3c <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11b      	bne.n	8001214 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <HAL_InitTick+0xe8>)
 80011de:	f001 ff0f 	bl	8003000 <HAL_TIM_Base_Start_IT>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d111      	bne.n	8001214 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80011f0:	2036      	movs	r0, #54	; 0x36
 80011f2:	f000 fa4b 	bl	800168c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d808      	bhi.n	800120e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2036      	movs	r0, #54	; 0x36
 8001202:	f000 fa27 	bl	8001654 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_InitTick+0xf0>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	e002      	b.n	8001214 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001218:	4618      	mov	r0, r3
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	431bde83 	.word	0x431bde83
 8001228:	2000028c 	.word	0x2000028c
 800122c:	40001000 	.word	0x40001000
 8001230:	20000004 	.word	0x20000004

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <TIM6_DAC1_IRQHandler+0x10>)
 8001266:	f001 ff27 	bl	80030b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000028c 	.word	0x2000028c

08001274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_kill>:

int _kill(int pid, int sig)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128e:	f005 fac5 	bl	800681c <__errno>
 8001292:	4603      	mov	r3, r0
 8001294:	2216      	movs	r2, #22
 8001296:	601a      	str	r2, [r3, #0]
  return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_exit>:

void _exit (int status)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe7 	bl	8001284 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b6:	e7fe      	b.n	80012b6 <_exit+0x12>

080012b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
  }

  return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e009      	b.n	8001318 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60ba      	str	r2, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd57 	bl	8000dc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf1      	blt.n	8001304 <_write+0x12>
  }
  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	605a      	str	r2, [r3, #4]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f005 fa2a 	bl	800681c <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20003000 	.word	0x20003000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	200002d8 	.word	0x200002d8
 80013fc:	20001cf8 	.word	0x20001cf8

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001428:	f7ff ffea 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f005 fadf 	bl	8006a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001456:	f7ff fcc5 	bl	8000de4 <main>

0800145a <LoopForever>:

LoopForever:
    b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800145c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001468:	08009b10 	.word	0x08009b10
  ldr r2, =_sbss
 800146c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001470:	20001cf8 	.word	0x20001cf8

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f8d8 	bl	800163e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	200f      	movs	r0, #15
 8001490:	f7ff fe56 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fdea 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	200002dc 	.word	0x200002dc

080014cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200002dc 	.word	0x200002dc

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff4c 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001666:	f7ff ff61 	bl	800152c <__NVIC_GetPriorityGrouping>
 800166a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	6978      	ldr	r0, [r7, #20]
 8001672:	f7ff ffb1 	bl	80015d8 <NVIC_EncodePriority>
 8001676:	4602      	mov	r2, r0
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff80 	bl	8001584 <__NVIC_SetPriority>
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff54 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e14e      	b.n	8001956 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8140 	beq.w	8001950 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d005      	beq.n	80016e8 <HAL_GPIO_Init+0x40>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d130      	bne.n	800174a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171e:	2201      	movs	r2, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b03      	cmp	r3, #3
 8001754:	d017      	beq.n	8001786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d123      	bne.n	80017da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	6939      	ldr	r1, [r7, #16]
 80017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 809a 	beq.w	8001950 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181c:	4b55      	ldr	r3, [pc, #340]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a54      	ldr	r2, [pc, #336]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b52      	ldr	r3, [pc, #328]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001834:	4a50      	ldr	r2, [pc, #320]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1e0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a46      	ldr	r2, [pc, #280]	; (800197c <HAL_GPIO_Init+0x2d4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1dc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a45      	ldr	r2, [pc, #276]	; (8001980 <HAL_GPIO_Init+0x2d8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1d8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a44      	ldr	r2, [pc, #272]	; (8001984 <HAL_GPIO_Init+0x2dc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1d4>
 8001878:	2303      	movs	r3, #3
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1e2>
 800187c:	2305      	movs	r3, #5
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1e2>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1e2>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1e2>
 8001888:	2300      	movs	r3, #0
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_GPIO_Init+0x2d0>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018cc:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d2:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f6:	4a24      	ldr	r2, [pc, #144]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800194a:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f aea9 	bne.w	80016b8 <HAL_GPIO_Init+0x10>
  }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43d9      	mvns	r1, r3
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	400b      	ands	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f001 b823 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 817d 	beq.w	8001d26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a2c:	4bbc      	ldr	r3, [pc, #752]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d00c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a38:	4bb9      	ldr	r3, [pc, #740]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d15c      	bne.n	8001afe <HAL_RCC_OscConfig+0x10e>
 8001a44:	4bb6      	ldr	r3, [pc, #728]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d155      	bne.n	8001afe <HAL_RCC_OscConfig+0x10e>
 8001a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0x94>
 8001a7e:	4ba8      	ldr	r3, [pc, #672]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e015      	b.n	8001ab0 <HAL_RCC_OscConfig+0xc0>
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001aa0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001aac:	4b9c      	ldr	r3, [pc, #624]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ab8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001abc:	fa92 f2a2 	rbit	r2, r2
 8001ac0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ac4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 811f 	beq.w	8001d24 <HAL_RCC_OscConfig+0x334>
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 8116 	bne.w	8001d24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f000 bfaf 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12e>
 8001b10:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a82      	ldr	r2, [pc, #520]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e036      	b.n	8001b8c <HAL_RCC_OscConfig+0x19c>
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x158>
 8001b2e:	4b7c      	ldr	r3, [pc, #496]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7b      	ldr	r2, [pc, #492]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b79      	ldr	r3, [pc, #484]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a78      	ldr	r2, [pc, #480]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e021      	b.n	8001b8c <HAL_RCC_OscConfig+0x19c>
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x184>
 8001b5a:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a70      	ldr	r2, [pc, #448]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6d      	ldr	r2, [pc, #436]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0x19c>
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a69      	ldr	r2, [pc, #420]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a66      	ldr	r2, [pc, #408]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b8c:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	f023 020f 	bic.w	r2, r3, #15
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	495f      	ldr	r1, [pc, #380]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d059      	beq.n	8001c6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fc89 	bl	80014cc <HAL_GetTick>
 8001bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fc84 	bl	80014cc <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b64      	cmp	r3, #100	; 0x64
 8001bce:	d902      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f000 bf43 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
 8001bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001bea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0x218>
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e015      	b.n	8001c34 <HAL_RCC_OscConfig+0x244>
 8001c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c30:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c38:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c40:	fa92 f2a2 	rbit	r2, r2
 8001c44:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f042 0220 	orr.w	r2, r2, #32
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f002 021f 	and.w	r2, r2, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ab      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x1d0>
 8001c68:	e05d      	b.n	8001d26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fc2f 	bl	80014cc <HAL_GetTick>
 8001c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fc2a 	bl	80014cc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d902      	bls.n	8001c8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f000 bee9 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2cc>
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2f8>
 8001cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001cf0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001cf4:	fa92 f2a2 	rbit	r2, r2
 8001cf8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001cfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f002 021f 	and.w	r2, r2, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ab      	bne.n	8001c74 <HAL_RCC_OscConfig+0x284>
 8001d1c:	e003      	b.n	8001d26 <HAL_RCC_OscConfig+0x336>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 817d 	beq.w	8002036 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d3c:	4ba6      	ldr	r3, [pc, #664]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d48:	4ba3      	ldr	r3, [pc, #652]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d172      	bne.n	8001e3a <HAL_RCC_OscConfig+0x44a>
 8001d54:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d16c      	bne.n	8001e3a <HAL_RCC_OscConfig+0x44a>
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_OscConfig+0x3a0>
 8001d8a:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c8>
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001db4:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2202      	movs	r2, #2
 8001dba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001dbe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001dc2:	fa92 f2a2 	rbit	r2, r2
 8001dc6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001dca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCC_OscConfig+0x410>
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f000 be2e 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	21f8      	movs	r1, #248	; 0xf8
 8001e16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e1e:	fa91 f1a1 	rbit	r1, r1
 8001e22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e2a:	fab1 f181 	clz	r1, r1
 8001e2e:	b2c9      	uxtb	r1, r1
 8001e30:	408b      	lsls	r3, r1
 8001e32:	4969      	ldr	r1, [pc, #420]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e38:	e0fd      	b.n	8002036 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8088 	beq.w	8001f5c <HAL_RCC_OscConfig+0x56c>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	461a      	mov	r2, r3
 8001e74:	2301      	movs	r3, #1
 8001e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fb28 	bl	80014cc <HAL_GetTick>
 8001e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff fb23 	bl	80014cc <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d902      	bls.n	8001e98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	f000 bde2 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4d8>
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x500>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ee0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001eec:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ef6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f06:	fab2 f282 	clz	r2, r2
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f042 0220 	orr.w	r2, r2, #32
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f002 021f 	and.w	r2, r2, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0af      	beq.n	8001e82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	21f8      	movs	r1, #248	; 0xf8
 8001f38:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f40:	fa91 f1a1 	rbit	r1, r1
 8001f44:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f48:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f4c:	fab1 f181 	clz	r1, r1
 8001f50:	b2c9      	uxtb	r1, r1
 8001f52:	408b      	lsls	r3, r1
 8001f54:	4920      	ldr	r1, [pc, #128]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
 8001f5a:	e06c      	b.n	8002036 <HAL_RCC_OscConfig+0x646>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	461a      	mov	r2, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff faa0 	bl	80014cc <HAL_GetTick>
 8001f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff fa9b 	bl	80014cc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d902      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	f000 bd5a 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	095b      	lsrs	r3, r3, #5
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d104      	bne.n	8001fdc <HAL_RCC_OscConfig+0x5ec>
 8001fd2:	4b01      	ldr	r3, [pc, #4]	; (8001fd8 <HAL_RCC_OscConfig+0x5e8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e015      	b.n	8002004 <HAL_RCC_OscConfig+0x614>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002000:	4bc8      	ldr	r3, [pc, #800]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	2202      	movs	r2, #2
 8002006:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800200a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800200e:	fa92 f2a2 	rbit	r2, r2
 8002012:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002016:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800201a:	fab2 f282 	clz	r2, r2
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f042 0220 	orr.w	r2, r2, #32
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f002 021f 	and.w	r2, r2, #31
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ad      	bne.n	8001f92 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8110 	beq.w	800226c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d079      	beq.n	8002150 <HAL_RCC_OscConfig+0x760>
 800205c:	2301      	movs	r3, #1
 800205e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800206e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4bab      	ldr	r3, [pc, #684]	; (8002328 <HAL_RCC_OscConfig+0x938>)
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	461a      	mov	r2, r3
 8002082:	2301      	movs	r3, #1
 8002084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff fa21 	bl	80014cc <HAL_GetTick>
 800208a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff fa1c 	bl	80014cc <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d902      	bls.n	80020a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f000 bcdb 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020c0:	2202      	movs	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020e4:	2202      	movs	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002100:	4b88      	ldr	r3, [pc, #544]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 8002102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800210c:	2102      	movs	r1, #2
 800210e:	6019      	str	r1, [r3, #0]
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f1a3 	rbit	r1, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002122:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002126:	6019      	str	r1, [r3, #0]
  return result;
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0a0      	beq.n	8002090 <HAL_RCC_OscConfig+0x6a0>
 800214e:	e08d      	b.n	800226c <HAL_RCC_OscConfig+0x87c>
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fa93 f2a3 	rbit	r2, r3
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002172:	601a      	str	r2, [r3, #0]
  return result;
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800217c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	4b68      	ldr	r3, [pc, #416]	; (8002328 <HAL_RCC_OscConfig+0x938>)
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	461a      	mov	r2, r3
 800218e:	2300      	movs	r3, #0
 8002190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff f99b 	bl	80014cc <HAL_GetTick>
 8002196:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff f996 	bl	80014cc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d902      	bls.n	80021b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	f000 bc55 	b.w	8002a5c <HAL_RCC_OscConfig+0x106c>
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021ba:	2202      	movs	r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021de:	2202      	movs	r2, #2
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800221c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 8002220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800222a:	2102      	movs	r1, #2
 800222c:	6019      	str	r1, [r3, #0]
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f1a3 	rbit	r1, r3
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002244:	6019      	str	r1, [r3, #0]
  return result;
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d197      	bne.n	800219c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 81a1 	beq.w	80025c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002288:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d116      	bne.n	80022c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	61d3      	str	r3, [r2, #28]
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCC_OscConfig+0x93c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11a      	bne.n	8002304 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x93c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_RCC_OscConfig+0x93c>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7ff f8f7 	bl	80014cc <HAL_GetTick>
 80022de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	e009      	b.n	80022f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7ff f8f2 	bl	80014cc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e3b1      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCC_OscConfig+0x93c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ef      	beq.n	80022e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d10d      	bne.n	8002330 <HAL_RCC_OscConfig+0x940>
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a02      	ldr	r2, [pc, #8]	; (8002324 <HAL_RCC_OscConfig+0x934>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	e03c      	b.n	800239c <HAL_RCC_OscConfig+0x9ac>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	10908120 	.word	0x10908120
 800232c:	40007000 	.word	0x40007000
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10c      	bne.n	800235a <HAL_RCC_OscConfig+0x96a>
 8002340:	4bc1      	ldr	r3, [pc, #772]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4ac0      	ldr	r2, [pc, #768]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	4bbe      	ldr	r3, [pc, #760]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4abd      	ldr	r2, [pc, #756]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002352:	f023 0304 	bic.w	r3, r3, #4
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	e020      	b.n	800239c <HAL_RCC_OscConfig+0x9ac>
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x994>
 800236a:	4bb7      	ldr	r3, [pc, #732]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4ab6      	ldr	r2, [pc, #728]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4bb4      	ldr	r3, [pc, #720]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4ab3      	ldr	r2, [pc, #716]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x9ac>
 8002384:	4bb0      	ldr	r3, [pc, #704]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4aaf      	ldr	r2, [pc, #700]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	4bad      	ldr	r3, [pc, #692]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4aac      	ldr	r2, [pc, #688]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002396:	f023 0304 	bic.w	r3, r3, #4
 800239a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8081 	beq.w	80024b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7ff f88d 	bl	80014cc <HAL_GetTick>
 80023b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7ff f888 	bl	80014cc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e345      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023fc:	2202      	movs	r2, #2
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002416:	601a      	str	r2, [r3, #0]
  return result;
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002420:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0xa4c>
 8002436:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0xa74>
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002444:	2202      	movs	r2, #2
 8002446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	4b79      	ldr	r3, [pc, #484]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002468:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800246c:	2102      	movs	r1, #2
 800246e:	6011      	str	r1, [r2, #0]
 8002470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002474:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	fa92 f1a2 	rbit	r1, r2
 800247e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002482:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002486:	6011      	str	r1, [r2, #0]
  return result;
 8002488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f002 021f 	and.w	r2, r2, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d084      	beq.n	80023b8 <HAL_RCC_OscConfig+0x9c8>
 80024ae:	e07f      	b.n	80025b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b0:	f7ff f80c 	bl	80014cc <HAL_GetTick>
 80024b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7ff f807 	bl	80014cc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e2c4      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002518:	601a      	str	r2, [r3, #0]
  return result;
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002522:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0xb4e>
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	e013      	b.n	8002566 <HAL_RCC_OscConfig+0xb76>
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800256e:	2102      	movs	r1, #2
 8002570:	6011      	str	r1, [r2, #0]
 8002572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002576:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	fa92 f1a2 	rbit	r1, r2
 8002580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002584:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002588:	6011      	str	r1, [r2, #0]
  return result;
 800258a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800258e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	fab2 f282 	clz	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	f002 021f 	and.w	r2, r2, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d184      	bne.n	80024ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8242 	beq.w	8002a5a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_RCC_OscConfig+0xc58>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	f000 8213 	beq.w	8002a0a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f040 8162 	bne.w	80028ba <HAL_RCC_OscConfig+0xeca>
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800261a:	601a      	str	r2, [r3, #0]
  return result;
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002624:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	461a      	mov	r2, r3
 8002638:	2300      	movs	r3, #0
 800263a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe ff46 	bl	80014cc <HAL_GetTick>
 8002640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	e00c      	b.n	8002660 <HAL_RCC_OscConfig+0xc70>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe ff3e 	bl	80014cc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1fd      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f2a3 	rbit	r2, r3
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002684:	601a      	str	r2, [r3, #0]
  return result;
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800268e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_RCC_OscConfig+0xcba>
 80026a4:	4bb0      	ldr	r3, [pc, #704]	; (8002968 <HAL_RCC_OscConfig+0xf78>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	e027      	b.n	80026fa <HAL_RCC_OscConfig+0xd0a>
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	4b9c      	ldr	r3, [pc, #624]	; (8002968 <HAL_RCC_OscConfig+0xf78>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002702:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002706:	6011      	str	r1, [r2, #0]
 8002708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800270c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	fa92 f1a2 	rbit	r1, r2
 8002716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800271e:	6011      	str	r1, [r2, #0]
  return result;
 8002720:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002724:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f042 0220 	orr.w	r2, r2, #32
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	f002 021f 	and.w	r2, r2, #31
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f202 	lsl.w	r2, r1, r2
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d182      	bne.n	800264c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0xf78>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	430b      	orrs	r3, r1
 8002768:	497f      	ldr	r1, [pc, #508]	; (8002968 <HAL_RCC_OscConfig+0xf78>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800277a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002780:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	fa93 f2a3 	rbit	r2, r3
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002792:	601a      	str	r2, [r3, #0]
  return result;
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800279c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	461a      	mov	r2, r3
 80027b0:	2301      	movs	r3, #1
 80027b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fe8a 	bl	80014cc <HAL_GetTick>
 80027b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe fe85 	bl	80014cc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e144      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027f6:	601a      	str	r2, [r3, #0]
  return result;
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002800:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <HAL_RCC_OscConfig+0xe2c>
 8002816:	4b54      	ldr	r3, [pc, #336]	; (8002968 <HAL_RCC_OscConfig+0xf78>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	e027      	b.n	800286c <HAL_RCC_OscConfig+0xe7c>
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800284a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0xf78>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002870:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002874:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002878:	6011      	str	r1, [r2, #0]
 800287a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	fa92 f1a2 	rbit	r1, r2
 8002888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800288c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002890:	6011      	str	r1, [r2, #0]
  return result;
 8002892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002896:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f042 0220 	orr.w	r2, r2, #32
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f002 021f 	and.w	r2, r2, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d082      	beq.n	80027be <HAL_RCC_OscConfig+0xdce>
 80028b8:	e0cf      	b.n	8002a5a <HAL_RCC_OscConfig+0x106a>
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028de:	601a      	str	r2, [r3, #0]
  return result;
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	461a      	mov	r2, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fde4 	bl	80014cc <HAL_GetTick>
 8002904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	e009      	b.n	800291e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fddf 	bl	80014cc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e09e      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002942:	601a      	str	r2, [r3, #0]
  return result;
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800294c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d104      	bne.n	800296c <HAL_RCC_OscConfig+0xf7c>
 8002962:	4b01      	ldr	r3, [pc, #4]	; (8002968 <HAL_RCC_OscConfig+0xf78>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e029      	b.n	80029bc <HAL_RCC_OscConfig+0xfcc>
 8002968:	40021000 	.word	0x40021000
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800299a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCC_OscConfig+0x1078>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029c8:	6011      	str	r1, [r2, #0]
 80029ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	fa92 f1a2 	rbit	r1, r2
 80029d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029e0:	6011      	str	r1, [r2, #0]
  return result;
 80029e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f002 021f 	and.w	r2, r2, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d180      	bne.n	800290a <HAL_RCC_OscConfig+0xf1a>
 8002a08:	e027      	b.n	8002a5a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e01e      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_RCC_OscConfig+0x1078>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a2a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b09e      	sub	sp, #120	; 0x78
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e162      	b.n	8002d4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b90      	ldr	r3, [pc, #576]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d910      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 0207 	bic.w	r2, r3, #7
 8002a9a:	498b      	ldr	r1, [pc, #556]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e14a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b82      	ldr	r3, [pc, #520]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	497f      	ldr	r1, [pc, #508]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80dc 	beq.w	8002c98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d13c      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xf6>
 8002ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xa6>
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	e00f      	b.n	8002b32 <HAL_RCC_ClockConfig+0xc6>
 8002b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b24:	663b      	str	r3, [r7, #96]	; 0x60
 8002b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b36:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f042 0220 	orr.w	r2, r2, #32
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f002 021f 	and.w	r2, r2, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d17b      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0f3      	b.n	8002d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d13c      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x178>
 8002b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x128>
 8002b8e:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e00f      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x148>
 8002b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb0:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc4:	fab2 f282 	clz	r2, r2
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f042 0220 	orr.w	r2, r2, #32
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f002 021f 	and.w	r2, r2, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d13a      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b2      	b.n	8002d4a <HAL_RCC_ClockConfig+0x2de>
 8002be4:	2302      	movs	r3, #2
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x1a0>
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	e00d      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1bc>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2202      	movs	r2, #2
 8002c2a:	61ba      	str	r2, [r7, #24]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	fa92 f2a2 	rbit	r2, r2
 8002c32:	617a      	str	r2, [r7, #20]
  return result;
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	fab2 f282 	clz	r2, r2
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f042 0220 	orr.w	r2, r2, #32
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f002 021f 	and.w	r2, r2, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e079      	b.n	8002d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	491a      	ldr	r1, [pc, #104]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c68:	f7fe fc30 	bl	80014cc <HAL_GetTick>
 8002c6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7fe fc2c 	bl	80014cc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e061      	b.n	8002d4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_ClockConfig+0x260>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d214      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	4906      	ldr	r1, [pc, #24]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <HAL_RCC_ClockConfig+0x25c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e040      	b.n	8002d4a <HAL_RCC_ClockConfig+0x2de>
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCC_ClockConfig+0x2e8>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	491a      	ldr	r1, [pc, #104]	; (8002d54 <HAL_RCC_ClockConfig+0x2e8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cfa:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x2e8>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4912      	ldr	r1, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x2e8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d0e:	f000 f829 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d12:	4601      	mov	r1, r0
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_RCC_ClockConfig+0x2e8>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1c:	22f0      	movs	r2, #240	; 0xf0
 8002d1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	fa92 f2a2 	rbit	r2, r2
 8002d26:	60fa      	str	r2, [r7, #12]
  return result;
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	40d3      	lsrs	r3, r2
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x2ec>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	fa21 f303 	lsr.w	r3, r1, r3
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_RCC_ClockConfig+0x2f0>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_RCC_ClockConfig+0x2f4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe f9fc 	bl	8001140 <HAL_InitTick>
  
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3778      	adds	r7, #120	; 0x78
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	0800969c 	.word	0x0800969c
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b08b      	sub	sp, #44	; 0x2c
 8002d68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x30>
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x36>
 8002d92:	e03c      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d96:	623b      	str	r3, [r7, #32]
      break;
 8002d98:	e03c      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002da0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002da4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	fa92 f2a2 	rbit	r2, r2
 8002dac:	607a      	str	r2, [r7, #4]
  return result;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	fab2 f282 	clz	r2, r2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	40d3      	lsrs	r3, r2
 8002db8:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	fa92 f2a2 	rbit	r2, r2
 8002dd0:	60fa      	str	r2, [r7, #12]
  return result;
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	40d3      	lsrs	r3, r2
 8002ddc:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dde:	5cd3      	ldrb	r3, [r2, r3]
 8002de0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	e004      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	623b      	str	r3, [r7, #32]
      break;
 8002e0c:	e002      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e10:	623b      	str	r3, [r7, #32]
      break;
 8002e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	372c      	adds	r7, #44	; 0x2c
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	007a1200 	.word	0x007a1200
 8002e2c:	080096b4 	.word	0x080096b4
 8002e30:	080096c4 	.word	0x080096c4
 8002e34:	003d0900 	.word	0x003d0900

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e56:	f7ff ffef 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	fa92 f2a2 	rbit	r2, r2
 8002e70:	603a      	str	r2, [r7, #0]
  return result;
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	40d3      	lsrs	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	080096ac 	.word	0x080096ac

08002e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e9a:	f7ff ffcd 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ea8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002eac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	603a      	str	r2, [r7, #0]
  return result;
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	40d3      	lsrs	r3, r2
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	080096ac 	.word	0x080096ac

08002ed8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	220f      	movs	r2, #15
 8002ee6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_GetClockConfig+0x5c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0203 	and.w	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCC_GetClockConfig+0x5c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_GetClockConfig+0x5c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RCC_GetClockConfig+0x60>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0207 	and.w	r2, r3, #7
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40022000 	.word	0x40022000

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e049      	b.n	8002fe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f841 	bl	8002fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 f9e4 	bl	8003348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d001      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e040      	b.n	800309a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x58>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d009      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x58>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_TIM_Base_Start_IT+0xac>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x58>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d115      	bne.n	8003084 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003060:	4013      	ands	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b06      	cmp	r3, #6
 8003068:	d015      	beq.n	8003096 <HAL_TIM_Base_Start_IT+0x96>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d011      	beq.n	8003096 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	e008      	b.n	8003096 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e000      	b.n	8003098 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40014000 	.word	0x40014000
 80030b4:	00010007 	.word	0x00010007

080030b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d122      	bne.n	8003114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d11b      	bne.n	8003114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0202 	mvn.w	r2, #2
 80030e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f905 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8f7 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f908 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d122      	bne.n	8003168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b04      	cmp	r3, #4
 800312e:	d11b      	bne.n	8003168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0204 	mvn.w	r2, #4
 8003138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2202      	movs	r2, #2
 800313e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8db 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8cd 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f8de 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b08      	cmp	r3, #8
 8003174:	d122      	bne.n	80031bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b08      	cmp	r3, #8
 8003182:	d11b      	bne.n	80031bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0208 	mvn.w	r2, #8
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2204      	movs	r2, #4
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8b1 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8a3 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8b4 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d122      	bne.n	8003210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d11b      	bne.n	8003210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0210 	mvn.w	r2, #16
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2208      	movs	r2, #8
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f887 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f879 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f88a 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d10e      	bne.n	800323c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d107      	bne.n	800323c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0201 	mvn.w	r2, #1
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fedc 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	2b80      	cmp	r3, #128	; 0x80
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8f2 	bl	800344c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003276:	d10e      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b80      	cmp	r3, #128	; 0x80
 8003284:	d107      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800328e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8e5 	bl	8003460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d10e      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f838 	bl	8003332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d10e      	bne.n	80032ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d107      	bne.n	80032ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f06f 0220 	mvn.w	r2, #32
 80032e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8a5 	bl	8003438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a32      	ldr	r2, [pc, #200]	; (8003424 <TIM_Base_SetConfig+0xdc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0x28>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x28>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <TIM_Base_SetConfig+0xe0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d108      	bne.n	8003382 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a27      	ldr	r2, [pc, #156]	; (8003424 <TIM_Base_SetConfig+0xdc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <TIM_Base_SetConfig+0x6a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d00f      	beq.n	80033b2 <TIM_Base_SetConfig+0x6a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a24      	ldr	r2, [pc, #144]	; (8003428 <TIM_Base_SetConfig+0xe0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00b      	beq.n	80033b2 <TIM_Base_SetConfig+0x6a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a23      	ldr	r2, [pc, #140]	; (800342c <TIM_Base_SetConfig+0xe4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <TIM_Base_SetConfig+0x6a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <TIM_Base_SetConfig+0xe8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0x6a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <TIM_Base_SetConfig+0xec>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <TIM_Base_SetConfig+0xdc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_Base_SetConfig+0xc0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <TIM_Base_SetConfig+0xe4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0xc0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <TIM_Base_SetConfig+0xe8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0xc0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <TIM_Base_SetConfig+0xec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	615a      	str	r2, [r3, #20]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800

08003438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e040      	b.n	8003508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd fe10 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2224      	movs	r2, #36	; 0x24
 80034a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8b6 	bl	8003624 <UART_SetConfig>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e022      	b.n	8003508 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f9e0 	bl	8003890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa67 	bl	80039d4 <UART_CheckIdleState>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003524:	2b20      	cmp	r3, #32
 8003526:	d178      	bne.n	800361a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_UART_Transmit+0x24>
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e071      	b.n	800361c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2221      	movs	r2, #33	; 0x21
 8003544:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003546:	f7fd ffc1 	bl	80014cc <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	d108      	bne.n	8003578 <HAL_UART_Transmit+0x68>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e003      	b.n	8003580 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003580:	e030      	b.n	80035e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	; 0x80
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fac9 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e03c      	b.n	800361c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	881a      	ldrh	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b4:	b292      	uxth	r2, r2
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	3302      	adds	r3, #2
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e008      	b.n	80035d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b292      	uxth	r2, r2
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3301      	adds	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1c8      	bne.n	8003582 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2140      	movs	r1, #64	; 0x40
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa92 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e005      	b.n	800361c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <UART_SetConfig+0x254>)
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	6979      	ldr	r1, [r7, #20]
 8003658:	430b      	orrs	r3, r1
 800365a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a78      	ldr	r2, [pc, #480]	; (800387c <UART_SetConfig+0x258>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d120      	bne.n	80036e2 <UART_SetConfig+0xbe>
 80036a0:	4b77      	ldr	r3, [pc, #476]	; (8003880 <UART_SetConfig+0x25c>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d817      	bhi.n	80036dc <UART_SetConfig+0xb8>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x90>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d1 	.word	0x080036d1
 80036bc:	080036d7 	.word	0x080036d7
 80036c0:	080036cb 	.word	0x080036cb
 80036c4:	2300      	movs	r3, #0
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e01d      	b.n	8003706 <UART_SetConfig+0xe2>
 80036ca:	2302      	movs	r3, #2
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e01a      	b.n	8003706 <UART_SetConfig+0xe2>
 80036d0:	2304      	movs	r3, #4
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e017      	b.n	8003706 <UART_SetConfig+0xe2>
 80036d6:	2308      	movs	r3, #8
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e014      	b.n	8003706 <UART_SetConfig+0xe2>
 80036dc:	2310      	movs	r3, #16
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e011      	b.n	8003706 <UART_SetConfig+0xe2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a67      	ldr	r2, [pc, #412]	; (8003884 <UART_SetConfig+0x260>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d102      	bne.n	80036f2 <UART_SetConfig+0xce>
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e009      	b.n	8003706 <UART_SetConfig+0xe2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a64      	ldr	r2, [pc, #400]	; (8003888 <UART_SetConfig+0x264>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d102      	bne.n	8003702 <UART_SetConfig+0xde>
 80036fc:	2300      	movs	r3, #0
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e001      	b.n	8003706 <UART_SetConfig+0xe2>
 8003702:	2310      	movs	r3, #16
 8003704:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370e:	d15a      	bne.n	80037c6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003710:	7ffb      	ldrb	r3, [r7, #31]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d827      	bhi.n	8003766 <UART_SetConfig+0x142>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0xf8>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003741 	.word	0x08003741
 8003720:	08003749 	.word	0x08003749
 8003724:	08003751 	.word	0x08003751
 8003728:	08003767 	.word	0x08003767
 800372c:	08003757 	.word	0x08003757
 8003730:	08003767 	.word	0x08003767
 8003734:	08003767 	.word	0x08003767
 8003738:	08003767 	.word	0x08003767
 800373c:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7ff fb86 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003744:	61b8      	str	r0, [r7, #24]
        break;
 8003746:	e013      	b.n	8003770 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7ff fba4 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 800374c:	61b8      	str	r0, [r7, #24]
        break;
 800374e:	e00f      	b.n	8003770 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b4e      	ldr	r3, [pc, #312]	; (800388c <UART_SetConfig+0x268>)
 8003752:	61bb      	str	r3, [r7, #24]
        break;
 8003754:	e00c      	b.n	8003770 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7ff fb05 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 800375a:	61b8      	str	r0, [r7, #24]
        break;
 800375c:	e008      	b.n	8003770 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	61bb      	str	r3, [r7, #24]
        break;
 8003764:	e004      	b.n	8003770 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	77bb      	strb	r3, [r7, #30]
        break;
 800376e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d074      	beq.n	8003860 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	005a      	lsls	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d916      	bls.n	80037c0 <UART_SetConfig+0x19c>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d212      	bcs.n	80037c0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	b29b      	uxth	r3, r3
 800379e:	f023 030f 	bic.w	r3, r3, #15
 80037a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	89fb      	ldrh	r3, [r7, #14]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	89fa      	ldrh	r2, [r7, #14]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	e04f      	b.n	8003860 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	77bb      	strb	r3, [r7, #30]
 80037c4:	e04c      	b.n	8003860 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d828      	bhi.n	800381e <UART_SetConfig+0x1fa>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x1b0>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7ff fb2a 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 80037fc:	61b8      	str	r0, [r7, #24]
        break;
 80037fe:	e013      	b.n	8003828 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7ff fb48 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <UART_SetConfig+0x268>)
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e00c      	b.n	8003828 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7ff faa9 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8003812:	61b8      	str	r0, [r7, #24]
        break;
 8003814:	e008      	b.n	8003828 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e004      	b.n	8003828 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	77bb      	strb	r3, [r7, #30]
        break;
 8003826:	bf00      	nop
    }

    if (pclk != 0U)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	085a      	lsrs	r2, r3, #1
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d909      	bls.n	800385c <UART_SetConfig+0x238>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384e:	d205      	bcs.n	800385c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	e001      	b.n	8003860 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800386c:	7fbb      	ldrb	r3, [r7, #30]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	efff69f3 	.word	0xefff69f3
 800387c:	40013800 	.word	0x40013800
 8003880:	40021000 	.word	0x40021000
 8003884:	40004400 	.word	0x40004400
 8003888:	40004800 	.word	0x40004800
 800388c:	007a1200 	.word	0x007a1200

08003890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398e:	d10a      	bne.n	80039a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b098      	sub	sp, #96	; 0x60
 80039d8:	af02      	add	r7, sp, #8
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e4:	f7fd fd72 	bl	80014cc <HAL_GetTick>
 80039e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d12e      	bne.n	8003a56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f88c 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d021      	beq.n	8003a56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a26:	653b      	str	r3, [r7, #80]	; 0x50
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44
 8003a32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e6      	bne.n	8003a12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e062      	b.n	8003b1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d149      	bne.n	8003af8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f856 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e6      	bne.n	8003a7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad0:	61fa      	str	r2, [r7, #28]
 8003ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	69b9      	ldr	r1, [r7, #24]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e5      	bne.n	8003ab0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e011      	b.n	8003b1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3758      	adds	r7, #88	; 0x58
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	e049      	b.n	8003bca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3c:	d045      	beq.n	8003bca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fd fcc5 	bl	80014cc <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e048      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d031      	beq.n	8003bca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d110      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f838 	bl	8003bf2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2208      	movs	r2, #8
 8003b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e029      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba4:	d111      	bne.n	8003bca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f81e 	bl	8003bf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e00f      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d0a6      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b095      	sub	sp, #84	; 0x54
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	643b      	str	r3, [r7, #64]	; 0x40
 8003c1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d118      	bne.n	8003c9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f023 0310 	bic.w	r3, r3, #16
 8003c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	613b      	str	r3, [r7, #16]
   return(result);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e6      	bne.n	8003c68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cae:	bf00      	nop
 8003cb0:	3754      	adds	r7, #84	; 0x54
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc2:	f3ef 8305 	mrs	r3, IPSR
 8003cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cce:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <osKernelInitialize+0x32>
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <osKernelInitialize+0x64>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d109      	bne.n	8003cf6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003cee:	f06f 0305 	mvn.w	r3, #5
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e00c      	b.n	8003d10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <osKernelInitialize+0x64>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <osKernelInitialize+0x64>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e002      	b.n	8003d10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d10:	68fb      	ldr	r3, [r7, #12]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	200002e0 	.word	0x200002e0

08003d24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d2a:	f3ef 8305 	mrs	r3, IPSR
 8003d2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d36:	f3ef 8310 	mrs	r3, PRIMASK
 8003d3a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <osKernelStart+0x32>
 8003d42:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <osKernelStart+0x64>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d109      	bne.n	8003d5e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d56:	f06f 0305 	mvn.w	r3, #5
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e00e      	b.n	8003d7c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <osKernelStart+0x64>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d107      	bne.n	8003d76 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <osKernelStart+0x64>)
 8003d68:	2202      	movs	r2, #2
 8003d6a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d6c:	f001 f8d6 	bl	8004f1c <vTaskStartScheduler>
      stat = osOK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e002      	b.n	8003d7c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200002e0 	.word	0x200002e0

08003d8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b092      	sub	sp, #72	; 0x48
 8003d90:	af04      	add	r7, sp, #16
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d9c:	f3ef 8305 	mrs	r3, IPSR
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 8094 	bne.w	8003ed2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003daa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dae:	623b      	str	r3, [r7, #32]
  return(result);
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 808d 	bne.w	8003ed2 <osThreadNew+0x146>
 8003db8:	4b48      	ldr	r3, [pc, #288]	; (8003edc <osThreadNew+0x150>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d106      	bne.n	8003dce <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8003dc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8082 	bne.w	8003ed2 <osThreadNew+0x146>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d07e      	beq.n	8003ed2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003dd8:	2318      	movs	r3, #24
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003ddc:	2300      	movs	r3, #0
 8003dde:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003de0:	f107 031b 	add.w	r3, r7, #27
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d045      	beq.n	8003e7e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <osThreadNew+0x74>
        name = attr->name;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <osThreadNew+0x9a>
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	2b38      	cmp	r3, #56	; 0x38
 8003e18:	d805      	bhi.n	8003e26 <osThreadNew+0x9a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <osThreadNew+0x9e>
        return (NULL);
 8003e26:	2300      	movs	r3, #0
 8003e28:	e054      	b.n	8003ed4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00e      	beq.n	8003e60 <osThreadNew+0xd4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2bbb      	cmp	r3, #187	; 0xbb
 8003e48:	d90a      	bls.n	8003e60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <osThreadNew+0xd4>
        mem = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	e010      	b.n	8003e82 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10c      	bne.n	8003e82 <osThreadNew+0xf6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d108      	bne.n	8003e82 <osThreadNew+0xf6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <osThreadNew+0xf6>
          mem = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7c:	e001      	b.n	8003e82 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d110      	bne.n	8003eaa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e90:	9202      	str	r2, [sp, #8]
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fe58 	bl	8004b54 <xTaskCreateStatic>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	e013      	b.n	8003ed2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d110      	bne.n	8003ed2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fea2 	bl	8004c0c <xTaskCreate>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d001      	beq.n	8003ed2 <osThreadNew+0x146>
          hTask = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ed2:	697b      	ldr	r3, [r7, #20]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3738      	adds	r7, #56	; 0x38
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200002e0 	.word	0x200002e0

08003ee0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee8:	f3ef 8305 	mrs	r3, IPSR
 8003eec:	613b      	str	r3, [r7, #16]
  return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10f      	bne.n	8003f14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <osDelay+0x34>
 8003f00:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <osDelay+0x58>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d109      	bne.n	8003f1c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f08:	f3ef 8311 	mrs	r3, BASEPRI
 8003f0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <osDelay+0x3c>
    stat = osErrorISR;
 8003f14:	f06f 0305 	mvn.w	r3, #5
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e007      	b.n	8003f2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 ffc4 	bl	8004eb4 <vTaskDelay>
    }
  }

  return (stat);
 8003f2c:	697b      	ldr	r3, [r7, #20]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200002e0 	.word	0x200002e0

08003f3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a06      	ldr	r2, [pc, #24]	; (8003f6c <vApplicationGetIdleTaskMemory+0x30>)
 8003f52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200002e4 	.word	0x200002e4
 8003f6c:	200003a0 	.word	0x200003a0

08003f70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003f80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a06      	ldr	r2, [pc, #24]	; (8003fa0 <vApplicationGetTimerTaskMemory+0x30>)
 8003f86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f8e:	601a      	str	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	200005a0 	.word	0x200005a0
 8003fa0:	2000065c 	.word	0x2000065c

08003fa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f103 0208 	add.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 0208 	add.w	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f103 0208 	add.w	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405c:	d103      	bne.n	8004066 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e00c      	b.n	8004080 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3308      	adds	r3, #8
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e002      	b.n	8004074 <vListInsert+0x2e>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	d2f6      	bcs.n	800406e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	601a      	str	r2, [r3, #0]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6892      	ldr	r2, [r2, #8]
 80040ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6852      	ldr	r2, [r2, #4]
 80040d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d103      	bne.n	80040ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1e5a      	subs	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004136:	f002 f875 	bl	8006224 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	3b01      	subs	r3, #1
 8004168:	68f9      	ldr	r1, [r7, #12]
 800416a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	441a      	add	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	22ff      	movs	r2, #255	; 0xff
 8004182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d114      	bne.n	80041b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01a      	beq.n	80041ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3310      	adds	r3, #16
 8004198:	4618      	mov	r0, r3
 800419a:	f001 f95d 	bl	8005458 <xTaskRemoveFromEventList>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <xQueueGenericReset+0xcc>)
 80041a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	e009      	b.n	80041ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3310      	adds	r3, #16
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fef2 	bl	8003fa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3324      	adds	r3, #36	; 0x24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff feed 	bl	8003fa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041ca:	f002 f85b 	bl	8006284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041ce:	2301      	movs	r3, #1
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08e      	sub	sp, #56	; 0x38
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <xQueueGenericCreateStatic+0x52>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <xQueueGenericCreateStatic+0x56>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <xQueueGenericCreateStatic+0x58>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <xQueueGenericCreateStatic+0x7e>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <xQueueGenericCreateStatic+0x82>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <xQueueGenericCreateStatic+0x84>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	61fb      	str	r3, [r7, #28]
}
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800427a:	2350      	movs	r3, #80	; 0x50
 800427c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b50      	cmp	r3, #80	; 0x50
 8004282:	d00a      	beq.n	800429a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	61bb      	str	r3, [r7, #24]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00d      	beq.n	80042c0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f843 	bl	8004346 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3730      	adds	r7, #48	; 0x30
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	613b      	str	r3, [r7, #16]
}
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e004      	b.n	800430a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3350      	adds	r3, #80	; 0x50
 800430e:	4618      	mov	r0, r3
 8004310:	f002 f8aa 	bl	8006468 <pvPortMalloc>
 8004314:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00f      	beq.n	800433c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	3350      	adds	r3, #80	; 0x50
 8004320:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800432a:	79fa      	ldrb	r2, [r7, #7]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f805 	bl	8004346 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800433c:	69bb      	ldr	r3, [r7, #24]
	}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e002      	b.n	8004368 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004374:	2101      	movs	r1, #1
 8004376:	69b8      	ldr	r0, [r7, #24]
 8004378:	f7ff fec8 	bl	800410c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueGenericSend+0x32>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <xQueueGenericSend+0x40>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <xQueueGenericSend+0x44>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <xQueueGenericSend+0x46>
 80043d0:	2300      	movs	r3, #0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <xQueueGenericSend+0x60>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d103      	bne.n	80043fa <xQueueGenericSend+0x6e>
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <xQueueGenericSend+0x72>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <xQueueGenericSend+0x74>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xQueueGenericSend+0x8e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	623b      	str	r3, [r7, #32]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800441a:	f001 f9e5 	bl	80057e8 <xTaskGetSchedulerState>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <xQueueGenericSend+0x9e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <xQueueGenericSend+0xa2>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <xQueueGenericSend+0xa4>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xQueueGenericSend+0xbe>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	61fb      	str	r3, [r7, #28]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800444a:	f001 feeb 	bl	8006224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <xQueueGenericSend+0xd4>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d129      	bne.n	80044b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004466:	f000 fa07 	bl	8004878 <prvCopyDataToQueue>
 800446a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	3324      	adds	r3, #36	; 0x24
 8004478:	4618      	mov	r0, r3
 800447a:	f000 ffed 	bl	8005458 <xTaskRemoveFromEventList>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <xQueueGenericSend+0x1f8>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	e00a      	b.n	80044ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <xQueueGenericSend+0x1f8>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044ac:	f001 feea 	bl	8006284 <vPortExitCritical>
				return pdPASS;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e063      	b.n	800457c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044ba:	f001 fee3 	bl	8006284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	e05c      	b.n	800457c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 f827 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044d6:	f001 fed5 	bl	8006284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044da:	f000 fd8f 	bl	8004ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044de:	f001 fea1 	bl	8006224 <vPortEnterCritical>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ee:	d103      	bne.n	80044f8 <xQueueGenericSend+0x16c>
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004504:	d103      	bne.n	800450e <xQueueGenericSend+0x182>
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800450e:	f001 feb9 	bl	8006284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004512:	1d3a      	adds	r2, r7, #4
 8004514:	f107 0314 	add.w	r3, r7, #20
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f816 	bl	800554c <xTaskCheckForTimeOut>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d124      	bne.n	8004570 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004528:	f000 fa9e 	bl	8004a68 <prvIsQueueFull>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d018      	beq.n	8004564 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	3310      	adds	r3, #16
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 ff3c 	bl	80053b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004542:	f000 fa29 	bl	8004998 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004546:	f000 fd67 	bl	8005018 <xTaskResumeAll>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	f47f af7c 	bne.w	800444a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <xQueueGenericSend+0x1f8>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	e772      	b.n	800444a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004566:	f000 fa17 	bl	8004998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800456a:	f000 fd55 	bl	8005018 <xTaskResumeAll>
 800456e:	e76c      	b.n	800444a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004572:	f000 fa11 	bl	8004998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004576:	f000 fd4f 	bl	8005018 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800457a:	2300      	movs	r3, #0
		}
	}
}
 800457c:	4618      	mov	r0, r3
 800457e:	3738      	adds	r7, #56	; 0x38
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08e      	sub	sp, #56	; 0x38
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <xQueueGenericSendFromISR+0x3c>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <xQueueGenericSendFromISR+0x40>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <xQueueGenericSendFromISR+0x42>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	623b      	str	r3, [r7, #32]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d103      	bne.n	80045f2 <xQueueGenericSendFromISR+0x6a>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <xQueueGenericSendFromISR+0x6e>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <xQueueGenericSendFromISR+0x70>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	61fb      	str	r3, [r7, #28]
}
 800460e:	bf00      	nop
 8004610:	e7fe      	b.n	8004610 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004612:	f001 fee9 	bl	80063e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004616:	f3ef 8211 	mrs	r2, BASEPRI
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	61ba      	str	r2, [r7, #24]
 800462c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800462e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <xQueueGenericSendFromISR+0xbc>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d12c      	bne.n	800469e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004654:	f000 f910 	bl	8004878 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004658:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004660:	d112      	bne.n	8004688 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d016      	beq.n	8004698 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fef2 	bl	8005458 <xTaskRemoveFromEventList>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e007      	b.n	8004698 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004688:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800468c:	3301      	adds	r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	b25a      	sxtb	r2, r3
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004698:	2301      	movs	r3, #1
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800469c:	e001      	b.n	80046a2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3738      	adds	r7, #56	; 0x38
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08c      	sub	sp, #48	; 0x30
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <xQueueReceive+0x30>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	623b      	str	r3, [r7, #32]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <xQueueReceive+0x3e>
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <xQueueReceive+0x42>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <xQueueReceive+0x44>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <xQueueReceive+0x5e>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	61fb      	str	r3, [r7, #28]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004716:	f001 f867 	bl	80057e8 <xTaskGetSchedulerState>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <xQueueReceive+0x6e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <xQueueReceive+0x72>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <xQueueReceive+0x74>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <xQueueReceive+0x8e>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	61bb      	str	r3, [r7, #24]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004746:	f001 fd6d 	bl	8006224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01f      	beq.n	8004796 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800475a:	f000 f8f7 	bl	800494c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00f      	beq.n	800478e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	3310      	adds	r3, #16
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fe70 	bl	8005458 <xTaskRemoveFromEventList>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <xQueueReceive+0x1bc>)
 8004780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800478e:	f001 fd79 	bl	8006284 <vPortExitCritical>
				return pdPASS;
 8004792:	2301      	movs	r3, #1
 8004794:	e069      	b.n	800486a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479c:	f001 fd72 	bl	8006284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e062      	b.n	800486a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047aa:	f107 0310 	add.w	r3, r7, #16
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 feb6 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b8:	f001 fd64 	bl	8006284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047bc:	f000 fc1e 	bl	8004ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047c0:	f001 fd30 	bl	8006224 <vPortEnterCritical>
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d0:	d103      	bne.n	80047da <xQueueReceive+0x122>
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e0:	b25b      	sxtb	r3, r3
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e6:	d103      	bne.n	80047f0 <xQueueReceive+0x138>
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f0:	f001 fd48 	bl	8006284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f4:	1d3a      	adds	r2, r7, #4
 80047f6:	f107 0310 	add.w	r3, r7, #16
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fea5 	bl	800554c <xTaskCheckForTimeOut>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d123      	bne.n	8004850 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480a:	f000 f917 	bl	8004a3c <prvIsQueueEmpty>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d017      	beq.n	8004844 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fdcb 	bl	80053b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004824:	f000 f8b8 	bl	8004998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004828:	f000 fbf6 	bl	8005018 <xTaskResumeAll>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d189      	bne.n	8004746 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <xQueueReceive+0x1bc>)
 8004834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	e780      	b.n	8004746 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004846:	f000 f8a7 	bl	8004998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800484a:	f000 fbe5 	bl	8005018 <xTaskResumeAll>
 800484e:	e77a      	b.n	8004746 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004852:	f000 f8a1 	bl	8004998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004856:	f000 fbdf 	bl	8005018 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800485a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485c:	f000 f8ee 	bl	8004a3c <prvIsQueueEmpty>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	f43f af6f 	beq.w	8004746 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800486a:	4618      	mov	r0, r3
 800486c:	3730      	adds	r7, #48	; 0x30
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	e000ed04 	.word	0xe000ed04

08004878 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d14d      	bne.n	800493a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 ffbe 	bl	8005824 <xTaskPriorityDisinherit>
 80048a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	e043      	b.n	800493a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d119      	bne.n	80048ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6898      	ldr	r0, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	461a      	mov	r2, r3
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	f002 f8cd 	bl	8006a62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	441a      	add	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d32b      	bcc.n	800493a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	e026      	b.n	800493a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68d8      	ldr	r0, [r3, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	461a      	mov	r2, r3
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	f002 f8b3 	bl	8006a62 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	425b      	negs	r3, r3
 8004906:	441a      	add	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d207      	bcs.n	8004928 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	425b      	negs	r3, r3
 8004922:	441a      	add	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d105      	bne.n	800493a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	3b01      	subs	r3, #1
 8004938:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004942:	697b      	ldr	r3, [r7, #20]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d018      	beq.n	8004990 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	441a      	add	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d303      	bcc.n	8004980 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68d9      	ldr	r1, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	461a      	mov	r2, r3
 800498a:	6838      	ldr	r0, [r7, #0]
 800498c:	f002 f869 	bl	8006a62 <memcpy>
	}
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049a0:	f001 fc40 	bl	8006224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ac:	e011      	b.n	80049d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d012      	beq.n	80049dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3324      	adds	r3, #36	; 0x24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fd4c 	bl	8005458 <xTaskRemoveFromEventList>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049c6:	f000 fe23 	bl	8005610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dce9      	bgt.n	80049ae <prvUnlockQueue+0x16>
 80049da:	e000      	b.n	80049de <prvUnlockQueue+0x46>
					break;
 80049dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	22ff      	movs	r2, #255	; 0xff
 80049e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049e6:	f001 fc4d 	bl	8006284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049ea:	f001 fc1b 	bl	8006224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f6:	e011      	b.n	8004a1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d012      	beq.n	8004a26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3310      	adds	r3, #16
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fd27 	bl	8005458 <xTaskRemoveFromEventList>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a10:	f000 fdfe 	bl	8005610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a14:	7bbb      	ldrb	r3, [r7, #14]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dce9      	bgt.n	80049f8 <prvUnlockQueue+0x60>
 8004a24:	e000      	b.n	8004a28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a30:	f001 fc28 	bl	8006284 <vPortExitCritical>
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a44:	f001 fbee 	bl	8006224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e001      	b.n	8004a5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a5a:	f001 fc13 	bl	8006284 <vPortExitCritical>

	return xReturn;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a70:	f001 fbd8 	bl	8006224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d102      	bne.n	8004a86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e001      	b.n	8004a8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a8a:	f001 fbfb 	bl	8006284 <vPortExitCritical>

	return xReturn;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e014      	b.n	8004ad2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004aa8:	4a0f      	ldr	r2, [pc, #60]	; (8004ae8 <vQueueAddToRegistry+0x50>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ab4:	490c      	ldr	r1, [pc, #48]	; (8004ae8 <vQueueAddToRegistry+0x50>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004abe:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <vQueueAddToRegistry+0x50>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004aca:	e006      	b.n	8004ada <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b07      	cmp	r3, #7
 8004ad6:	d9e7      	bls.n	8004aa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000a5c 	.word	0x20000a5c

08004aec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004afc:	f001 fb92 	bl	8006224 <vPortEnterCritical>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0c:	d103      	bne.n	8004b16 <vQueueWaitForMessageRestricted+0x2a>
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b22:	d103      	bne.n	8004b2c <vQueueWaitForMessageRestricted+0x40>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b2c:	f001 fbaa 	bl	8006284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3324      	adds	r3, #36	; 0x24
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fc5d 	bl	8005400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7ff ff26 	bl	8004998 <prvUnlockQueue>
	}
 8004b4c:	bf00      	nop
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	623b      	str	r3, [r7, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <xTaskCreateStatic+0x46>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	61fb      	str	r3, [r7, #28]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b9a:	23bc      	movs	r3, #188	; 0xbc
 8004b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2bbc      	cmp	r3, #188	; 0xbc
 8004ba2:	d00a      	beq.n	8004bba <xTaskCreateStatic+0x66>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61bb      	str	r3, [r7, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01e      	beq.n	8004bfe <xTaskCreateStatic+0xaa>
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01b      	beq.n	8004bfe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9303      	str	r3, [sp, #12]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f851 	bl	8004c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bf8:	f000 f8ec 	bl	8004dd4 <prvAddNewTaskToReadyList>
 8004bfc:	e001      	b.n	8004c02 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c02:	697b      	ldr	r3, [r7, #20]
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	; 0x30
 8004c10:	af04      	add	r7, sp, #16
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fc21 	bl	8006468 <pvPortMalloc>
 8004c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c2e:	20bc      	movs	r0, #188	; 0xbc
 8004c30:	f001 fc1a 	bl	8006468 <pvPortMalloc>
 8004c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
 8004c42:	e005      	b.n	8004c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f001 fcd3 	bl	80065f0 <vPortFree>
 8004c4a:	e001      	b.n	8004c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9303      	str	r3, [sp, #12]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	9302      	str	r3, [sp, #8]
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f80f 	bl	8004c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c7a:	69f8      	ldr	r0, [r7, #28]
 8004c7c:	f000 f8aa 	bl	8004dd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c80:	2301      	movs	r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e002      	b.n	8004c8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	461a      	mov	r2, r3
 8004cb0:	21a5      	movs	r1, #165	; 0xa5
 8004cb2:	f001 fee4 	bl	8006a7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	617b      	str	r3, [r7, #20]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	e012      	b.n	8004d1c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	7819      	ldrb	r1, [r3, #0]
 8004cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	3334      	adds	r3, #52	; 0x34
 8004d06:	460a      	mov	r2, r1
 8004d08:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	4413      	add	r3, r2
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	d9e9      	bls.n	8004cf6 <prvInitialiseNewTask+0x5e>
 8004d22:	e000      	b.n	8004d26 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004d24:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	2b37      	cmp	r3, #55	; 0x37
 8004d32:	d901      	bls.n	8004d38 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d34:	2337      	movs	r3, #55	; 0x37
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2200      	movs	r2, #0
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f948 	bl	8003fe4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	3318      	adds	r3, #24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff f943 	bl	8003fe4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	3354      	adds	r3, #84	; 0x54
 8004d88:	2260      	movs	r2, #96	; 0x60
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 fe76 	bl	8006a7e <memset>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <prvInitialiseNewTask+0x130>)
 8004d96:	659a      	str	r2, [r3, #88]	; 0x58
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <prvInitialiseNewTask+0x134>)
 8004d9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <prvInitialiseNewTask+0x138>)
 8004da2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	69b8      	ldr	r0, [r7, #24]
 8004daa:	f001 f90f 	bl	8005fcc <pxPortInitialiseStack>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	080096f4 	.word	0x080096f4
 8004dcc:	08009714 	.word	0x08009714
 8004dd0:	080096d4 	.word	0x080096d4

08004dd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ddc:	f001 fa22 	bl	8006224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <prvAddNewTaskToReadyList+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <prvAddNewTaskToReadyList+0xc4>)
 8004de8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dea:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004df2:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <prvAddNewTaskToReadyList+0xc4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d110      	bne.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e00:	f000 fc2a 	bl	8005658 <prvInitialiseTaskLists>
 8004e04:	e00d      	b.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e06:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <prvAddNewTaskToReadyList+0xcc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e0e:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d802      	bhi.n	8004e22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <prvAddNewTaskToReadyList+0xd0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <prvAddNewTaskToReadyList+0xd0>)
 8004e2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <prvAddNewTaskToReadyList+0xd0>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <prvAddNewTaskToReadyList+0xd4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d903      	bls.n	8004e48 <prvAddNewTaskToReadyList+0x74>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <prvAddNewTaskToReadyList+0xd4>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <prvAddNewTaskToReadyList+0xd8>)
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7ff f8cd 	bl	8003ffe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e64:	f001 fa0e 	bl	8006284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <prvAddNewTaskToReadyList+0xcc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00e      	beq.n	8004e8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <prvAddNewTaskToReadyList+0xc8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d207      	bcs.n	8004e8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <prvAddNewTaskToReadyList+0xdc>)
 8004e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000f70 	.word	0x20000f70
 8004e9c:	20000a9c 	.word	0x20000a9c
 8004ea0:	20000f7c 	.word	0x20000f7c
 8004ea4:	20000f8c 	.word	0x20000f8c
 8004ea8:	20000f78 	.word	0x20000f78
 8004eac:	20000aa0 	.word	0x20000aa0
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <vTaskDelay+0x60>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <vTaskDelay+0x30>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	60bb      	str	r3, [r7, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ee4:	f000 f88a 	bl	8004ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ee8:	2100      	movs	r1, #0
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fd08 	bl	8005900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ef0:	f000 f892 	bl	8005018 <xTaskResumeAll>
 8004ef4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <vTaskDelay+0x64>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000f98 	.word	0x20000f98
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	; 0x28
 8004f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f2a:	463a      	mov	r2, r7
 8004f2c:	1d39      	adds	r1, r7, #4
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f802 	bl	8003f3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	9202      	str	r2, [sp, #8]
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	2300      	movs	r3, #0
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	460a      	mov	r2, r1
 8004f4a:	4924      	ldr	r1, [pc, #144]	; (8004fdc <vTaskStartScheduler+0xc0>)
 8004f4c:	4824      	ldr	r0, [pc, #144]	; (8004fe0 <vTaskStartScheduler+0xc4>)
 8004f4e:	f7ff fe01 	bl	8004b54 <xTaskCreateStatic>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4a23      	ldr	r2, [pc, #140]	; (8004fe4 <vTaskStartScheduler+0xc8>)
 8004f56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f58:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <vTaskStartScheduler+0xc8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e001      	b.n	8004f6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f70:	f000 fd1a 	bl	80059a8 <xTimerCreateTimerTask>
 8004f74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d11b      	bne.n	8004fb4 <vTaskStartScheduler+0x98>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	613b      	str	r3, [r7, #16]
}
 8004f8e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f90:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <vTaskStartScheduler+0xcc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3354      	adds	r3, #84	; 0x54
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <vTaskStartScheduler+0xd0>)
 8004f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9a:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <vTaskStartScheduler+0xd4>)
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <vTaskStartScheduler+0xd8>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <vTaskStartScheduler+0xdc>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fae:	f001 f897 	bl	80060e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb2:	e00e      	b.n	8004fd2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fba:	d10a      	bne.n	8004fd2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60fb      	str	r3, [r7, #12]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <vTaskStartScheduler+0xb4>
}
 8004fd2:	bf00      	nop
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	08009660 	.word	0x08009660
 8004fe0:	08005629 	.word	0x08005629
 8004fe4:	20000f94 	.word	0x20000f94
 8004fe8:	20000a9c 	.word	0x20000a9c
 8004fec:	20000010 	.word	0x20000010
 8004ff0:	20000f90 	.word	0x20000f90
 8004ff4:	20000f7c 	.word	0x20000f7c
 8004ff8:	20000f74 	.word	0x20000f74

08004ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <vTaskSuspendAll+0x18>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	4a03      	ldr	r2, [pc, #12]	; (8005014 <vTaskSuspendAll+0x18>)
 8005008:	6013      	str	r3, [r2, #0]
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	20000f98 	.word	0x20000f98

08005018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005026:	4b42      	ldr	r3, [pc, #264]	; (8005130 <xTaskResumeAll+0x118>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <xTaskResumeAll+0x2c>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	603b      	str	r3, [r7, #0]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005044:	f001 f8ee 	bl	8006224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005048:	4b39      	ldr	r3, [pc, #228]	; (8005130 <xTaskResumeAll+0x118>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3b01      	subs	r3, #1
 800504e:	4a38      	ldr	r2, [pc, #224]	; (8005130 <xTaskResumeAll+0x118>)
 8005050:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005052:	4b37      	ldr	r3, [pc, #220]	; (8005130 <xTaskResumeAll+0x118>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d162      	bne.n	8005120 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800505a:	4b36      	ldr	r3, [pc, #216]	; (8005134 <xTaskResumeAll+0x11c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d05e      	beq.n	8005120 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005062:	e02f      	b.n	80050c4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005064:	4b34      	ldr	r3, [pc, #208]	; (8005138 <xTaskResumeAll+0x120>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3318      	adds	r3, #24
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff f821 	bl	80040b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3304      	adds	r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f81c 	bl	80040b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	4b2d      	ldr	r3, [pc, #180]	; (800513c <xTaskResumeAll+0x124>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d903      	bls.n	8005094 <xTaskResumeAll+0x7c>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4a2a      	ldr	r2, [pc, #168]	; (800513c <xTaskResumeAll+0x124>)
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4a27      	ldr	r2, [pc, #156]	; (8005140 <xTaskResumeAll+0x128>)
 80050a2:	441a      	add	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fe ffa7 	bl	8003ffe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b4:	4b23      	ldr	r3, [pc, #140]	; (8005144 <xTaskResumeAll+0x12c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050be:	4b22      	ldr	r3, [pc, #136]	; (8005148 <xTaskResumeAll+0x130>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <xTaskResumeAll+0x120>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1cb      	bne.n	8005064 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050d2:	f000 fb63 	bl	800579c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050d6:	4b1d      	ldr	r3, [pc, #116]	; (800514c <xTaskResumeAll+0x134>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d010      	beq.n	8005104 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050e2:	f000 f847 	bl	8005174 <xTaskIncrementTick>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050ec:	4b16      	ldr	r3, [pc, #88]	; (8005148 <xTaskResumeAll+0x130>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f1      	bne.n	80050e2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <xTaskResumeAll+0x134>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <xTaskResumeAll+0x130>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800510c:	2301      	movs	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <xTaskResumeAll+0x138>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005120:	f001 f8b0 	bl	8006284 <vPortExitCritical>

	return xAlreadyYielded;
 8005124:	68bb      	ldr	r3, [r7, #8]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000f98 	.word	0x20000f98
 8005134:	20000f70 	.word	0x20000f70
 8005138:	20000f30 	.word	0x20000f30
 800513c:	20000f78 	.word	0x20000f78
 8005140:	20000aa0 	.word	0x20000aa0
 8005144:	20000a9c 	.word	0x20000a9c
 8005148:	20000f84 	.word	0x20000f84
 800514c:	20000f80 	.word	0x20000f80
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <xTaskGetTickCount+0x1c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005160:	687b      	ldr	r3, [r7, #4]
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000f74 	.word	0x20000f74

08005174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800517e:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <xTaskIncrementTick+0x150>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 808e 	bne.w	80052a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005188:	4b4f      	ldr	r3, [pc, #316]	; (80052c8 <xTaskIncrementTick+0x154>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005190:	4a4d      	ldr	r2, [pc, #308]	; (80052c8 <xTaskIncrementTick+0x154>)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d120      	bne.n	80051de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800519c:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <xTaskIncrementTick+0x158>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <xTaskIncrementTick+0x48>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	603b      	str	r3, [r7, #0]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <xTaskIncrementTick+0x46>
 80051bc:	4b43      	ldr	r3, [pc, #268]	; (80052cc <xTaskIncrementTick+0x158>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <xTaskIncrementTick+0x15c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a41      	ldr	r2, [pc, #260]	; (80052cc <xTaskIncrementTick+0x158>)
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4a41      	ldr	r2, [pc, #260]	; (80052d0 <xTaskIncrementTick+0x15c>)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <xTaskIncrementTick+0x160>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	4a3f      	ldr	r2, [pc, #252]	; (80052d4 <xTaskIncrementTick+0x160>)
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	f000 fadf 	bl	800579c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051de:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <xTaskIncrementTick+0x164>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d34e      	bcc.n	8005286 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e8:	4b38      	ldr	r3, [pc, #224]	; (80052cc <xTaskIncrementTick+0x158>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <xTaskIncrementTick+0x82>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xTaskIncrementTick+0x84>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <xTaskIncrementTick+0x164>)
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005202:	601a      	str	r2, [r3, #0]
					break;
 8005204:	e03f      	b.n	8005286 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005206:	4b31      	ldr	r3, [pc, #196]	; (80052cc <xTaskIncrementTick+0x158>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d203      	bcs.n	8005226 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800521e:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <xTaskIncrementTick+0x164>)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6013      	str	r3, [r2, #0]
						break;
 8005224:	e02f      	b.n	8005286 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe ff44 	bl	80040b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3318      	adds	r3, #24
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe ff3b 	bl	80040b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4b25      	ldr	r3, [pc, #148]	; (80052dc <xTaskIncrementTick+0x168>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d903      	bls.n	8005256 <xTaskIncrementTick+0xe2>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	4a22      	ldr	r2, [pc, #136]	; (80052dc <xTaskIncrementTick+0x168>)
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <xTaskIncrementTick+0x16c>)
 8005264:	441a      	add	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f7fe fec6 	bl	8003ffe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005276:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <xTaskIncrementTick+0x170>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	429a      	cmp	r2, r3
 800527e:	d3b3      	bcc.n	80051e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005284:	e7b0      	b.n	80051e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <xTaskIncrementTick+0x170>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4914      	ldr	r1, [pc, #80]	; (80052e0 <xTaskIncrementTick+0x16c>)
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d907      	bls.n	80052ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e004      	b.n	80052ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <xTaskIncrementTick+0x174>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <xTaskIncrementTick+0x174>)
 80052ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <xTaskIncrementTick+0x178>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052ba:	697b      	ldr	r3, [r7, #20]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000f98 	.word	0x20000f98
 80052c8:	20000f74 	.word	0x20000f74
 80052cc:	20000f28 	.word	0x20000f28
 80052d0:	20000f2c 	.word	0x20000f2c
 80052d4:	20000f88 	.word	0x20000f88
 80052d8:	20000f90 	.word	0x20000f90
 80052dc:	20000f78 	.word	0x20000f78
 80052e0:	20000aa0 	.word	0x20000aa0
 80052e4:	20000a9c 	.word	0x20000a9c
 80052e8:	20000f80 	.word	0x20000f80
 80052ec:	20000f84 	.word	0x20000f84

080052f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052f6:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <vTaskSwitchContext+0xb0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <vTaskSwitchContext+0xb4>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005304:	e046      	b.n	8005394 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <vTaskSwitchContext+0xb4>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800530c:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <vTaskSwitchContext+0xb8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e010      	b.n	8005336 <vTaskSwitchContext+0x46>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <vTaskSwitchContext+0x40>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	607b      	str	r3, [r7, #4]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <vTaskSwitchContext+0x3e>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b01      	subs	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	491d      	ldr	r1, [pc, #116]	; (80053ac <vTaskSwitchContext+0xbc>)
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0e4      	beq.n	8005314 <vTaskSwitchContext+0x24>
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <vTaskSwitchContext+0xbc>)
 8005356:	4413      	add	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3308      	adds	r3, #8
 800536c:	429a      	cmp	r2, r3
 800536e:	d104      	bne.n	800537a <vTaskSwitchContext+0x8a>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <vTaskSwitchContext+0xc0>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <vTaskSwitchContext+0xb8>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <vTaskSwitchContext+0xc0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3354      	adds	r3, #84	; 0x54
 8005390:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <vTaskSwitchContext+0xc4>)
 8005392:	6013      	str	r3, [r2, #0]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20000f98 	.word	0x20000f98
 80053a4:	20000f84 	.word	0x20000f84
 80053a8:	20000f78 	.word	0x20000f78
 80053ac:	20000aa0 	.word	0x20000aa0
 80053b0:	20000a9c 	.word	0x20000a9c
 80053b4:	20000010 	.word	0x20000010

080053b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053de:	4b07      	ldr	r3, [pc, #28]	; (80053fc <vTaskPlaceOnEventList+0x44>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3318      	adds	r3, #24
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fe fe2d 	bl	8004046 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053ec:	2101      	movs	r1, #1
 80053ee:	6838      	ldr	r0, [r7, #0]
 80053f0:	f000 fa86 	bl	8005900 <prvAddCurrentTaskToDelayedList>
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000a9c 	.word	0x20000a9c

08005400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <vTaskPlaceOnEventListRestricted+0x54>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3318      	adds	r3, #24
 800542e:	4619      	mov	r1, r3
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7fe fde4 	bl	8003ffe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800543c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	68b8      	ldr	r0, [r7, #8]
 8005446:	f000 fa5b 	bl	8005900 <prvAddCurrentTaskToDelayedList>
	}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000a9c 	.word	0x20000a9c

08005458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	3318      	adds	r3, #24
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fe15 	bl	80040b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548e:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <xTaskRemoveFromEventList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11d      	bne.n	80054d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fe0c 	bl	80040b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <xTaskRemoveFromEventList+0xb4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d903      	bls.n	80054b4 <xTaskRemoveFromEventList+0x5c>
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <xTaskRemoveFromEventList+0xb4>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <xTaskRemoveFromEventList+0xb8>)
 80054c2:	441a      	add	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f7fe fd97 	bl	8003ffe <vListInsertEnd>
 80054d0:	e005      	b.n	80054de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3318      	adds	r3, #24
 80054d6:	4619      	mov	r1, r3
 80054d8:	480e      	ldr	r0, [pc, #56]	; (8005514 <xTaskRemoveFromEventList+0xbc>)
 80054da:	f7fe fd90 	bl	8003ffe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <xTaskRemoveFromEventList+0xc0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d905      	bls.n	80054f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <xTaskRemoveFromEventList+0xc4>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e001      	b.n	80054fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80054fc:	697b      	ldr	r3, [r7, #20]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000f98 	.word	0x20000f98
 800550c:	20000f78 	.word	0x20000f78
 8005510:	20000aa0 	.word	0x20000aa0
 8005514:	20000f30 	.word	0x20000f30
 8005518:	20000a9c 	.word	0x20000a9c
 800551c:	20000f84 	.word	0x20000f84

08005520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <vTaskInternalSetTimeOutState+0x24>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <vTaskInternalSetTimeOutState+0x28>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	20000f88 	.word	0x20000f88
 8005548:	20000f74 	.word	0x20000f74

0800554c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	613b      	str	r3, [r7, #16]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60fb      	str	r3, [r7, #12]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800558e:	f000 fe49 	bl	8006224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <xTaskCheckForTimeOut+0xbc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055aa:	d102      	bne.n	80055b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	e023      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <xTaskCheckForTimeOut+0xc0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d007      	beq.n	80055ce <xTaskCheckForTimeOut+0x82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d302      	bcc.n	80055ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e015      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d20b      	bcs.n	80055f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1ad2      	subs	r2, r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff9b 	bl	8005520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e004      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055fa:	f000 fe43 	bl	8006284 <vPortExitCritical>

	return xReturn;
 80055fe:	69fb      	ldr	r3, [r7, #28]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000f74 	.word	0x20000f74
 800560c:	20000f88 	.word	0x20000f88

08005610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <vTaskMissedYield+0x14>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	20000f84 	.word	0x20000f84

08005628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005630:	f000 f852 	bl	80056d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <prvIdleTask+0x28>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d9f9      	bls.n	8005630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <prvIdleTask+0x2c>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800564c:	e7f0      	b.n	8005630 <prvIdleTask+0x8>
 800564e:	bf00      	nop
 8005650:	20000aa0 	.word	0x20000aa0
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	e00c      	b.n	800567e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <prvInitialiseTaskLists+0x60>)
 8005670:	4413      	add	r3, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fc96 	bl	8003fa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3301      	adds	r3, #1
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b37      	cmp	r3, #55	; 0x37
 8005682:	d9ef      	bls.n	8005664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005684:	480d      	ldr	r0, [pc, #52]	; (80056bc <prvInitialiseTaskLists+0x64>)
 8005686:	f7fe fc8d 	bl	8003fa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800568a:	480d      	ldr	r0, [pc, #52]	; (80056c0 <prvInitialiseTaskLists+0x68>)
 800568c:	f7fe fc8a 	bl	8003fa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005690:	480c      	ldr	r0, [pc, #48]	; (80056c4 <prvInitialiseTaskLists+0x6c>)
 8005692:	f7fe fc87 	bl	8003fa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005696:	480c      	ldr	r0, [pc, #48]	; (80056c8 <prvInitialiseTaskLists+0x70>)
 8005698:	f7fe fc84 	bl	8003fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800569c:	480b      	ldr	r0, [pc, #44]	; (80056cc <prvInitialiseTaskLists+0x74>)
 800569e:	f7fe fc81 	bl	8003fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <prvInitialiseTaskLists+0x78>)
 80056a4:	4a05      	ldr	r2, [pc, #20]	; (80056bc <prvInitialiseTaskLists+0x64>)
 80056a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <prvInitialiseTaskLists+0x7c>)
 80056aa:	4a05      	ldr	r2, [pc, #20]	; (80056c0 <prvInitialiseTaskLists+0x68>)
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000aa0 	.word	0x20000aa0
 80056bc:	20000f00 	.word	0x20000f00
 80056c0:	20000f14 	.word	0x20000f14
 80056c4:	20000f30 	.word	0x20000f30
 80056c8:	20000f44 	.word	0x20000f44
 80056cc:	20000f5c 	.word	0x20000f5c
 80056d0:	20000f28 	.word	0x20000f28
 80056d4:	20000f2c 	.word	0x20000f2c

080056d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056de:	e019      	b.n	8005714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056e0:	f000 fda0 	bl	8006224 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <prvCheckTasksWaitingTermination+0x50>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fce1 	bl	80040b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	4a0b      	ldr	r2, [pc, #44]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3b01      	subs	r3, #1
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800570a:	f000 fdbb 	bl	8006284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f810 	bl	8005734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e1      	bne.n	80056e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000f44 	.word	0x20000f44
 800572c:	20000f70 	.word	0x20000f70
 8005730:	20000f58 	.word	0x20000f58

08005734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3354      	adds	r3, #84	; 0x54
 8005740:	4618      	mov	r0, r3
 8005742:	f001 ff7d 	bl	8007640 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800574c:	2b00      	cmp	r3, #0
 800574e:	d108      	bne.n	8005762 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	4618      	mov	r0, r3
 8005756:	f000 ff4b 	bl	80065f0 <vPortFree>
				vPortFree( pxTCB );
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 ff48 	bl	80065f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005760:	e018      	b.n	8005794 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005768:	2b01      	cmp	r3, #1
 800576a:	d103      	bne.n	8005774 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 ff3f 	bl	80065f0 <vPortFree>
	}
 8005772:	e00f      	b.n	8005794 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800577a:	2b02      	cmp	r3, #2
 800577c:	d00a      	beq.n	8005794 <prvDeleteTCB+0x60>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <prvDeleteTCB+0x5e>
	}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a2:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <prvResetNextTaskUnblockTime+0x44>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <prvResetNextTaskUnblockTime+0x14>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <prvResetNextTaskUnblockTime+0x16>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <prvResetNextTaskUnblockTime+0x48>)
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057be:	e008      	b.n	80057d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <prvResetNextTaskUnblockTime+0x44>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4a05      	ldr	r2, [pc, #20]	; (80057e4 <prvResetNextTaskUnblockTime+0x48>)
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000f28 	.word	0x20000f28
 80057e4:	20000f90 	.word	0x20000f90

080057e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <xTaskGetSchedulerState+0x34>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057f6:	2301      	movs	r3, #1
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	e008      	b.n	800580e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <xTaskGetSchedulerState+0x38>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005804:	2302      	movs	r3, #2
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	e001      	b.n	800580e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800580e:	687b      	ldr	r3, [r7, #4]
	}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000f7c 	.word	0x20000f7c
 8005820:	20000f98 	.word	0x20000f98

08005824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d056      	beq.n	80058e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800583a:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <xTaskPriorityDisinherit+0xd0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d00a      	beq.n	800585a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60bb      	str	r3, [r7, #8]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587c:	1e5a      	subs	r2, r3, #1
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588a:	429a      	cmp	r2, r3
 800588c:	d02c      	beq.n	80058e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005892:	2b00      	cmp	r3, #0
 8005894:	d128      	bne.n	80058e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3304      	adds	r3, #4
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fc0c 	bl	80040b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <xTaskPriorityDisinherit+0xd4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d903      	bls.n	80058c8 <xTaskPriorityDisinherit+0xa4>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <xTaskPriorityDisinherit+0xd4>)
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a09      	ldr	r2, [pc, #36]	; (80058fc <xTaskPriorityDisinherit+0xd8>)
 80058d6:	441a      	add	r2, r3
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fe fb8d 	bl	8003ffe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058e8:	697b      	ldr	r3, [r7, #20]
	}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000a9c 	.word	0x20000a9c
 80058f8:	20000f78 	.word	0x20000f78
 80058fc:	20000aa0 	.word	0x20000aa0

08005900 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800590a:	4b21      	ldr	r3, [pc, #132]	; (8005990 <prvAddCurrentTaskToDelayedList+0x90>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005910:	4b20      	ldr	r3, [pc, #128]	; (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3304      	adds	r3, #4
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fbce 	bl	80040b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005922:	d10a      	bne.n	800593a <prvAddCurrentTaskToDelayedList+0x3a>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4819      	ldr	r0, [pc, #100]	; (8005998 <prvAddCurrentTaskToDelayedList+0x98>)
 8005934:	f7fe fb63 	bl	8003ffe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005938:	e026      	b.n	8005988 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4413      	add	r3, r2
 8005940:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005942:	4b14      	ldr	r3, [pc, #80]	; (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d209      	bcs.n	8005966 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f7fe fb71 	bl	8004046 <vListInsert>
}
 8005964:	e010      	b.n	8005988 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f7fe fb67 	bl	8004046 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	429a      	cmp	r2, r3
 8005980:	d202      	bcs.n	8005988 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005982:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6013      	str	r3, [r2, #0]
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000f74 	.word	0x20000f74
 8005994:	20000a9c 	.word	0x20000a9c
 8005998:	20000f5c 	.word	0x20000f5c
 800599c:	20000f2c 	.word	0x20000f2c
 80059a0:	20000f28 	.word	0x20000f28
 80059a4:	20000f90 	.word	0x20000f90

080059a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059b2:	f000 facb 	bl	8005f4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059b6:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <xTimerCreateTimerTask+0x80>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d021      	beq.n	8005a02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059c6:	1d3a      	adds	r2, r7, #4
 80059c8:	f107 0108 	add.w	r1, r7, #8
 80059cc:	f107 030c 	add.w	r3, r7, #12
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe facd 	bl	8003f70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	9202      	str	r2, [sp, #8]
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	2302      	movs	r3, #2
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	2300      	movs	r3, #0
 80059e6:	460a      	mov	r2, r1
 80059e8:	4910      	ldr	r1, [pc, #64]	; (8005a2c <xTimerCreateTimerTask+0x84>)
 80059ea:	4811      	ldr	r0, [pc, #68]	; (8005a30 <xTimerCreateTimerTask+0x88>)
 80059ec:	f7ff f8b2 	bl	8004b54 <xTaskCreateStatic>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <xTimerCreateTimerTask+0x8c>)
 80059f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <xTimerCreateTimerTask+0x8c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059fe:	2301      	movs	r3, #1
 8005a00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	613b      	str	r3, [r7, #16]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000fcc 	.word	0x20000fcc
 8005a2c:	08009668 	.word	0x08009668
 8005a30:	08005b55 	.word	0x08005b55
 8005a34:	20000fd0 	.word	0x20000fd0

08005a38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	623b      	str	r3, [r7, #32]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <xTimerGenericCommand+0x98>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d02a      	beq.n	8005ac4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	dc18      	bgt.n	8005ab2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a80:	f7ff feb2 	bl	80057e8 <xTaskGetSchedulerState>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d109      	bne.n	8005a9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <xTimerGenericCommand+0x98>)
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	f107 0110 	add.w	r1, r7, #16
 8005a92:	2300      	movs	r3, #0
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	f7fe fc79 	bl	800438c <xQueueGenericSend>
 8005a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8005a9c:	e012      	b.n	8005ac4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <xTimerGenericCommand+0x98>)
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	f107 0110 	add.w	r1, r7, #16
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f7fe fc6f 	bl	800438c <xQueueGenericSend>
 8005aae:	6278      	str	r0, [r7, #36]	; 0x24
 8005ab0:	e008      	b.n	8005ac4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <xTimerGenericCommand+0x98>)
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f107 0110 	add.w	r1, r7, #16
 8005aba:	2300      	movs	r3, #0
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	f7fe fd63 	bl	8004588 <xQueueGenericSendFromISR>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3728      	adds	r7, #40	; 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000fcc 	.word	0x20000fcc

08005ad4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ade:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <prvProcessExpiredTimer+0x7c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fae3 	bl	80040b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d122      	bne.n	8005b40 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	18d1      	adds	r1, r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	6978      	ldr	r0, [r7, #20]
 8005b08:	f000 f8c8 	bl	8005c9c <prvInsertTimerInActiveList>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b12:	2300      	movs	r3, #0
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	6978      	ldr	r0, [r7, #20]
 8005b1e:	f7ff ff8b 	bl	8005a38 <xTimerGenericCommand>
 8005b22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60fb      	str	r3, [r7, #12]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	6978      	ldr	r0, [r7, #20]
 8005b46:	4798      	blx	r3
}
 8005b48:	bf00      	nop
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000fc4 	.word	0x20000fc4

08005b54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b5c:	f107 0308 	add.w	r3, r7, #8
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f857 	bl	8005c14 <prvGetNextExpireTime>
 8005b66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f803 	bl	8005b78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b72:	f000 f8d5 	bl	8005d20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b76:	e7f1      	b.n	8005b5c <prvTimerTask+0x8>

08005b78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b82:	f7ff fa3b 	bl	8004ffc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f866 	bl	8005c5c <prvSampleTimeNow>
 8005b90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d130      	bne.n	8005bfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <prvProcessTimerOrBlockTask+0x3c>
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d806      	bhi.n	8005bb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ba6:	f7ff fa37 	bl	8005018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff91 	bl	8005ad4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bb2:	e024      	b.n	8005bfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bba:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <prvProcessTimerOrBlockTask+0x90>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <prvProcessTimerOrBlockTask+0x94>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f7fe ff87 	bl	8004aec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bde:	f7ff fa1b 	bl	8005018 <xTaskResumeAll>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <prvProcessTimerOrBlockTask+0x98>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
}
 8005bf8:	e001      	b.n	8005bfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005bfa:	f7ff fa0d 	bl	8005018 <xTaskResumeAll>
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000fc8 	.word	0x20000fc8
 8005c0c:	20000fcc 	.word	0x20000fcc
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <prvGetNextExpireTime+0x44>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf0c      	ite	eq
 8005c26:	2301      	moveq	r3, #1
 8005c28:	2300      	movne	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <prvGetNextExpireTime+0x44>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e001      	b.n	8005c4a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	20000fc4 	.word	0x20000fc4

08005c5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c64:	f7ff fa76 	bl	8005154 <xTaskGetTickCount>
 8005c68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <prvSampleTimeNow+0x3c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d205      	bcs.n	8005c80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c74:	f000 f908 	bl	8005e88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c86:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <prvSampleTimeNow+0x3c>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000fd4 	.word	0x20000fd4

08005c9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d812      	bhi.n	8005ce8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d302      	bcc.n	8005cd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e01b      	b.n	8005d0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <prvInsertTimerInActiveList+0x7c>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe f9b0 	bl	8004046 <vListInsert>
 8005ce6:	e012      	b.n	8005d0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d206      	bcs.n	8005cfe <prvInsertTimerInActiveList+0x62>
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e007      	b.n	8005d0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <prvInsertTimerInActiveList+0x80>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f7fe f99c 	bl	8004046 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d0e:	697b      	ldr	r3, [r7, #20]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000fc8 	.word	0x20000fc8
 8005d1c:	20000fc4 	.word	0x20000fc4

08005d20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	; 0x38
 8005d24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d26:	e09d      	b.n	8005e64 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	da18      	bge.n	8005d60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	3304      	adds	r3, #4
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	61fb      	str	r3, [r7, #28]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d56:	6850      	ldr	r0, [r2, #4]
 8005d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d5a:	6892      	ldr	r2, [r2, #8]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	db7d      	blt.n	8005e62 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	3304      	adds	r3, #4
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe f99e 	bl	80040b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff ff6c 	bl	8005c5c <prvSampleTimeNow>
 8005d84:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b09      	cmp	r3, #9
 8005d8a:	d86b      	bhi.n	8005e64 <prvProcessReceivedCommands+0x144>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <prvProcessReceivedCommands+0x74>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005dbd 	.word	0x08005dbd
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005dbd 	.word	0x08005dbd
 8005da0:	08005e65 	.word	0x08005e65
 8005da4:	08005e19 	.word	0x08005e19
 8005da8:	08005e51 	.word	0x08005e51
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dbd 	.word	0x08005dbd
 8005db4:	08005e65 	.word	0x08005e65
 8005db8:	08005e19 	.word	0x08005e19
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	18d1      	adds	r1, r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dca:	f7ff ff67 	bl	8005c9c <prvInsertTimerInActiveList>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d047      	beq.n	8005e64 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dda:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d13f      	bne.n	8005e64 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	441a      	add	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	2100      	movs	r1, #0
 8005df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df6:	f7ff fe1f 	bl	8005a38 <xTimerGenericCommand>
 8005dfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d130      	bne.n	8005e64 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	61bb      	str	r3, [r7, #24]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	617b      	str	r3, [r7, #20]
}
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	18d1      	adds	r1, r2, r3
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4a:	f7ff ff27 	bl	8005c9c <prvInsertTimerInActiveList>
					break;
 8005e4e:	e009      	b.n	8005e64 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e5c:	f000 fbc8 	bl	80065f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e60:	e000      	b.n	8005e64 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e62:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <prvProcessReceivedCommands+0x164>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	1d39      	adds	r1, r7, #4
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fc23 	bl	80046b8 <xQueueReceive>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f47f af57 	bne.w	8005d28 <prvProcessReceivedCommands+0x8>
	}
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	3730      	adds	r7, #48	; 0x30
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20000fcc 	.word	0x20000fcc

08005e88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e8e:	e045      	b.n	8005f1c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e90:	4b2c      	ldr	r3, [pc, #176]	; (8005f44 <prvSwitchTimerLists+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <prvSwitchTimerLists+0xbc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe f905 	bl	80040b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d12e      	bne.n	8005f1c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d90e      	bls.n	8005eee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <prvSwitchTimerLists+0xbc>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f7fe f8ad 	bl	8004046 <vListInsert>
 8005eec:	e016      	b.n	8005f1c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff fd9d 	bl	8005a38 <xTimerGenericCommand>
 8005efe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	603b      	str	r3, [r7, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <prvSwitchTimerLists+0xbc>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1b4      	bne.n	8005e90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f26:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <prvSwitchTimerLists+0xbc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <prvSwitchTimerLists+0xc0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <prvSwitchTimerLists+0xbc>)
 8005f32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f34:	4a04      	ldr	r2, [pc, #16]	; (8005f48 <prvSwitchTimerLists+0xc0>)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	6013      	str	r3, [r2, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000fc4 	.word	0x20000fc4
 8005f48:	20000fc8 	.word	0x20000fc8

08005f4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f52:	f000 f967 	bl	8006224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f56:	4b15      	ldr	r3, [pc, #84]	; (8005fac <prvCheckForValidListAndQueue+0x60>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d120      	bne.n	8005fa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f5e:	4814      	ldr	r0, [pc, #80]	; (8005fb0 <prvCheckForValidListAndQueue+0x64>)
 8005f60:	f7fe f820 	bl	8003fa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f64:	4813      	ldr	r0, [pc, #76]	; (8005fb4 <prvCheckForValidListAndQueue+0x68>)
 8005f66:	f7fe f81d 	bl	8003fa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f6a:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <prvCheckForValidListAndQueue+0x6c>)
 8005f6c:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <prvCheckForValidListAndQueue+0x64>)
 8005f6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f70:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <prvCheckForValidListAndQueue+0x70>)
 8005f72:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <prvCheckForValidListAndQueue+0x68>)
 8005f74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f76:	2300      	movs	r3, #0
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <prvCheckForValidListAndQueue+0x74>)
 8005f7c:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <prvCheckForValidListAndQueue+0x78>)
 8005f7e:	2110      	movs	r1, #16
 8005f80:	200a      	movs	r0, #10
 8005f82:	f7fe f92b 	bl	80041dc <xQueueGenericCreateStatic>
 8005f86:	4603      	mov	r3, r0
 8005f88:	4a08      	ldr	r2, [pc, #32]	; (8005fac <prvCheckForValidListAndQueue+0x60>)
 8005f8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f8c:	4b07      	ldr	r3, [pc, #28]	; (8005fac <prvCheckForValidListAndQueue+0x60>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <prvCheckForValidListAndQueue+0x60>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	490b      	ldr	r1, [pc, #44]	; (8005fc8 <prvCheckForValidListAndQueue+0x7c>)
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fd7c 	bl	8004a98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fa0:	f000 f970 	bl	8006284 <vPortExitCritical>
}
 8005fa4:	bf00      	nop
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000fcc 	.word	0x20000fcc
 8005fb0:	20000f9c 	.word	0x20000f9c
 8005fb4:	20000fb0 	.word	0x20000fb0
 8005fb8:	20000fc4 	.word	0x20000fc4
 8005fbc:	20000fc8 	.word	0x20000fc8
 8005fc0:	20001078 	.word	0x20001078
 8005fc4:	20000fd8 	.word	0x20000fd8
 8005fc8:	08009670 	.word	0x08009670

08005fcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3b04      	subs	r3, #4
 8005fdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3b04      	subs	r3, #4
 8005ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ffc:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <pxPortInitialiseStack+0x64>)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3b14      	subs	r3, #20
 8006006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3b04      	subs	r3, #4
 8006012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f06f 0202 	mvn.w	r2, #2
 800601a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3b20      	subs	r3, #32
 8006020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006022:	68fb      	ldr	r3, [r7, #12]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	08006035 	.word	0x08006035

08006034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <prvTaskExitError+0x54>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006046:	d00a      	beq.n	800605e <prvTaskExitError+0x2a>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	60fb      	str	r3, [r7, #12]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <prvTaskExitError+0x28>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	60bb      	str	r3, [r7, #8]
}
 8006070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006072:	bf00      	nop
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0fc      	beq.n	8006074 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	2000000c 	.word	0x2000000c
 800608c:	00000000 	.word	0x00000000

08006090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <pxCurrentTCBConst2>)
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	6808      	ldr	r0, [r1, #0]
 8006096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	f380 8809 	msr	PSP, r0
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	4770      	bx	lr
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst2>:
 80060b0:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060b8:	4808      	ldr	r0, [pc, #32]	; (80060dc <prvPortStartFirstTask+0x24>)
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f380 8808 	msr	MSP, r0
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8814 	msr	CONTROL, r0
 80060ca:	b662      	cpsie	i
 80060cc:	b661      	cpsie	f
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	df00      	svc	0
 80060d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060da:	bf00      	nop
 80060dc:	e000ed08 	.word	0xe000ed08

080060e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060e6:	4b46      	ldr	r3, [pc, #280]	; (8006200 <xPortStartScheduler+0x120>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a46      	ldr	r2, [pc, #280]	; (8006204 <xPortStartScheduler+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10a      	bne.n	8006106 <xPortStartScheduler+0x26>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006106:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <xPortStartScheduler+0x120>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3f      	ldr	r2, [pc, #252]	; (8006208 <xPortStartScheduler+0x128>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10a      	bne.n	8006126 <xPortStartScheduler+0x46>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60fb      	str	r3, [r7, #12]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006126:	4b39      	ldr	r3, [pc, #228]	; (800620c <xPortStartScheduler+0x12c>)
 8006128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <xPortStartScheduler+0x130>)
 800614c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800614e:	4b31      	ldr	r3, [pc, #196]	; (8006214 <xPortStartScheduler+0x134>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006154:	e009      	b.n	800616a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006156:	4b2f      	ldr	r3, [pc, #188]	; (8006214 <xPortStartScheduler+0x134>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3b01      	subs	r3, #1
 800615c:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <xPortStartScheduler+0x134>)
 800615e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d0ef      	beq.n	8006156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006176:	4b27      	ldr	r3, [pc, #156]	; (8006214 <xPortStartScheduler+0x134>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1c3 0307 	rsb	r3, r3, #7
 800617e:	2b04      	cmp	r3, #4
 8006180:	d00a      	beq.n	8006198 <xPortStartScheduler+0xb8>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60bb      	str	r3, [r7, #8]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <xPortStartScheduler+0x134>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <xPortStartScheduler+0x134>)
 80061a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061a2:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <xPortStartScheduler+0x134>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061aa:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <xPortStartScheduler+0x134>)
 80061ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061b6:	4b18      	ldr	r3, [pc, #96]	; (8006218 <xPortStartScheduler+0x138>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <xPortStartScheduler+0x138>)
 80061bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <xPortStartScheduler+0x138>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <xPortStartScheduler+0x138>)
 80061c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061ce:	f000 f8dd 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061d2:	4b12      	ldr	r3, [pc, #72]	; (800621c <xPortStartScheduler+0x13c>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061d8:	f000 f8fc 	bl	80063d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061dc:	4b10      	ldr	r3, [pc, #64]	; (8006220 <xPortStartScheduler+0x140>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <xPortStartScheduler+0x140>)
 80061e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061e8:	f7ff ff66 	bl	80060b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061ec:	f7ff f880 	bl	80052f0 <vTaskSwitchContext>
	prvTaskExitError();
 80061f0:	f7ff ff20 	bl	8006034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	e000ed00 	.word	0xe000ed00
 8006204:	410fc271 	.word	0x410fc271
 8006208:	410fc270 	.word	0x410fc270
 800620c:	e000e400 	.word	0xe000e400
 8006210:	200010c8 	.word	0x200010c8
 8006214:	200010cc 	.word	0x200010cc
 8006218:	e000ed20 	.word	0xe000ed20
 800621c:	2000000c 	.word	0x2000000c
 8006220:	e000ef34 	.word	0xe000ef34

08006224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	607b      	str	r3, [r7, #4]
}
 800623c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <vPortEnterCritical+0x58>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a0d      	ldr	r2, [pc, #52]	; (800627c <vPortEnterCritical+0x58>)
 8006246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <vPortEnterCritical+0x58>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10f      	bne.n	8006270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <vPortEnterCritical+0x5c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <vPortEnterCritical+0x4c>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	603b      	str	r3, [r7, #0]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <vPortEnterCritical+0x4a>
	}
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	2000000c 	.word	0x2000000c
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <vPortExitCritical+0x50>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <vPortExitCritical+0x24>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	607b      	str	r3, [r7, #4]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <vPortExitCritical+0x50>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <vPortExitCritical+0x50>)
 80062b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d105      	bne.n	80062c6 <vPortExitCritical+0x42>
 80062ba:	2300      	movs	r3, #0
 80062bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f383 8811 	msr	BASEPRI, r3
}
 80062c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c
	...

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f01e 0f10 	tst.w	lr, #16
 80062f0:	bf08      	it	eq
 80062f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006304:	f380 8811 	msr	BASEPRI, r0
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f7fe ffee 	bl	80052f0 <vTaskSwitchContext>
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f380 8811 	msr	BASEPRI, r0
 800631c:	bc09      	pop	{r0, r3}
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	6808      	ldr	r0, [r1, #0]
 8006322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006326:	f01e 0f10 	tst.w	lr, #16
 800632a:	bf08      	it	eq
 800632c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006330:	f380 8809 	msr	PSP, r0
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	f3af 8000 	nop.w

08006340 <pxCurrentTCBConst>:
 8006340:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006362:	f7fe ff07 	bl	8005174 <xTaskIncrementTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <SysTick_Handler+0x40>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <vPortSetupTimerInterrupt+0x38>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <vPortSetupTimerInterrupt+0x44>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010
 80063c4:	e000e018 	.word	0xe000e018
 80063c8:	20000000 	.word	0x20000000
 80063cc:	10624dd3 	.word	0x10624dd3
 80063d0:	e000e014 	.word	0xe000e014

080063d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063e4 <vPortEnableVFP+0x10>
 80063d8:	6801      	ldr	r1, [r0, #0]
 80063da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063de:	6001      	str	r1, [r0, #0]
 80063e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063e2:	bf00      	nop
 80063e4:	e000ed88 	.word	0xe000ed88

080063e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d914      	bls.n	8006424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063fa:	4a17      	ldr	r2, [pc, #92]	; (8006458 <vPortValidateInterruptPriority+0x70>)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <vPortValidateInterruptPriority+0x74>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	7afa      	ldrb	r2, [r7, #11]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20a      	bcs.n	8006424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006424:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <vPortValidateInterruptPriority+0x78>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <vPortValidateInterruptPriority+0x7c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d90a      	bls.n	800644a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	603b      	str	r3, [r7, #0]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <vPortValidateInterruptPriority+0x60>
	}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	e000e3f0 	.word	0xe000e3f0
 800645c:	200010c8 	.word	0x200010c8
 8006460:	e000ed0c 	.word	0xe000ed0c
 8006464:	200010cc 	.word	0x200010cc

08006468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006474:	f7fe fdc2 	bl	8004ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006478:	4b58      	ldr	r3, [pc, #352]	; (80065dc <pvPortMalloc+0x174>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006480:	f000 f910 	bl	80066a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006484:	4b56      	ldr	r3, [pc, #344]	; (80065e0 <pvPortMalloc+0x178>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 808e 	bne.w	80065ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01d      	beq.n	80064d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006498:	2208      	movs	r2, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d014      	beq.n	80064d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f023 0307 	bic.w	r3, r3, #7
 80064b0:	3308      	adds	r3, #8
 80064b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <pvPortMalloc+0x6c>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	617b      	str	r3, [r7, #20]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d069      	beq.n	80065ae <pvPortMalloc+0x146>
 80064da:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <pvPortMalloc+0x17c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d864      	bhi.n	80065ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064e4:	4b40      	ldr	r3, [pc, #256]	; (80065e8 <pvPortMalloc+0x180>)
 80064e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064e8:	4b3f      	ldr	r3, [pc, #252]	; (80065e8 <pvPortMalloc+0x180>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ee:	e004      	b.n	80064fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d903      	bls.n	800650c <pvPortMalloc+0xa4>
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f1      	bne.n	80064f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800650c:	4b33      	ldr	r3, [pc, #204]	; (80065dc <pvPortMalloc+0x174>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006512:	429a      	cmp	r2, r3
 8006514:	d04b      	beq.n	80065ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2208      	movs	r2, #8
 800651c:	4413      	add	r3, r2
 800651e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	2308      	movs	r3, #8
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	429a      	cmp	r2, r3
 8006536:	d91f      	bls.n	8006578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <pvPortMalloc+0xf8>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	613b      	str	r3, [r7, #16]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006572:	69b8      	ldr	r0, [r7, #24]
 8006574:	f000 f8f8 	bl	8006768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <pvPortMalloc+0x17c>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <pvPortMalloc+0x17c>)
 8006584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006586:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <pvPortMalloc+0x17c>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b18      	ldr	r3, [pc, #96]	; (80065ec <pvPortMalloc+0x184>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d203      	bcs.n	800659a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006592:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <pvPortMalloc+0x17c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <pvPortMalloc+0x184>)
 8006598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <pvPortMalloc+0x178>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065ae:	f7fe fd33 	bl	8005018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <pvPortMalloc+0x16a>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	60fb      	str	r3, [r7, #12]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <pvPortMalloc+0x168>
	return pvReturn;
 80065d2:	69fb      	ldr	r3, [r7, #28]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	; 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20001cd8 	.word	0x20001cd8
 80065e0:	20001ce4 	.word	0x20001ce4
 80065e4:	20001cdc 	.word	0x20001cdc
 80065e8:	20001cd0 	.word	0x20001cd0
 80065ec:	20001ce0 	.word	0x20001ce0

080065f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d048      	beq.n	8006694 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006602:	2308      	movs	r3, #8
 8006604:	425b      	negs	r3, r3
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	4b21      	ldr	r3, [pc, #132]	; (800669c <vPortFree+0xac>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <vPortFree+0x44>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60fb      	str	r3, [r7, #12]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <vPortFree+0x62>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60bb      	str	r3, [r7, #8]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <vPortFree+0xac>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d115      	bne.n	8006694 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <vPortFree+0xac>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	43db      	mvns	r3, r3
 8006672:	401a      	ands	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006678:	f7fe fcc0 	bl	8004ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vPortFree+0xb0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4413      	add	r3, r2
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vPortFree+0xb0>)
 8006688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f000 f86c 	bl	8006768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006690:	f7fe fcc2 	bl	8005018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20001ce4 	.word	0x20001ce4
 80066a0:	20001cdc 	.word	0x20001cdc

080066a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <prvHeapInit+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvHeapInit+0xac>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <prvHeapInit+0xb0>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <prvHeapInit+0xb0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f0:	2208      	movs	r2, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <prvHeapInit+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvHeapInit+0xb4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvHeapInit+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvHeapInit+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <prvHeapInit+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <prvHeapInit+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvHeapInit+0xc0>)
 800673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	200010d0 	.word	0x200010d0
 8006754:	20001cd0 	.word	0x20001cd0
 8006758:	20001cd8 	.word	0x20001cd8
 800675c:	20001ce0 	.word	0x20001ce0
 8006760:	20001cdc 	.word	0x20001cdc
 8006764:	20001ce4 	.word	0x20001ce4

08006768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <prvInsertBlockIntoFreeList+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <prvInsertBlockIntoFreeList+0x14>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d8f7      	bhi.n	8006776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d108      	bne.n	80067aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d118      	bne.n	80067f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00d      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e008      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e003      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d002      	beq.n	8006806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20001cd0 	.word	0x20001cd0
 8006818:	20001cd8 	.word	0x20001cd8

0800681c <__errno>:
 800681c:	4b01      	ldr	r3, [pc, #4]	; (8006824 <__errno+0x8>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000010 	.word	0x20000010

08006828 <std>:
 8006828:	2300      	movs	r3, #0
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	e9c0 3300 	strd	r3, r3, [r0]
 8006832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	; 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	6183      	str	r3, [r0, #24]
 8006840:	4619      	mov	r1, r3
 8006842:	2208      	movs	r2, #8
 8006844:	305c      	adds	r0, #92	; 0x5c
 8006846:	f000 f91a 	bl	8006a7e <memset>
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <std+0x38>)
 800684c:	6263      	str	r3, [r4, #36]	; 0x24
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <std+0x3c>)
 8006850:	62a3      	str	r3, [r4, #40]	; 0x28
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <std+0x40>)
 8006854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x44>)
 8006858:	6224      	str	r4, [r4, #32]
 800685a:	6323      	str	r3, [r4, #48]	; 0x30
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	08007719 	.word	0x08007719
 8006864:	0800773b 	.word	0x0800773b
 8006868:	08007773 	.word	0x08007773
 800686c:	08007797 	.word	0x08007797

08006870 <_cleanup_r>:
 8006870:	4901      	ldr	r1, [pc, #4]	; (8006878 <_cleanup_r+0x8>)
 8006872:	f000 b8af 	b.w	80069d4 <_fwalk_reent>
 8006876:	bf00      	nop
 8006878:	080087a1 	.word	0x080087a1

0800687c <__sfmoreglue>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	2268      	movs	r2, #104	; 0x68
 8006880:	1e4d      	subs	r5, r1, #1
 8006882:	4355      	muls	r5, r2
 8006884:	460e      	mov	r6, r1
 8006886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800688a:	f000 f921 	bl	8006ad0 <_malloc_r>
 800688e:	4604      	mov	r4, r0
 8006890:	b140      	cbz	r0, 80068a4 <__sfmoreglue+0x28>
 8006892:	2100      	movs	r1, #0
 8006894:	e9c0 1600 	strd	r1, r6, [r0]
 8006898:	300c      	adds	r0, #12
 800689a:	60a0      	str	r0, [r4, #8]
 800689c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068a0:	f000 f8ed 	bl	8006a7e <memset>
 80068a4:	4620      	mov	r0, r4
 80068a6:	bd70      	pop	{r4, r5, r6, pc}

080068a8 <__sfp_lock_acquire>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sfp_lock_acquire+0x8>)
 80068aa:	f000 b8d8 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20001ce9 	.word	0x20001ce9

080068b4 <__sfp_lock_release>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sfp_lock_release+0x8>)
 80068b6:	f000 b8d3 	b.w	8006a60 <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20001ce9 	.word	0x20001ce9

080068c0 <__sinit_lock_acquire>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sinit_lock_acquire+0x8>)
 80068c2:	f000 b8cc 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80068c6:	bf00      	nop
 80068c8:	20001cea 	.word	0x20001cea

080068cc <__sinit_lock_release>:
 80068cc:	4801      	ldr	r0, [pc, #4]	; (80068d4 <__sinit_lock_release+0x8>)
 80068ce:	f000 b8c7 	b.w	8006a60 <__retarget_lock_release_recursive>
 80068d2:	bf00      	nop
 80068d4:	20001cea 	.word	0x20001cea

080068d8 <__sinit>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	f7ff fff0 	bl	80068c0 <__sinit_lock_acquire>
 80068e0:	69a3      	ldr	r3, [r4, #24]
 80068e2:	b11b      	cbz	r3, 80068ec <__sinit+0x14>
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e8:	f7ff bff0 	b.w	80068cc <__sinit_lock_release>
 80068ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068f0:	6523      	str	r3, [r4, #80]	; 0x50
 80068f2:	4b13      	ldr	r3, [pc, #76]	; (8006940 <__sinit+0x68>)
 80068f4:	4a13      	ldr	r2, [pc, #76]	; (8006944 <__sinit+0x6c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	bf04      	itt	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	61a3      	streq	r3, [r4, #24]
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f820 	bl	8006948 <__sfp>
 8006908:	6060      	str	r0, [r4, #4]
 800690a:	4620      	mov	r0, r4
 800690c:	f000 f81c 	bl	8006948 <__sfp>
 8006910:	60a0      	str	r0, [r4, #8]
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f818 	bl	8006948 <__sfp>
 8006918:	2200      	movs	r2, #0
 800691a:	60e0      	str	r0, [r4, #12]
 800691c:	2104      	movs	r1, #4
 800691e:	6860      	ldr	r0, [r4, #4]
 8006920:	f7ff ff82 	bl	8006828 <std>
 8006924:	68a0      	ldr	r0, [r4, #8]
 8006926:	2201      	movs	r2, #1
 8006928:	2109      	movs	r1, #9
 800692a:	f7ff ff7d 	bl	8006828 <std>
 800692e:	68e0      	ldr	r0, [r4, #12]
 8006930:	2202      	movs	r2, #2
 8006932:	2112      	movs	r1, #18
 8006934:	f7ff ff78 	bl	8006828 <std>
 8006938:	2301      	movs	r3, #1
 800693a:	61a3      	str	r3, [r4, #24]
 800693c:	e7d2      	b.n	80068e4 <__sinit+0xc>
 800693e:	bf00      	nop
 8006940:	08009734 	.word	0x08009734
 8006944:	08006871 	.word	0x08006871

08006948 <__sfp>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	4607      	mov	r7, r0
 800694c:	f7ff ffac 	bl	80068a8 <__sfp_lock_acquire>
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <__sfp+0x84>)
 8006952:	681e      	ldr	r6, [r3, #0]
 8006954:	69b3      	ldr	r3, [r6, #24]
 8006956:	b913      	cbnz	r3, 800695e <__sfp+0x16>
 8006958:	4630      	mov	r0, r6
 800695a:	f7ff ffbd 	bl	80068d8 <__sinit>
 800695e:	3648      	adds	r6, #72	; 0x48
 8006960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006964:	3b01      	subs	r3, #1
 8006966:	d503      	bpl.n	8006970 <__sfp+0x28>
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	b30b      	cbz	r3, 80069b0 <__sfp+0x68>
 800696c:	6836      	ldr	r6, [r6, #0]
 800696e:	e7f7      	b.n	8006960 <__sfp+0x18>
 8006970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006974:	b9d5      	cbnz	r5, 80069ac <__sfp+0x64>
 8006976:	4b16      	ldr	r3, [pc, #88]	; (80069d0 <__sfp+0x88>)
 8006978:	60e3      	str	r3, [r4, #12]
 800697a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800697e:	6665      	str	r5, [r4, #100]	; 0x64
 8006980:	f000 f86c 	bl	8006a5c <__retarget_lock_init_recursive>
 8006984:	f7ff ff96 	bl	80068b4 <__sfp_lock_release>
 8006988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800698c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006990:	6025      	str	r5, [r4, #0]
 8006992:	61a5      	str	r5, [r4, #24]
 8006994:	2208      	movs	r2, #8
 8006996:	4629      	mov	r1, r5
 8006998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800699c:	f000 f86f 	bl	8006a7e <memset>
 80069a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069a8:	4620      	mov	r0, r4
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ac:	3468      	adds	r4, #104	; 0x68
 80069ae:	e7d9      	b.n	8006964 <__sfp+0x1c>
 80069b0:	2104      	movs	r1, #4
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff ff62 	bl	800687c <__sfmoreglue>
 80069b8:	4604      	mov	r4, r0
 80069ba:	6030      	str	r0, [r6, #0]
 80069bc:	2800      	cmp	r0, #0
 80069be:	d1d5      	bne.n	800696c <__sfp+0x24>
 80069c0:	f7ff ff78 	bl	80068b4 <__sfp_lock_release>
 80069c4:	230c      	movs	r3, #12
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	e7ee      	b.n	80069a8 <__sfp+0x60>
 80069ca:	bf00      	nop
 80069cc:	08009734 	.word	0x08009734
 80069d0:	ffff0001 	.word	0xffff0001

080069d4 <_fwalk_reent>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4606      	mov	r6, r0
 80069da:	4688      	mov	r8, r1
 80069dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069e0:	2700      	movs	r7, #0
 80069e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e6:	f1b9 0901 	subs.w	r9, r9, #1
 80069ea:	d505      	bpl.n	80069f8 <_fwalk_reent+0x24>
 80069ec:	6824      	ldr	r4, [r4, #0]
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	d1f7      	bne.n	80069e2 <_fwalk_reent+0xe>
 80069f2:	4638      	mov	r0, r7
 80069f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f8:	89ab      	ldrh	r3, [r5, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d907      	bls.n	8006a0e <_fwalk_reent+0x3a>
 80069fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a02:	3301      	adds	r3, #1
 8006a04:	d003      	beq.n	8006a0e <_fwalk_reent+0x3a>
 8006a06:	4629      	mov	r1, r5
 8006a08:	4630      	mov	r0, r6
 8006a0a:	47c0      	blx	r8
 8006a0c:	4307      	orrs	r7, r0
 8006a0e:	3568      	adds	r5, #104	; 0x68
 8006a10:	e7e9      	b.n	80069e6 <_fwalk_reent+0x12>
	...

08006a14 <__libc_init_array>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4d0d      	ldr	r5, [pc, #52]	; (8006a4c <__libc_init_array+0x38>)
 8006a18:	4c0d      	ldr	r4, [pc, #52]	; (8006a50 <__libc_init_array+0x3c>)
 8006a1a:	1b64      	subs	r4, r4, r5
 8006a1c:	10a4      	asrs	r4, r4, #2
 8006a1e:	2600      	movs	r6, #0
 8006a20:	42a6      	cmp	r6, r4
 8006a22:	d109      	bne.n	8006a38 <__libc_init_array+0x24>
 8006a24:	4d0b      	ldr	r5, [pc, #44]	; (8006a54 <__libc_init_array+0x40>)
 8006a26:	4c0c      	ldr	r4, [pc, #48]	; (8006a58 <__libc_init_array+0x44>)
 8006a28:	f002 fd78 	bl	800951c <_init>
 8006a2c:	1b64      	subs	r4, r4, r5
 8006a2e:	10a4      	asrs	r4, r4, #2
 8006a30:	2600      	movs	r6, #0
 8006a32:	42a6      	cmp	r6, r4
 8006a34:	d105      	bne.n	8006a42 <__libc_init_array+0x2e>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3c:	4798      	blx	r3
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7ee      	b.n	8006a20 <__libc_init_array+0xc>
 8006a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a46:	4798      	blx	r3
 8006a48:	3601      	adds	r6, #1
 8006a4a:	e7f2      	b.n	8006a32 <__libc_init_array+0x1e>
 8006a4c:	08009b08 	.word	0x08009b08
 8006a50:	08009b08 	.word	0x08009b08
 8006a54:	08009b08 	.word	0x08009b08
 8006a58:	08009b0c 	.word	0x08009b0c

08006a5c <__retarget_lock_init_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_acquire_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__retarget_lock_release_recursive>:
 8006a60:	4770      	bx	lr

08006a62 <memcpy>:
 8006a62:	440a      	add	r2, r1
 8006a64:	4291      	cmp	r1, r2
 8006a66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a6a:	d100      	bne.n	8006a6e <memcpy+0xc>
 8006a6c:	4770      	bx	lr
 8006a6e:	b510      	push	{r4, lr}
 8006a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a78:	4291      	cmp	r1, r2
 8006a7a:	d1f9      	bne.n	8006a70 <memcpy+0xe>
 8006a7c:	bd10      	pop	{r4, pc}

08006a7e <memset>:
 8006a7e:	4402      	add	r2, r0
 8006a80:	4603      	mov	r3, r0
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d100      	bne.n	8006a88 <memset+0xa>
 8006a86:	4770      	bx	lr
 8006a88:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8c:	e7f9      	b.n	8006a82 <memset+0x4>
	...

08006a90 <sbrk_aligned>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4e0e      	ldr	r6, [pc, #56]	; (8006acc <sbrk_aligned+0x3c>)
 8006a94:	460c      	mov	r4, r1
 8006a96:	6831      	ldr	r1, [r6, #0]
 8006a98:	4605      	mov	r5, r0
 8006a9a:	b911      	cbnz	r1, 8006aa2 <sbrk_aligned+0x12>
 8006a9c:	f000 fe2c 	bl	80076f8 <_sbrk_r>
 8006aa0:	6030      	str	r0, [r6, #0]
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 fe27 	bl	80076f8 <_sbrk_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d00a      	beq.n	8006ac4 <sbrk_aligned+0x34>
 8006aae:	1cc4      	adds	r4, r0, #3
 8006ab0:	f024 0403 	bic.w	r4, r4, #3
 8006ab4:	42a0      	cmp	r0, r4
 8006ab6:	d007      	beq.n	8006ac8 <sbrk_aligned+0x38>
 8006ab8:	1a21      	subs	r1, r4, r0
 8006aba:	4628      	mov	r0, r5
 8006abc:	f000 fe1c 	bl	80076f8 <_sbrk_r>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d101      	bne.n	8006ac8 <sbrk_aligned+0x38>
 8006ac4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	20001cf0 	.word	0x20001cf0

08006ad0 <_malloc_r>:
 8006ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	1ccd      	adds	r5, r1, #3
 8006ad6:	f025 0503 	bic.w	r5, r5, #3
 8006ada:	3508      	adds	r5, #8
 8006adc:	2d0c      	cmp	r5, #12
 8006ade:	bf38      	it	cc
 8006ae0:	250c      	movcc	r5, #12
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	db01      	blt.n	8006aec <_malloc_r+0x1c>
 8006ae8:	42a9      	cmp	r1, r5
 8006aea:	d905      	bls.n	8006af8 <_malloc_r+0x28>
 8006aec:	230c      	movs	r3, #12
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	2600      	movs	r6, #0
 8006af2:	4630      	mov	r0, r6
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	4e2e      	ldr	r6, [pc, #184]	; (8006bb4 <_malloc_r+0xe4>)
 8006afa:	f001 ff23 	bl	8008944 <__malloc_lock>
 8006afe:	6833      	ldr	r3, [r6, #0]
 8006b00:	461c      	mov	r4, r3
 8006b02:	bb34      	cbnz	r4, 8006b52 <_malloc_r+0x82>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7ff ffc2 	bl	8006a90 <sbrk_aligned>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	4604      	mov	r4, r0
 8006b10:	d14d      	bne.n	8006bae <_malloc_r+0xde>
 8006b12:	6834      	ldr	r4, [r6, #0]
 8006b14:	4626      	mov	r6, r4
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d140      	bne.n	8006b9c <_malloc_r+0xcc>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4638      	mov	r0, r7
 8006b20:	eb04 0803 	add.w	r8, r4, r3
 8006b24:	f000 fde8 	bl	80076f8 <_sbrk_r>
 8006b28:	4580      	cmp	r8, r0
 8006b2a:	d13a      	bne.n	8006ba2 <_malloc_r+0xd2>
 8006b2c:	6821      	ldr	r1, [r4, #0]
 8006b2e:	3503      	adds	r5, #3
 8006b30:	1a6d      	subs	r5, r5, r1
 8006b32:	f025 0503 	bic.w	r5, r5, #3
 8006b36:	3508      	adds	r5, #8
 8006b38:	2d0c      	cmp	r5, #12
 8006b3a:	bf38      	it	cc
 8006b3c:	250c      	movcc	r5, #12
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7ff ffa5 	bl	8006a90 <sbrk_aligned>
 8006b46:	3001      	adds	r0, #1
 8006b48:	d02b      	beq.n	8006ba2 <_malloc_r+0xd2>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	442b      	add	r3, r5
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	e00e      	b.n	8006b70 <_malloc_r+0xa0>
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	1b52      	subs	r2, r2, r5
 8006b56:	d41e      	bmi.n	8006b96 <_malloc_r+0xc6>
 8006b58:	2a0b      	cmp	r2, #11
 8006b5a:	d916      	bls.n	8006b8a <_malloc_r+0xba>
 8006b5c:	1961      	adds	r1, r4, r5
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	6025      	str	r5, [r4, #0]
 8006b62:	bf18      	it	ne
 8006b64:	6059      	strne	r1, [r3, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	bf08      	it	eq
 8006b6a:	6031      	streq	r1, [r6, #0]
 8006b6c:	5162      	str	r2, [r4, r5]
 8006b6e:	604b      	str	r3, [r1, #4]
 8006b70:	4638      	mov	r0, r7
 8006b72:	f104 060b 	add.w	r6, r4, #11
 8006b76:	f001 feeb 	bl	8008950 <__malloc_unlock>
 8006b7a:	f026 0607 	bic.w	r6, r6, #7
 8006b7e:	1d23      	adds	r3, r4, #4
 8006b80:	1af2      	subs	r2, r6, r3
 8006b82:	d0b6      	beq.n	8006af2 <_malloc_r+0x22>
 8006b84:	1b9b      	subs	r3, r3, r6
 8006b86:	50a3      	str	r3, [r4, r2]
 8006b88:	e7b3      	b.n	8006af2 <_malloc_r+0x22>
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	bf0c      	ite	eq
 8006b90:	6032      	streq	r2, [r6, #0]
 8006b92:	605a      	strne	r2, [r3, #4]
 8006b94:	e7ec      	b.n	8006b70 <_malloc_r+0xa0>
 8006b96:	4623      	mov	r3, r4
 8006b98:	6864      	ldr	r4, [r4, #4]
 8006b9a:	e7b2      	b.n	8006b02 <_malloc_r+0x32>
 8006b9c:	4634      	mov	r4, r6
 8006b9e:	6876      	ldr	r6, [r6, #4]
 8006ba0:	e7b9      	b.n	8006b16 <_malloc_r+0x46>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f001 fed2 	bl	8008950 <__malloc_unlock>
 8006bac:	e7a1      	b.n	8006af2 <_malloc_r+0x22>
 8006bae:	6025      	str	r5, [r4, #0]
 8006bb0:	e7de      	b.n	8006b70 <_malloc_r+0xa0>
 8006bb2:	bf00      	nop
 8006bb4:	20001cec 	.word	0x20001cec

08006bb8 <__cvt>:
 8006bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	ec55 4b10 	vmov	r4, r5, d0
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	460e      	mov	r6, r1
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	bfbb      	ittet	lt
 8006bca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bce:	461d      	movlt	r5, r3
 8006bd0:	2300      	movge	r3, #0
 8006bd2:	232d      	movlt	r3, #45	; 0x2d
 8006bd4:	700b      	strb	r3, [r1, #0]
 8006bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bdc:	4691      	mov	r9, r2
 8006bde:	f023 0820 	bic.w	r8, r3, #32
 8006be2:	bfbc      	itt	lt
 8006be4:	4622      	movlt	r2, r4
 8006be6:	4614      	movlt	r4, r2
 8006be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bec:	d005      	beq.n	8006bfa <__cvt+0x42>
 8006bee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bf2:	d100      	bne.n	8006bf6 <__cvt+0x3e>
 8006bf4:	3601      	adds	r6, #1
 8006bf6:	2102      	movs	r1, #2
 8006bf8:	e000      	b.n	8006bfc <__cvt+0x44>
 8006bfa:	2103      	movs	r1, #3
 8006bfc:	ab03      	add	r3, sp, #12
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	ab02      	add	r3, sp, #8
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	ec45 4b10 	vmov	d0, r4, r5
 8006c08:	4653      	mov	r3, sl
 8006c0a:	4632      	mov	r2, r6
 8006c0c:	f000 ff54 	bl	8007ab8 <_dtoa_r>
 8006c10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c14:	4607      	mov	r7, r0
 8006c16:	d102      	bne.n	8006c1e <__cvt+0x66>
 8006c18:	f019 0f01 	tst.w	r9, #1
 8006c1c:	d022      	beq.n	8006c64 <__cvt+0xac>
 8006c1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c22:	eb07 0906 	add.w	r9, r7, r6
 8006c26:	d110      	bne.n	8006c4a <__cvt+0x92>
 8006c28:	783b      	ldrb	r3, [r7, #0]
 8006c2a:	2b30      	cmp	r3, #48	; 0x30
 8006c2c:	d10a      	bne.n	8006c44 <__cvt+0x8c>
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c3a:	b918      	cbnz	r0, 8006c44 <__cvt+0x8c>
 8006c3c:	f1c6 0601 	rsb	r6, r6, #1
 8006c40:	f8ca 6000 	str.w	r6, [sl]
 8006c44:	f8da 3000 	ldr.w	r3, [sl]
 8006c48:	4499      	add	r9, r3
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4620      	mov	r0, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7f9 ff39 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c56:	b108      	cbz	r0, 8006c5c <__cvt+0xa4>
 8006c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c5c:	2230      	movs	r2, #48	; 0x30
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	454b      	cmp	r3, r9
 8006c62:	d307      	bcc.n	8006c74 <__cvt+0xbc>
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c68:	1bdb      	subs	r3, r3, r7
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	b004      	add	sp, #16
 8006c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	9103      	str	r1, [sp, #12]
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e7f0      	b.n	8006c5e <__cvt+0xa6>

08006c7c <__exponent>:
 8006c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2900      	cmp	r1, #0
 8006c82:	bfb8      	it	lt
 8006c84:	4249      	neglt	r1, r1
 8006c86:	f803 2b02 	strb.w	r2, [r3], #2
 8006c8a:	bfb4      	ite	lt
 8006c8c:	222d      	movlt	r2, #45	; 0x2d
 8006c8e:	222b      	movge	r2, #43	; 0x2b
 8006c90:	2909      	cmp	r1, #9
 8006c92:	7042      	strb	r2, [r0, #1]
 8006c94:	dd2a      	ble.n	8006cec <__exponent+0x70>
 8006c96:	f10d 0407 	add.w	r4, sp, #7
 8006c9a:	46a4      	mov	ip, r4
 8006c9c:	270a      	movs	r7, #10
 8006c9e:	46a6      	mov	lr, r4
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ca6:	fb07 1516 	mls	r5, r7, r6, r1
 8006caa:	3530      	adds	r5, #48	; 0x30
 8006cac:	2a63      	cmp	r2, #99	; 0x63
 8006cae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006cb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	dcf1      	bgt.n	8006c9e <__exponent+0x22>
 8006cba:	3130      	adds	r1, #48	; 0x30
 8006cbc:	f1ae 0502 	sub.w	r5, lr, #2
 8006cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cc4:	1c44      	adds	r4, r0, #1
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4561      	cmp	r1, ip
 8006cca:	d30a      	bcc.n	8006ce2 <__exponent+0x66>
 8006ccc:	f10d 0209 	add.w	r2, sp, #9
 8006cd0:	eba2 020e 	sub.w	r2, r2, lr
 8006cd4:	4565      	cmp	r5, ip
 8006cd6:	bf88      	it	hi
 8006cd8:	2200      	movhi	r2, #0
 8006cda:	4413      	add	r3, r2
 8006cdc:	1a18      	subs	r0, r3, r0
 8006cde:	b003      	add	sp, #12
 8006ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cea:	e7ed      	b.n	8006cc8 <__exponent+0x4c>
 8006cec:	2330      	movs	r3, #48	; 0x30
 8006cee:	3130      	adds	r1, #48	; 0x30
 8006cf0:	7083      	strb	r3, [r0, #2]
 8006cf2:	70c1      	strb	r1, [r0, #3]
 8006cf4:	1d03      	adds	r3, r0, #4
 8006cf6:	e7f1      	b.n	8006cdc <__exponent+0x60>

08006cf8 <_printf_float>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b02 	vpush	{d8}
 8006d00:	b08d      	sub	sp, #52	; 0x34
 8006d02:	460c      	mov	r4, r1
 8006d04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d08:	4616      	mov	r6, r2
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	f001 fd95 	bl	800883c <_localeconv_r>
 8006d12:	f8d0 a000 	ldr.w	sl, [r0]
 8006d16:	4650      	mov	r0, sl
 8006d18:	f7f9 fa5a 	bl	80001d0 <strlen>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	9305      	str	r3, [sp, #20]
 8006d24:	f8d8 3000 	ldr.w	r3, [r8]
 8006d28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d2c:	3307      	adds	r3, #7
 8006d2e:	f023 0307 	bic.w	r3, r3, #7
 8006d32:	f103 0208 	add.w	r2, r3, #8
 8006d36:	f8c8 2000 	str.w	r2, [r8]
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d50:	ee08 0a10 	vmov	s16, r0
 8006d54:	4b9f      	ldr	r3, [pc, #636]	; (8006fd4 <_printf_float+0x2dc>)
 8006d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d5e:	f7f9 fee5 	bl	8000b2c <__aeabi_dcmpun>
 8006d62:	bb88      	cbnz	r0, 8006dc8 <_printf_float+0xd0>
 8006d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d68:	4b9a      	ldr	r3, [pc, #616]	; (8006fd4 <_printf_float+0x2dc>)
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d6e:	f7f9 febf 	bl	8000af0 <__aeabi_dcmple>
 8006d72:	bb48      	cbnz	r0, 8006dc8 <_printf_float+0xd0>
 8006d74:	2200      	movs	r2, #0
 8006d76:	2300      	movs	r3, #0
 8006d78:	4640      	mov	r0, r8
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	f7f9 feae 	bl	8000adc <__aeabi_dcmplt>
 8006d80:	b110      	cbz	r0, 8006d88 <_printf_float+0x90>
 8006d82:	232d      	movs	r3, #45	; 0x2d
 8006d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d88:	4b93      	ldr	r3, [pc, #588]	; (8006fd8 <_printf_float+0x2e0>)
 8006d8a:	4894      	ldr	r0, [pc, #592]	; (8006fdc <_printf_float+0x2e4>)
 8006d8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d90:	bf94      	ite	ls
 8006d92:	4698      	movls	r8, r3
 8006d94:	4680      	movhi	r8, r0
 8006d96:	2303      	movs	r3, #3
 8006d98:	6123      	str	r3, [r4, #16]
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	f023 0204 	bic.w	r2, r3, #4
 8006da0:	6022      	str	r2, [r4, #0]
 8006da2:	f04f 0900 	mov.w	r9, #0
 8006da6:	9700      	str	r7, [sp, #0]
 8006da8:	4633      	mov	r3, r6
 8006daa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006dac:	4621      	mov	r1, r4
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 f9d8 	bl	8007164 <_printf_common>
 8006db4:	3001      	adds	r0, #1
 8006db6:	f040 8090 	bne.w	8006eda <_printf_float+0x1e2>
 8006dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dbe:	b00d      	add	sp, #52	; 0x34
 8006dc0:	ecbd 8b02 	vpop	{d8}
 8006dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	4649      	mov	r1, r9
 8006dd0:	f7f9 feac 	bl	8000b2c <__aeabi_dcmpun>
 8006dd4:	b140      	cbz	r0, 8006de8 <_printf_float+0xf0>
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bfbc      	itt	lt
 8006ddc:	232d      	movlt	r3, #45	; 0x2d
 8006dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006de2:	487f      	ldr	r0, [pc, #508]	; (8006fe0 <_printf_float+0x2e8>)
 8006de4:	4b7f      	ldr	r3, [pc, #508]	; (8006fe4 <_printf_float+0x2ec>)
 8006de6:	e7d1      	b.n	8006d8c <_printf_float+0x94>
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dee:	9206      	str	r2, [sp, #24]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	d13f      	bne.n	8006e74 <_printf_float+0x17c>
 8006df4:	2306      	movs	r3, #6
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	9b05      	ldr	r3, [sp, #20]
 8006dfa:	6861      	ldr	r1, [r4, #4]
 8006dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e00:	2300      	movs	r3, #0
 8006e02:	9303      	str	r3, [sp, #12]
 8006e04:	ab0a      	add	r3, sp, #40	; 0x28
 8006e06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e0a:	ab09      	add	r3, sp, #36	; 0x24
 8006e0c:	ec49 8b10 	vmov	d0, r8, r9
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	6022      	str	r2, [r4, #0]
 8006e14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f7ff fecd 	bl	8006bb8 <__cvt>
 8006e1e:	9b06      	ldr	r3, [sp, #24]
 8006e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e22:	2b47      	cmp	r3, #71	; 0x47
 8006e24:	4680      	mov	r8, r0
 8006e26:	d108      	bne.n	8006e3a <_printf_float+0x142>
 8006e28:	1cc8      	adds	r0, r1, #3
 8006e2a:	db02      	blt.n	8006e32 <_printf_float+0x13a>
 8006e2c:	6863      	ldr	r3, [r4, #4]
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	dd41      	ble.n	8006eb6 <_printf_float+0x1be>
 8006e32:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e36:	fa5f fb8b 	uxtb.w	fp, fp
 8006e3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e3e:	d820      	bhi.n	8006e82 <_printf_float+0x18a>
 8006e40:	3901      	subs	r1, #1
 8006e42:	465a      	mov	r2, fp
 8006e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e48:	9109      	str	r1, [sp, #36]	; 0x24
 8006e4a:	f7ff ff17 	bl	8006c7c <__exponent>
 8006e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e50:	1813      	adds	r3, r2, r0
 8006e52:	2a01      	cmp	r2, #1
 8006e54:	4681      	mov	r9, r0
 8006e56:	6123      	str	r3, [r4, #16]
 8006e58:	dc02      	bgt.n	8006e60 <_printf_float+0x168>
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	07d2      	lsls	r2, r2, #31
 8006e5e:	d501      	bpl.n	8006e64 <_printf_float+0x16c>
 8006e60:	3301      	adds	r3, #1
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d09c      	beq.n	8006da6 <_printf_float+0xae>
 8006e6c:	232d      	movs	r3, #45	; 0x2d
 8006e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e72:	e798      	b.n	8006da6 <_printf_float+0xae>
 8006e74:	9a06      	ldr	r2, [sp, #24]
 8006e76:	2a47      	cmp	r2, #71	; 0x47
 8006e78:	d1be      	bne.n	8006df8 <_printf_float+0x100>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1bc      	bne.n	8006df8 <_printf_float+0x100>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e7b9      	b.n	8006df6 <_printf_float+0xfe>
 8006e82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e86:	d118      	bne.n	8006eba <_printf_float+0x1c2>
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	dd0b      	ble.n	8006ea6 <_printf_float+0x1ae>
 8006e8e:	6121      	str	r1, [r4, #16]
 8006e90:	b913      	cbnz	r3, 8006e98 <_printf_float+0x1a0>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	07d0      	lsls	r0, r2, #31
 8006e96:	d502      	bpl.n	8006e9e <_printf_float+0x1a6>
 8006e98:	3301      	adds	r3, #1
 8006e9a:	440b      	add	r3, r1
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ea0:	f04f 0900 	mov.w	r9, #0
 8006ea4:	e7de      	b.n	8006e64 <_printf_float+0x16c>
 8006ea6:	b913      	cbnz	r3, 8006eae <_printf_float+0x1b6>
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	07d2      	lsls	r2, r2, #31
 8006eac:	d501      	bpl.n	8006eb2 <_printf_float+0x1ba>
 8006eae:	3302      	adds	r3, #2
 8006eb0:	e7f4      	b.n	8006e9c <_printf_float+0x1a4>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e7f2      	b.n	8006e9c <_printf_float+0x1a4>
 8006eb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebc:	4299      	cmp	r1, r3
 8006ebe:	db05      	blt.n	8006ecc <_printf_float+0x1d4>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	6121      	str	r1, [r4, #16]
 8006ec4:	07d8      	lsls	r0, r3, #31
 8006ec6:	d5ea      	bpl.n	8006e9e <_printf_float+0x1a6>
 8006ec8:	1c4b      	adds	r3, r1, #1
 8006eca:	e7e7      	b.n	8006e9c <_printf_float+0x1a4>
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	bfd4      	ite	le
 8006ed0:	f1c1 0202 	rsble	r2, r1, #2
 8006ed4:	2201      	movgt	r2, #1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	e7e0      	b.n	8006e9c <_printf_float+0x1a4>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	055a      	lsls	r2, r3, #21
 8006ede:	d407      	bmi.n	8006ef0 <_printf_float+0x1f8>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	4642      	mov	r2, r8
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	d12c      	bne.n	8006f48 <_printf_float+0x250>
 8006eee:	e764      	b.n	8006dba <_printf_float+0xc2>
 8006ef0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ef4:	f240 80e0 	bls.w	80070b8 <_printf_float+0x3c0>
 8006ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006efc:	2200      	movs	r2, #0
 8006efe:	2300      	movs	r3, #0
 8006f00:	f7f9 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d034      	beq.n	8006f72 <_printf_float+0x27a>
 8006f08:	4a37      	ldr	r2, [pc, #220]	; (8006fe8 <_printf_float+0x2f0>)
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	f43f af51 	beq.w	8006dba <_printf_float+0xc2>
 8006f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	db02      	blt.n	8006f26 <_printf_float+0x22e>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	07d8      	lsls	r0, r3, #31
 8006f24:	d510      	bpl.n	8006f48 <_printf_float+0x250>
 8006f26:	ee18 3a10 	vmov	r3, s16
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f af41 	beq.w	8006dba <_printf_float+0xc2>
 8006f38:	f04f 0800 	mov.w	r8, #0
 8006f3c:	f104 091a 	add.w	r9, r4, #26
 8006f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f42:	3b01      	subs	r3, #1
 8006f44:	4543      	cmp	r3, r8
 8006f46:	dc09      	bgt.n	8006f5c <_printf_float+0x264>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	079b      	lsls	r3, r3, #30
 8006f4c:	f100 8105 	bmi.w	800715a <_printf_float+0x462>
 8006f50:	68e0      	ldr	r0, [r4, #12]
 8006f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f54:	4298      	cmp	r0, r3
 8006f56:	bfb8      	it	lt
 8006f58:	4618      	movlt	r0, r3
 8006f5a:	e730      	b.n	8006dbe <_printf_float+0xc6>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	464a      	mov	r2, r9
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af27 	beq.w	8006dba <_printf_float+0xc2>
 8006f6c:	f108 0801 	add.w	r8, r8, #1
 8006f70:	e7e6      	b.n	8006f40 <_printf_float+0x248>
 8006f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dc39      	bgt.n	8006fec <_printf_float+0x2f4>
 8006f78:	4a1b      	ldr	r2, [pc, #108]	; (8006fe8 <_printf_float+0x2f0>)
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	f43f af19 	beq.w	8006dba <_printf_float+0xc2>
 8006f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	d102      	bne.n	8006f96 <_printf_float+0x29e>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	07d9      	lsls	r1, r3, #31
 8006f94:	d5d8      	bpl.n	8006f48 <_printf_float+0x250>
 8006f96:	ee18 3a10 	vmov	r3, s16
 8006f9a:	4652      	mov	r2, sl
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	f43f af09 	beq.w	8006dba <_printf_float+0xc2>
 8006fa8:	f04f 0900 	mov.w	r9, #0
 8006fac:	f104 0a1a 	add.w	sl, r4, #26
 8006fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb2:	425b      	negs	r3, r3
 8006fb4:	454b      	cmp	r3, r9
 8006fb6:	dc01      	bgt.n	8006fbc <_printf_float+0x2c4>
 8006fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fba:	e792      	b.n	8006ee2 <_printf_float+0x1ea>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4652      	mov	r2, sl
 8006fc0:	4631      	mov	r1, r6
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b8      	blx	r7
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	f43f aef7 	beq.w	8006dba <_printf_float+0xc2>
 8006fcc:	f109 0901 	add.w	r9, r9, #1
 8006fd0:	e7ee      	b.n	8006fb0 <_printf_float+0x2b8>
 8006fd2:	bf00      	nop
 8006fd4:	7fefffff 	.word	0x7fefffff
 8006fd8:	08009738 	.word	0x08009738
 8006fdc:	0800973c 	.word	0x0800973c
 8006fe0:	08009744 	.word	0x08009744
 8006fe4:	08009740 	.word	0x08009740
 8006fe8:	08009748 	.word	0x08009748
 8006fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	bfa8      	it	ge
 8006ff4:	461a      	movge	r2, r3
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	4691      	mov	r9, r2
 8006ffa:	dc37      	bgt.n	800706c <_printf_float+0x374>
 8006ffc:	f04f 0b00 	mov.w	fp, #0
 8007000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007004:	f104 021a 	add.w	r2, r4, #26
 8007008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	eba3 0309 	sub.w	r3, r3, r9
 8007010:	455b      	cmp	r3, fp
 8007012:	dc33      	bgt.n	800707c <_printf_float+0x384>
 8007014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007018:	429a      	cmp	r2, r3
 800701a:	db3b      	blt.n	8007094 <_printf_float+0x39c>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07da      	lsls	r2, r3, #31
 8007020:	d438      	bmi.n	8007094 <_printf_float+0x39c>
 8007022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007024:	9a05      	ldr	r2, [sp, #20]
 8007026:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007028:	1a9a      	subs	r2, r3, r2
 800702a:	eba3 0901 	sub.w	r9, r3, r1
 800702e:	4591      	cmp	r9, r2
 8007030:	bfa8      	it	ge
 8007032:	4691      	movge	r9, r2
 8007034:	f1b9 0f00 	cmp.w	r9, #0
 8007038:	dc35      	bgt.n	80070a6 <_printf_float+0x3ae>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007042:	f104 0a1a 	add.w	sl, r4, #26
 8007046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	eba3 0309 	sub.w	r3, r3, r9
 8007050:	4543      	cmp	r3, r8
 8007052:	f77f af79 	ble.w	8006f48 <_printf_float+0x250>
 8007056:	2301      	movs	r3, #1
 8007058:	4652      	mov	r2, sl
 800705a:	4631      	mov	r1, r6
 800705c:	4628      	mov	r0, r5
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f aeaa 	beq.w	8006dba <_printf_float+0xc2>
 8007066:	f108 0801 	add.w	r8, r8, #1
 800706a:	e7ec      	b.n	8007046 <_printf_float+0x34e>
 800706c:	4613      	mov	r3, r2
 800706e:	4631      	mov	r1, r6
 8007070:	4642      	mov	r2, r8
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	d1c0      	bne.n	8006ffc <_printf_float+0x304>
 800707a:	e69e      	b.n	8006dba <_printf_float+0xc2>
 800707c:	2301      	movs	r3, #1
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	9205      	str	r2, [sp, #20]
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	f43f ae97 	beq.w	8006dba <_printf_float+0xc2>
 800708c:	9a05      	ldr	r2, [sp, #20]
 800708e:	f10b 0b01 	add.w	fp, fp, #1
 8007092:	e7b9      	b.n	8007008 <_printf_float+0x310>
 8007094:	ee18 3a10 	vmov	r3, s16
 8007098:	4652      	mov	r2, sl
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	d1be      	bne.n	8007022 <_printf_float+0x32a>
 80070a4:	e689      	b.n	8006dba <_printf_float+0xc2>
 80070a6:	9a05      	ldr	r2, [sp, #20]
 80070a8:	464b      	mov	r3, r9
 80070aa:	4442      	add	r2, r8
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	d1c1      	bne.n	800703a <_printf_float+0x342>
 80070b6:	e680      	b.n	8006dba <_printf_float+0xc2>
 80070b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ba:	2a01      	cmp	r2, #1
 80070bc:	dc01      	bgt.n	80070c2 <_printf_float+0x3ca>
 80070be:	07db      	lsls	r3, r3, #31
 80070c0:	d538      	bpl.n	8007134 <_printf_float+0x43c>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4642      	mov	r2, r8
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f ae74 	beq.w	8006dba <_printf_float+0xc2>
 80070d2:	ee18 3a10 	vmov	r3, s16
 80070d6:	4652      	mov	r2, sl
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f43f ae6b 	beq.w	8006dba <_printf_float+0xc2>
 80070e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070e8:	2200      	movs	r2, #0
 80070ea:	2300      	movs	r3, #0
 80070ec:	f7f9 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f0:	b9d8      	cbnz	r0, 800712a <_printf_float+0x432>
 80070f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f4:	f108 0201 	add.w	r2, r8, #1
 80070f8:	3b01      	subs	r3, #1
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	d10e      	bne.n	8007122 <_printf_float+0x42a>
 8007104:	e659      	b.n	8006dba <_printf_float+0xc2>
 8007106:	2301      	movs	r3, #1
 8007108:	4652      	mov	r2, sl
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	f43f ae52 	beq.w	8006dba <_printf_float+0xc2>
 8007116:	f108 0801 	add.w	r8, r8, #1
 800711a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800711c:	3b01      	subs	r3, #1
 800711e:	4543      	cmp	r3, r8
 8007120:	dcf1      	bgt.n	8007106 <_printf_float+0x40e>
 8007122:	464b      	mov	r3, r9
 8007124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007128:	e6dc      	b.n	8006ee4 <_printf_float+0x1ec>
 800712a:	f04f 0800 	mov.w	r8, #0
 800712e:	f104 0a1a 	add.w	sl, r4, #26
 8007132:	e7f2      	b.n	800711a <_printf_float+0x422>
 8007134:	2301      	movs	r3, #1
 8007136:	4642      	mov	r2, r8
 8007138:	e7df      	b.n	80070fa <_printf_float+0x402>
 800713a:	2301      	movs	r3, #1
 800713c:	464a      	mov	r2, r9
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	f43f ae38 	beq.w	8006dba <_printf_float+0xc2>
 800714a:	f108 0801 	add.w	r8, r8, #1
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007152:	1a5b      	subs	r3, r3, r1
 8007154:	4543      	cmp	r3, r8
 8007156:	dcf0      	bgt.n	800713a <_printf_float+0x442>
 8007158:	e6fa      	b.n	8006f50 <_printf_float+0x258>
 800715a:	f04f 0800 	mov.w	r8, #0
 800715e:	f104 0919 	add.w	r9, r4, #25
 8007162:	e7f4      	b.n	800714e <_printf_float+0x456>

08007164 <_printf_common>:
 8007164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007168:	4616      	mov	r6, r2
 800716a:	4699      	mov	r9, r3
 800716c:	688a      	ldr	r2, [r1, #8]
 800716e:	690b      	ldr	r3, [r1, #16]
 8007170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007174:	4293      	cmp	r3, r2
 8007176:	bfb8      	it	lt
 8007178:	4613      	movlt	r3, r2
 800717a:	6033      	str	r3, [r6, #0]
 800717c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007180:	4607      	mov	r7, r0
 8007182:	460c      	mov	r4, r1
 8007184:	b10a      	cbz	r2, 800718a <_printf_common+0x26>
 8007186:	3301      	adds	r3, #1
 8007188:	6033      	str	r3, [r6, #0]
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	0699      	lsls	r1, r3, #26
 800718e:	bf42      	ittt	mi
 8007190:	6833      	ldrmi	r3, [r6, #0]
 8007192:	3302      	addmi	r3, #2
 8007194:	6033      	strmi	r3, [r6, #0]
 8007196:	6825      	ldr	r5, [r4, #0]
 8007198:	f015 0506 	ands.w	r5, r5, #6
 800719c:	d106      	bne.n	80071ac <_printf_common+0x48>
 800719e:	f104 0a19 	add.w	sl, r4, #25
 80071a2:	68e3      	ldr	r3, [r4, #12]
 80071a4:	6832      	ldr	r2, [r6, #0]
 80071a6:	1a9b      	subs	r3, r3, r2
 80071a8:	42ab      	cmp	r3, r5
 80071aa:	dc26      	bgt.n	80071fa <_printf_common+0x96>
 80071ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071b0:	1e13      	subs	r3, r2, #0
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	bf18      	it	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	0692      	lsls	r2, r2, #26
 80071ba:	d42b      	bmi.n	8007214 <_printf_common+0xb0>
 80071bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071c0:	4649      	mov	r1, r9
 80071c2:	4638      	mov	r0, r7
 80071c4:	47c0      	blx	r8
 80071c6:	3001      	adds	r0, #1
 80071c8:	d01e      	beq.n	8007208 <_printf_common+0xa4>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	68e5      	ldr	r5, [r4, #12]
 80071ce:	6832      	ldr	r2, [r6, #0]
 80071d0:	f003 0306 	and.w	r3, r3, #6
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	bf08      	it	eq
 80071d8:	1aad      	subeq	r5, r5, r2
 80071da:	68a3      	ldr	r3, [r4, #8]
 80071dc:	6922      	ldr	r2, [r4, #16]
 80071de:	bf0c      	ite	eq
 80071e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071e4:	2500      	movne	r5, #0
 80071e6:	4293      	cmp	r3, r2
 80071e8:	bfc4      	itt	gt
 80071ea:	1a9b      	subgt	r3, r3, r2
 80071ec:	18ed      	addgt	r5, r5, r3
 80071ee:	2600      	movs	r6, #0
 80071f0:	341a      	adds	r4, #26
 80071f2:	42b5      	cmp	r5, r6
 80071f4:	d11a      	bne.n	800722c <_printf_common+0xc8>
 80071f6:	2000      	movs	r0, #0
 80071f8:	e008      	b.n	800720c <_printf_common+0xa8>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4652      	mov	r2, sl
 80071fe:	4649      	mov	r1, r9
 8007200:	4638      	mov	r0, r7
 8007202:	47c0      	blx	r8
 8007204:	3001      	adds	r0, #1
 8007206:	d103      	bne.n	8007210 <_printf_common+0xac>
 8007208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800720c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007210:	3501      	adds	r5, #1
 8007212:	e7c6      	b.n	80071a2 <_printf_common+0x3e>
 8007214:	18e1      	adds	r1, r4, r3
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	2030      	movs	r0, #48	; 0x30
 800721a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800721e:	4422      	add	r2, r4
 8007220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007228:	3302      	adds	r3, #2
 800722a:	e7c7      	b.n	80071bc <_printf_common+0x58>
 800722c:	2301      	movs	r3, #1
 800722e:	4622      	mov	r2, r4
 8007230:	4649      	mov	r1, r9
 8007232:	4638      	mov	r0, r7
 8007234:	47c0      	blx	r8
 8007236:	3001      	adds	r0, #1
 8007238:	d0e6      	beq.n	8007208 <_printf_common+0xa4>
 800723a:	3601      	adds	r6, #1
 800723c:	e7d9      	b.n	80071f2 <_printf_common+0x8e>
	...

08007240 <_printf_i>:
 8007240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	7e0f      	ldrb	r7, [r1, #24]
 8007246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007248:	2f78      	cmp	r7, #120	; 0x78
 800724a:	4691      	mov	r9, r2
 800724c:	4680      	mov	r8, r0
 800724e:	460c      	mov	r4, r1
 8007250:	469a      	mov	sl, r3
 8007252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007256:	d807      	bhi.n	8007268 <_printf_i+0x28>
 8007258:	2f62      	cmp	r7, #98	; 0x62
 800725a:	d80a      	bhi.n	8007272 <_printf_i+0x32>
 800725c:	2f00      	cmp	r7, #0
 800725e:	f000 80d8 	beq.w	8007412 <_printf_i+0x1d2>
 8007262:	2f58      	cmp	r7, #88	; 0x58
 8007264:	f000 80a3 	beq.w	80073ae <_printf_i+0x16e>
 8007268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800726c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007270:	e03a      	b.n	80072e8 <_printf_i+0xa8>
 8007272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007276:	2b15      	cmp	r3, #21
 8007278:	d8f6      	bhi.n	8007268 <_printf_i+0x28>
 800727a:	a101      	add	r1, pc, #4	; (adr r1, 8007280 <_printf_i+0x40>)
 800727c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007280:	080072d9 	.word	0x080072d9
 8007284:	080072ed 	.word	0x080072ed
 8007288:	08007269 	.word	0x08007269
 800728c:	08007269 	.word	0x08007269
 8007290:	08007269 	.word	0x08007269
 8007294:	08007269 	.word	0x08007269
 8007298:	080072ed 	.word	0x080072ed
 800729c:	08007269 	.word	0x08007269
 80072a0:	08007269 	.word	0x08007269
 80072a4:	08007269 	.word	0x08007269
 80072a8:	08007269 	.word	0x08007269
 80072ac:	080073f9 	.word	0x080073f9
 80072b0:	0800731d 	.word	0x0800731d
 80072b4:	080073db 	.word	0x080073db
 80072b8:	08007269 	.word	0x08007269
 80072bc:	08007269 	.word	0x08007269
 80072c0:	0800741b 	.word	0x0800741b
 80072c4:	08007269 	.word	0x08007269
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007269 	.word	0x08007269
 80072d0:	08007269 	.word	0x08007269
 80072d4:	080073e3 	.word	0x080073e3
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	1d1a      	adds	r2, r3, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	602a      	str	r2, [r5, #0]
 80072e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0a3      	b.n	8007434 <_printf_i+0x1f4>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	6829      	ldr	r1, [r5, #0]
 80072f0:	0606      	lsls	r6, r0, #24
 80072f2:	f101 0304 	add.w	r3, r1, #4
 80072f6:	d50a      	bpl.n	800730e <_printf_i+0xce>
 80072f8:	680e      	ldr	r6, [r1, #0]
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	da03      	bge.n	8007308 <_printf_i+0xc8>
 8007300:	232d      	movs	r3, #45	; 0x2d
 8007302:	4276      	negs	r6, r6
 8007304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007308:	485e      	ldr	r0, [pc, #376]	; (8007484 <_printf_i+0x244>)
 800730a:	230a      	movs	r3, #10
 800730c:	e019      	b.n	8007342 <_printf_i+0x102>
 800730e:	680e      	ldr	r6, [r1, #0]
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007316:	bf18      	it	ne
 8007318:	b236      	sxthne	r6, r6
 800731a:	e7ef      	b.n	80072fc <_printf_i+0xbc>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	1d19      	adds	r1, r3, #4
 8007322:	6029      	str	r1, [r5, #0]
 8007324:	0601      	lsls	r1, r0, #24
 8007326:	d501      	bpl.n	800732c <_printf_i+0xec>
 8007328:	681e      	ldr	r6, [r3, #0]
 800732a:	e002      	b.n	8007332 <_printf_i+0xf2>
 800732c:	0646      	lsls	r6, r0, #25
 800732e:	d5fb      	bpl.n	8007328 <_printf_i+0xe8>
 8007330:	881e      	ldrh	r6, [r3, #0]
 8007332:	4854      	ldr	r0, [pc, #336]	; (8007484 <_printf_i+0x244>)
 8007334:	2f6f      	cmp	r7, #111	; 0x6f
 8007336:	bf0c      	ite	eq
 8007338:	2308      	moveq	r3, #8
 800733a:	230a      	movne	r3, #10
 800733c:	2100      	movs	r1, #0
 800733e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007342:	6865      	ldr	r5, [r4, #4]
 8007344:	60a5      	str	r5, [r4, #8]
 8007346:	2d00      	cmp	r5, #0
 8007348:	bfa2      	ittt	ge
 800734a:	6821      	ldrge	r1, [r4, #0]
 800734c:	f021 0104 	bicge.w	r1, r1, #4
 8007350:	6021      	strge	r1, [r4, #0]
 8007352:	b90e      	cbnz	r6, 8007358 <_printf_i+0x118>
 8007354:	2d00      	cmp	r5, #0
 8007356:	d04d      	beq.n	80073f4 <_printf_i+0x1b4>
 8007358:	4615      	mov	r5, r2
 800735a:	fbb6 f1f3 	udiv	r1, r6, r3
 800735e:	fb03 6711 	mls	r7, r3, r1, r6
 8007362:	5dc7      	ldrb	r7, [r0, r7]
 8007364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007368:	4637      	mov	r7, r6
 800736a:	42bb      	cmp	r3, r7
 800736c:	460e      	mov	r6, r1
 800736e:	d9f4      	bls.n	800735a <_printf_i+0x11a>
 8007370:	2b08      	cmp	r3, #8
 8007372:	d10b      	bne.n	800738c <_printf_i+0x14c>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	07de      	lsls	r6, r3, #31
 8007378:	d508      	bpl.n	800738c <_printf_i+0x14c>
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	6861      	ldr	r1, [r4, #4]
 800737e:	4299      	cmp	r1, r3
 8007380:	bfde      	ittt	le
 8007382:	2330      	movle	r3, #48	; 0x30
 8007384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007388:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800738c:	1b52      	subs	r2, r2, r5
 800738e:	6122      	str	r2, [r4, #16]
 8007390:	f8cd a000 	str.w	sl, [sp]
 8007394:	464b      	mov	r3, r9
 8007396:	aa03      	add	r2, sp, #12
 8007398:	4621      	mov	r1, r4
 800739a:	4640      	mov	r0, r8
 800739c:	f7ff fee2 	bl	8007164 <_printf_common>
 80073a0:	3001      	adds	r0, #1
 80073a2:	d14c      	bne.n	800743e <_printf_i+0x1fe>
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073a8:	b004      	add	sp, #16
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ae:	4835      	ldr	r0, [pc, #212]	; (8007484 <_printf_i+0x244>)
 80073b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073b4:	6829      	ldr	r1, [r5, #0]
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073bc:	6029      	str	r1, [r5, #0]
 80073be:	061d      	lsls	r5, r3, #24
 80073c0:	d514      	bpl.n	80073ec <_printf_i+0x1ac>
 80073c2:	07df      	lsls	r7, r3, #31
 80073c4:	bf44      	itt	mi
 80073c6:	f043 0320 	orrmi.w	r3, r3, #32
 80073ca:	6023      	strmi	r3, [r4, #0]
 80073cc:	b91e      	cbnz	r6, 80073d6 <_printf_i+0x196>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	f023 0320 	bic.w	r3, r3, #32
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	2310      	movs	r3, #16
 80073d8:	e7b0      	b.n	800733c <_printf_i+0xfc>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	f043 0320 	orr.w	r3, r3, #32
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	2378      	movs	r3, #120	; 0x78
 80073e4:	4828      	ldr	r0, [pc, #160]	; (8007488 <_printf_i+0x248>)
 80073e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ea:	e7e3      	b.n	80073b4 <_printf_i+0x174>
 80073ec:	0659      	lsls	r1, r3, #25
 80073ee:	bf48      	it	mi
 80073f0:	b2b6      	uxthmi	r6, r6
 80073f2:	e7e6      	b.n	80073c2 <_printf_i+0x182>
 80073f4:	4615      	mov	r5, r2
 80073f6:	e7bb      	b.n	8007370 <_printf_i+0x130>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	6826      	ldr	r6, [r4, #0]
 80073fc:	6961      	ldr	r1, [r4, #20]
 80073fe:	1d18      	adds	r0, r3, #4
 8007400:	6028      	str	r0, [r5, #0]
 8007402:	0635      	lsls	r5, r6, #24
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	d501      	bpl.n	800740c <_printf_i+0x1cc>
 8007408:	6019      	str	r1, [r3, #0]
 800740a:	e002      	b.n	8007412 <_printf_i+0x1d2>
 800740c:	0670      	lsls	r0, r6, #25
 800740e:	d5fb      	bpl.n	8007408 <_printf_i+0x1c8>
 8007410:	8019      	strh	r1, [r3, #0]
 8007412:	2300      	movs	r3, #0
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	4615      	mov	r5, r2
 8007418:	e7ba      	b.n	8007390 <_printf_i+0x150>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	1d1a      	adds	r2, r3, #4
 800741e:	602a      	str	r2, [r5, #0]
 8007420:	681d      	ldr	r5, [r3, #0]
 8007422:	6862      	ldr	r2, [r4, #4]
 8007424:	2100      	movs	r1, #0
 8007426:	4628      	mov	r0, r5
 8007428:	f7f8 feda 	bl	80001e0 <memchr>
 800742c:	b108      	cbz	r0, 8007432 <_printf_i+0x1f2>
 800742e:	1b40      	subs	r0, r0, r5
 8007430:	6060      	str	r0, [r4, #4]
 8007432:	6863      	ldr	r3, [r4, #4]
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	2300      	movs	r3, #0
 8007438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800743c:	e7a8      	b.n	8007390 <_printf_i+0x150>
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	462a      	mov	r2, r5
 8007442:	4649      	mov	r1, r9
 8007444:	4640      	mov	r0, r8
 8007446:	47d0      	blx	sl
 8007448:	3001      	adds	r0, #1
 800744a:	d0ab      	beq.n	80073a4 <_printf_i+0x164>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	079b      	lsls	r3, r3, #30
 8007450:	d413      	bmi.n	800747a <_printf_i+0x23a>
 8007452:	68e0      	ldr	r0, [r4, #12]
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	4298      	cmp	r0, r3
 8007458:	bfb8      	it	lt
 800745a:	4618      	movlt	r0, r3
 800745c:	e7a4      	b.n	80073a8 <_printf_i+0x168>
 800745e:	2301      	movs	r3, #1
 8007460:	4632      	mov	r2, r6
 8007462:	4649      	mov	r1, r9
 8007464:	4640      	mov	r0, r8
 8007466:	47d0      	blx	sl
 8007468:	3001      	adds	r0, #1
 800746a:	d09b      	beq.n	80073a4 <_printf_i+0x164>
 800746c:	3501      	adds	r5, #1
 800746e:	68e3      	ldr	r3, [r4, #12]
 8007470:	9903      	ldr	r1, [sp, #12]
 8007472:	1a5b      	subs	r3, r3, r1
 8007474:	42ab      	cmp	r3, r5
 8007476:	dcf2      	bgt.n	800745e <_printf_i+0x21e>
 8007478:	e7eb      	b.n	8007452 <_printf_i+0x212>
 800747a:	2500      	movs	r5, #0
 800747c:	f104 0619 	add.w	r6, r4, #25
 8007480:	e7f5      	b.n	800746e <_printf_i+0x22e>
 8007482:	bf00      	nop
 8007484:	0800974a 	.word	0x0800974a
 8007488:	0800975b 	.word	0x0800975b

0800748c <iprintf>:
 800748c:	b40f      	push	{r0, r1, r2, r3}
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <iprintf+0x2c>)
 8007490:	b513      	push	{r0, r1, r4, lr}
 8007492:	681c      	ldr	r4, [r3, #0]
 8007494:	b124      	cbz	r4, 80074a0 <iprintf+0x14>
 8007496:	69a3      	ldr	r3, [r4, #24]
 8007498:	b913      	cbnz	r3, 80074a0 <iprintf+0x14>
 800749a:	4620      	mov	r0, r4
 800749c:	f7ff fa1c 	bl	80068d8 <__sinit>
 80074a0:	ab05      	add	r3, sp, #20
 80074a2:	9a04      	ldr	r2, [sp, #16]
 80074a4:	68a1      	ldr	r1, [r4, #8]
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 fe67 	bl	800917c <_vfiprintf_r>
 80074ae:	b002      	add	sp, #8
 80074b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b4:	b004      	add	sp, #16
 80074b6:	4770      	bx	lr
 80074b8:	20000010 	.word	0x20000010

080074bc <_puts_r>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	460e      	mov	r6, r1
 80074c0:	4605      	mov	r5, r0
 80074c2:	b118      	cbz	r0, 80074cc <_puts_r+0x10>
 80074c4:	6983      	ldr	r3, [r0, #24]
 80074c6:	b90b      	cbnz	r3, 80074cc <_puts_r+0x10>
 80074c8:	f7ff fa06 	bl	80068d8 <__sinit>
 80074cc:	69ab      	ldr	r3, [r5, #24]
 80074ce:	68ac      	ldr	r4, [r5, #8]
 80074d0:	b913      	cbnz	r3, 80074d8 <_puts_r+0x1c>
 80074d2:	4628      	mov	r0, r5
 80074d4:	f7ff fa00 	bl	80068d8 <__sinit>
 80074d8:	4b2c      	ldr	r3, [pc, #176]	; (800758c <_puts_r+0xd0>)
 80074da:	429c      	cmp	r4, r3
 80074dc:	d120      	bne.n	8007520 <_puts_r+0x64>
 80074de:	686c      	ldr	r4, [r5, #4]
 80074e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074e2:	07db      	lsls	r3, r3, #31
 80074e4:	d405      	bmi.n	80074f2 <_puts_r+0x36>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	0598      	lsls	r0, r3, #22
 80074ea:	d402      	bmi.n	80074f2 <_puts_r+0x36>
 80074ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ee:	f7ff fab6 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	0719      	lsls	r1, r3, #28
 80074f6:	d51d      	bpl.n	8007534 <_puts_r+0x78>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	b1db      	cbz	r3, 8007534 <_puts_r+0x78>
 80074fc:	3e01      	subs	r6, #1
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007504:	3b01      	subs	r3, #1
 8007506:	60a3      	str	r3, [r4, #8]
 8007508:	bb39      	cbnz	r1, 800755a <_puts_r+0x9e>
 800750a:	2b00      	cmp	r3, #0
 800750c:	da38      	bge.n	8007580 <_puts_r+0xc4>
 800750e:	4622      	mov	r2, r4
 8007510:	210a      	movs	r1, #10
 8007512:	4628      	mov	r0, r5
 8007514:	f000 f944 	bl	80077a0 <__swbuf_r>
 8007518:	3001      	adds	r0, #1
 800751a:	d011      	beq.n	8007540 <_puts_r+0x84>
 800751c:	250a      	movs	r5, #10
 800751e:	e011      	b.n	8007544 <_puts_r+0x88>
 8007520:	4b1b      	ldr	r3, [pc, #108]	; (8007590 <_puts_r+0xd4>)
 8007522:	429c      	cmp	r4, r3
 8007524:	d101      	bne.n	800752a <_puts_r+0x6e>
 8007526:	68ac      	ldr	r4, [r5, #8]
 8007528:	e7da      	b.n	80074e0 <_puts_r+0x24>
 800752a:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <_puts_r+0xd8>)
 800752c:	429c      	cmp	r4, r3
 800752e:	bf08      	it	eq
 8007530:	68ec      	ldreq	r4, [r5, #12]
 8007532:	e7d5      	b.n	80074e0 <_puts_r+0x24>
 8007534:	4621      	mov	r1, r4
 8007536:	4628      	mov	r0, r5
 8007538:	f000 f996 	bl	8007868 <__swsetup_r>
 800753c:	2800      	cmp	r0, #0
 800753e:	d0dd      	beq.n	80074fc <_puts_r+0x40>
 8007540:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007546:	07da      	lsls	r2, r3, #31
 8007548:	d405      	bmi.n	8007556 <_puts_r+0x9a>
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	059b      	lsls	r3, r3, #22
 800754e:	d402      	bmi.n	8007556 <_puts_r+0x9a>
 8007550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007552:	f7ff fa85 	bl	8006a60 <__retarget_lock_release_recursive>
 8007556:	4628      	mov	r0, r5
 8007558:	bd70      	pop	{r4, r5, r6, pc}
 800755a:	2b00      	cmp	r3, #0
 800755c:	da04      	bge.n	8007568 <_puts_r+0xac>
 800755e:	69a2      	ldr	r2, [r4, #24]
 8007560:	429a      	cmp	r2, r3
 8007562:	dc06      	bgt.n	8007572 <_puts_r+0xb6>
 8007564:	290a      	cmp	r1, #10
 8007566:	d004      	beq.n	8007572 <_puts_r+0xb6>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	6022      	str	r2, [r4, #0]
 800756e:	7019      	strb	r1, [r3, #0]
 8007570:	e7c5      	b.n	80074fe <_puts_r+0x42>
 8007572:	4622      	mov	r2, r4
 8007574:	4628      	mov	r0, r5
 8007576:	f000 f913 	bl	80077a0 <__swbuf_r>
 800757a:	3001      	adds	r0, #1
 800757c:	d1bf      	bne.n	80074fe <_puts_r+0x42>
 800757e:	e7df      	b.n	8007540 <_puts_r+0x84>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	250a      	movs	r5, #10
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	701d      	strb	r5, [r3, #0]
 800758a:	e7db      	b.n	8007544 <_puts_r+0x88>
 800758c:	080096f4 	.word	0x080096f4
 8007590:	08009714 	.word	0x08009714
 8007594:	080096d4 	.word	0x080096d4

08007598 <puts>:
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <puts+0xc>)
 800759a:	4601      	mov	r1, r0
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f7ff bf8d 	b.w	80074bc <_puts_r>
 80075a2:	bf00      	nop
 80075a4:	20000010 	.word	0x20000010

080075a8 <rand>:
 80075a8:	4b16      	ldr	r3, [pc, #88]	; (8007604 <rand+0x5c>)
 80075aa:	b510      	push	{r4, lr}
 80075ac:	681c      	ldr	r4, [r3, #0]
 80075ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075b0:	b9b3      	cbnz	r3, 80075e0 <rand+0x38>
 80075b2:	2018      	movs	r0, #24
 80075b4:	f001 f9be 	bl	8008934 <malloc>
 80075b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80075ba:	b928      	cbnz	r0, 80075c8 <rand+0x20>
 80075bc:	4602      	mov	r2, r0
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <rand+0x60>)
 80075c0:	4812      	ldr	r0, [pc, #72]	; (800760c <rand+0x64>)
 80075c2:	214e      	movs	r1, #78	; 0x4e
 80075c4:	f000 f9be 	bl	8007944 <__assert_func>
 80075c8:	4a11      	ldr	r2, [pc, #68]	; (8007610 <rand+0x68>)
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <rand+0x6c>)
 80075cc:	e9c0 2300 	strd	r2, r3, [r0]
 80075d0:	4b11      	ldr	r3, [pc, #68]	; (8007618 <rand+0x70>)
 80075d2:	6083      	str	r3, [r0, #8]
 80075d4:	230b      	movs	r3, #11
 80075d6:	8183      	strh	r3, [r0, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	2300      	movs	r3, #0
 80075dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80075e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80075e2:	4a0e      	ldr	r2, [pc, #56]	; (800761c <rand+0x74>)
 80075e4:	6920      	ldr	r0, [r4, #16]
 80075e6:	6963      	ldr	r3, [r4, #20]
 80075e8:	490d      	ldr	r1, [pc, #52]	; (8007620 <rand+0x78>)
 80075ea:	4342      	muls	r2, r0
 80075ec:	fb01 2203 	mla	r2, r1, r3, r2
 80075f0:	fba0 0101 	umull	r0, r1, r0, r1
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	eb42 0001 	adc.w	r0, r2, r1
 80075fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80075fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007602:	bd10      	pop	{r4, pc}
 8007604:	20000010 	.word	0x20000010
 8007608:	0800976c 	.word	0x0800976c
 800760c:	08009783 	.word	0x08009783
 8007610:	abcd330e 	.word	0xabcd330e
 8007614:	e66d1234 	.word	0xe66d1234
 8007618:	0005deec 	.word	0x0005deec
 800761c:	5851f42d 	.word	0x5851f42d
 8007620:	4c957f2d 	.word	0x4c957f2d

08007624 <cleanup_glue>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	460c      	mov	r4, r1
 8007628:	6809      	ldr	r1, [r1, #0]
 800762a:	4605      	mov	r5, r0
 800762c:	b109      	cbz	r1, 8007632 <cleanup_glue+0xe>
 800762e:	f7ff fff9 	bl	8007624 <cleanup_glue>
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763a:	f001 bd29 	b.w	8009090 <_free_r>
	...

08007640 <_reclaim_reent>:
 8007640:	4b2c      	ldr	r3, [pc, #176]	; (80076f4 <_reclaim_reent+0xb4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4283      	cmp	r3, r0
 8007646:	b570      	push	{r4, r5, r6, lr}
 8007648:	4604      	mov	r4, r0
 800764a:	d051      	beq.n	80076f0 <_reclaim_reent+0xb0>
 800764c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800764e:	b143      	cbz	r3, 8007662 <_reclaim_reent+0x22>
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d14a      	bne.n	80076ec <_reclaim_reent+0xac>
 8007656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	b111      	cbz	r1, 8007662 <_reclaim_reent+0x22>
 800765c:	4620      	mov	r0, r4
 800765e:	f001 fd17 	bl	8009090 <_free_r>
 8007662:	6961      	ldr	r1, [r4, #20]
 8007664:	b111      	cbz	r1, 800766c <_reclaim_reent+0x2c>
 8007666:	4620      	mov	r0, r4
 8007668:	f001 fd12 	bl	8009090 <_free_r>
 800766c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800766e:	b111      	cbz	r1, 8007676 <_reclaim_reent+0x36>
 8007670:	4620      	mov	r0, r4
 8007672:	f001 fd0d 	bl	8009090 <_free_r>
 8007676:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007678:	b111      	cbz	r1, 8007680 <_reclaim_reent+0x40>
 800767a:	4620      	mov	r0, r4
 800767c:	f001 fd08 	bl	8009090 <_free_r>
 8007680:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007682:	b111      	cbz	r1, 800768a <_reclaim_reent+0x4a>
 8007684:	4620      	mov	r0, r4
 8007686:	f001 fd03 	bl	8009090 <_free_r>
 800768a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800768c:	b111      	cbz	r1, 8007694 <_reclaim_reent+0x54>
 800768e:	4620      	mov	r0, r4
 8007690:	f001 fcfe 	bl	8009090 <_free_r>
 8007694:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007696:	b111      	cbz	r1, 800769e <_reclaim_reent+0x5e>
 8007698:	4620      	mov	r0, r4
 800769a:	f001 fcf9 	bl	8009090 <_free_r>
 800769e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80076a0:	b111      	cbz	r1, 80076a8 <_reclaim_reent+0x68>
 80076a2:	4620      	mov	r0, r4
 80076a4:	f001 fcf4 	bl	8009090 <_free_r>
 80076a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076aa:	b111      	cbz	r1, 80076b2 <_reclaim_reent+0x72>
 80076ac:	4620      	mov	r0, r4
 80076ae:	f001 fcef 	bl	8009090 <_free_r>
 80076b2:	69a3      	ldr	r3, [r4, #24]
 80076b4:	b1e3      	cbz	r3, 80076f0 <_reclaim_reent+0xb0>
 80076b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076b8:	4620      	mov	r0, r4
 80076ba:	4798      	blx	r3
 80076bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80076be:	b1b9      	cbz	r1, 80076f0 <_reclaim_reent+0xb0>
 80076c0:	4620      	mov	r0, r4
 80076c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076c6:	f7ff bfad 	b.w	8007624 <cleanup_glue>
 80076ca:	5949      	ldr	r1, [r1, r5]
 80076cc:	b941      	cbnz	r1, 80076e0 <_reclaim_reent+0xa0>
 80076ce:	3504      	adds	r5, #4
 80076d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076d2:	2d80      	cmp	r5, #128	; 0x80
 80076d4:	68d9      	ldr	r1, [r3, #12]
 80076d6:	d1f8      	bne.n	80076ca <_reclaim_reent+0x8a>
 80076d8:	4620      	mov	r0, r4
 80076da:	f001 fcd9 	bl	8009090 <_free_r>
 80076de:	e7ba      	b.n	8007656 <_reclaim_reent+0x16>
 80076e0:	680e      	ldr	r6, [r1, #0]
 80076e2:	4620      	mov	r0, r4
 80076e4:	f001 fcd4 	bl	8009090 <_free_r>
 80076e8:	4631      	mov	r1, r6
 80076ea:	e7ef      	b.n	80076cc <_reclaim_reent+0x8c>
 80076ec:	2500      	movs	r5, #0
 80076ee:	e7ef      	b.n	80076d0 <_reclaim_reent+0x90>
 80076f0:	bd70      	pop	{r4, r5, r6, pc}
 80076f2:	bf00      	nop
 80076f4:	20000010 	.word	0x20000010

080076f8 <_sbrk_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d06      	ldr	r5, [pc, #24]	; (8007714 <_sbrk_r+0x1c>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	f7f9 fe46 	bl	8001394 <_sbrk>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_sbrk_r+0x1a>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_sbrk_r+0x1a>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	20001cf4 	.word	0x20001cf4

08007718 <__sread>:
 8007718:	b510      	push	{r4, lr}
 800771a:	460c      	mov	r4, r1
 800771c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007720:	f001 fe5c 	bl	80093dc <_read_r>
 8007724:	2800      	cmp	r0, #0
 8007726:	bfab      	itete	ge
 8007728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800772a:	89a3      	ldrhlt	r3, [r4, #12]
 800772c:	181b      	addge	r3, r3, r0
 800772e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007732:	bfac      	ite	ge
 8007734:	6563      	strge	r3, [r4, #84]	; 0x54
 8007736:	81a3      	strhlt	r3, [r4, #12]
 8007738:	bd10      	pop	{r4, pc}

0800773a <__swrite>:
 800773a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773e:	461f      	mov	r7, r3
 8007740:	898b      	ldrh	r3, [r1, #12]
 8007742:	05db      	lsls	r3, r3, #23
 8007744:	4605      	mov	r5, r0
 8007746:	460c      	mov	r4, r1
 8007748:	4616      	mov	r6, r2
 800774a:	d505      	bpl.n	8007758 <__swrite+0x1e>
 800774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007750:	2302      	movs	r3, #2
 8007752:	2200      	movs	r2, #0
 8007754:	f001 f876 	bl	8008844 <_lseek_r>
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800775e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007762:	81a3      	strh	r3, [r4, #12]
 8007764:	4632      	mov	r2, r6
 8007766:	463b      	mov	r3, r7
 8007768:	4628      	mov	r0, r5
 800776a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800776e:	f000 b869 	b.w	8007844 <_write_r>

08007772 <__sseek>:
 8007772:	b510      	push	{r4, lr}
 8007774:	460c      	mov	r4, r1
 8007776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777a:	f001 f863 	bl	8008844 <_lseek_r>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	bf15      	itete	ne
 8007784:	6560      	strne	r0, [r4, #84]	; 0x54
 8007786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800778a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800778e:	81a3      	strheq	r3, [r4, #12]
 8007790:	bf18      	it	ne
 8007792:	81a3      	strhne	r3, [r4, #12]
 8007794:	bd10      	pop	{r4, pc}

08007796 <__sclose>:
 8007796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779a:	f000 b8f1 	b.w	8007980 <_close_r>
	...

080077a0 <__swbuf_r>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	460e      	mov	r6, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	4605      	mov	r5, r0
 80077a8:	b118      	cbz	r0, 80077b2 <__swbuf_r+0x12>
 80077aa:	6983      	ldr	r3, [r0, #24]
 80077ac:	b90b      	cbnz	r3, 80077b2 <__swbuf_r+0x12>
 80077ae:	f7ff f893 	bl	80068d8 <__sinit>
 80077b2:	4b21      	ldr	r3, [pc, #132]	; (8007838 <__swbuf_r+0x98>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	d12b      	bne.n	8007810 <__swbuf_r+0x70>
 80077b8:	686c      	ldr	r4, [r5, #4]
 80077ba:	69a3      	ldr	r3, [r4, #24]
 80077bc:	60a3      	str	r3, [r4, #8]
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	071a      	lsls	r2, r3, #28
 80077c2:	d52f      	bpl.n	8007824 <__swbuf_r+0x84>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	b36b      	cbz	r3, 8007824 <__swbuf_r+0x84>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	1ac0      	subs	r0, r0, r3
 80077ce:	6963      	ldr	r3, [r4, #20]
 80077d0:	b2f6      	uxtb	r6, r6
 80077d2:	4283      	cmp	r3, r0
 80077d4:	4637      	mov	r7, r6
 80077d6:	dc04      	bgt.n	80077e2 <__swbuf_r+0x42>
 80077d8:	4621      	mov	r1, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 ffe0 	bl	80087a0 <_fflush_r>
 80077e0:	bb30      	cbnz	r0, 8007830 <__swbuf_r+0x90>
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	60a3      	str	r3, [r4, #8]
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	6022      	str	r2, [r4, #0]
 80077ee:	701e      	strb	r6, [r3, #0]
 80077f0:	6963      	ldr	r3, [r4, #20]
 80077f2:	3001      	adds	r0, #1
 80077f4:	4283      	cmp	r3, r0
 80077f6:	d004      	beq.n	8007802 <__swbuf_r+0x62>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	07db      	lsls	r3, r3, #31
 80077fc:	d506      	bpl.n	800780c <__swbuf_r+0x6c>
 80077fe:	2e0a      	cmp	r6, #10
 8007800:	d104      	bne.n	800780c <__swbuf_r+0x6c>
 8007802:	4621      	mov	r1, r4
 8007804:	4628      	mov	r0, r5
 8007806:	f000 ffcb 	bl	80087a0 <_fflush_r>
 800780a:	b988      	cbnz	r0, 8007830 <__swbuf_r+0x90>
 800780c:	4638      	mov	r0, r7
 800780e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <__swbuf_r+0x9c>)
 8007812:	429c      	cmp	r4, r3
 8007814:	d101      	bne.n	800781a <__swbuf_r+0x7a>
 8007816:	68ac      	ldr	r4, [r5, #8]
 8007818:	e7cf      	b.n	80077ba <__swbuf_r+0x1a>
 800781a:	4b09      	ldr	r3, [pc, #36]	; (8007840 <__swbuf_r+0xa0>)
 800781c:	429c      	cmp	r4, r3
 800781e:	bf08      	it	eq
 8007820:	68ec      	ldreq	r4, [r5, #12]
 8007822:	e7ca      	b.n	80077ba <__swbuf_r+0x1a>
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f81e 	bl	8007868 <__swsetup_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	d0cb      	beq.n	80077c8 <__swbuf_r+0x28>
 8007830:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007834:	e7ea      	b.n	800780c <__swbuf_r+0x6c>
 8007836:	bf00      	nop
 8007838:	080096f4 	.word	0x080096f4
 800783c:	08009714 	.word	0x08009714
 8007840:	080096d4 	.word	0x080096d4

08007844 <_write_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d07      	ldr	r5, [pc, #28]	; (8007864 <_write_r+0x20>)
 8007848:	4604      	mov	r4, r0
 800784a:	4608      	mov	r0, r1
 800784c:	4611      	mov	r1, r2
 800784e:	2200      	movs	r2, #0
 8007850:	602a      	str	r2, [r5, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	f7f9 fd4d 	bl	80012f2 <_write>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_write_r+0x1e>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	b103      	cbz	r3, 8007862 <_write_r+0x1e>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	20001cf4 	.word	0x20001cf4

08007868 <__swsetup_r>:
 8007868:	4b32      	ldr	r3, [pc, #200]	; (8007934 <__swsetup_r+0xcc>)
 800786a:	b570      	push	{r4, r5, r6, lr}
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	4606      	mov	r6, r0
 8007870:	460c      	mov	r4, r1
 8007872:	b125      	cbz	r5, 800787e <__swsetup_r+0x16>
 8007874:	69ab      	ldr	r3, [r5, #24]
 8007876:	b913      	cbnz	r3, 800787e <__swsetup_r+0x16>
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff f82d 	bl	80068d8 <__sinit>
 800787e:	4b2e      	ldr	r3, [pc, #184]	; (8007938 <__swsetup_r+0xd0>)
 8007880:	429c      	cmp	r4, r3
 8007882:	d10f      	bne.n	80078a4 <__swsetup_r+0x3c>
 8007884:	686c      	ldr	r4, [r5, #4]
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800788c:	0719      	lsls	r1, r3, #28
 800788e:	d42c      	bmi.n	80078ea <__swsetup_r+0x82>
 8007890:	06dd      	lsls	r5, r3, #27
 8007892:	d411      	bmi.n	80078b8 <__swsetup_r+0x50>
 8007894:	2309      	movs	r3, #9
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078a2:	e03e      	b.n	8007922 <__swsetup_r+0xba>
 80078a4:	4b25      	ldr	r3, [pc, #148]	; (800793c <__swsetup_r+0xd4>)
 80078a6:	429c      	cmp	r4, r3
 80078a8:	d101      	bne.n	80078ae <__swsetup_r+0x46>
 80078aa:	68ac      	ldr	r4, [r5, #8]
 80078ac:	e7eb      	b.n	8007886 <__swsetup_r+0x1e>
 80078ae:	4b24      	ldr	r3, [pc, #144]	; (8007940 <__swsetup_r+0xd8>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	bf08      	it	eq
 80078b4:	68ec      	ldreq	r4, [r5, #12]
 80078b6:	e7e6      	b.n	8007886 <__swsetup_r+0x1e>
 80078b8:	0758      	lsls	r0, r3, #29
 80078ba:	d512      	bpl.n	80078e2 <__swsetup_r+0x7a>
 80078bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078be:	b141      	cbz	r1, 80078d2 <__swsetup_r+0x6a>
 80078c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d002      	beq.n	80078ce <__swsetup_r+0x66>
 80078c8:	4630      	mov	r0, r6
 80078ca:	f001 fbe1 	bl	8009090 <_free_r>
 80078ce:	2300      	movs	r3, #0
 80078d0:	6363      	str	r3, [r4, #52]	; 0x34
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	2300      	movs	r3, #0
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	f043 0308 	orr.w	r3, r3, #8
 80078e8:	81a3      	strh	r3, [r4, #12]
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	b94b      	cbnz	r3, 8007902 <__swsetup_r+0x9a>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f8:	d003      	beq.n	8007902 <__swsetup_r+0x9a>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4630      	mov	r0, r6
 80078fe:	f000 ffd9 	bl	80088b4 <__smakebuf_r>
 8007902:	89a0      	ldrh	r0, [r4, #12]
 8007904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007908:	f010 0301 	ands.w	r3, r0, #1
 800790c:	d00a      	beq.n	8007924 <__swsetup_r+0xbc>
 800790e:	2300      	movs	r3, #0
 8007910:	60a3      	str	r3, [r4, #8]
 8007912:	6963      	ldr	r3, [r4, #20]
 8007914:	425b      	negs	r3, r3
 8007916:	61a3      	str	r3, [r4, #24]
 8007918:	6923      	ldr	r3, [r4, #16]
 800791a:	b943      	cbnz	r3, 800792e <__swsetup_r+0xc6>
 800791c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007920:	d1ba      	bne.n	8007898 <__swsetup_r+0x30>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	0781      	lsls	r1, r0, #30
 8007926:	bf58      	it	pl
 8007928:	6963      	ldrpl	r3, [r4, #20]
 800792a:	60a3      	str	r3, [r4, #8]
 800792c:	e7f4      	b.n	8007918 <__swsetup_r+0xb0>
 800792e:	2000      	movs	r0, #0
 8007930:	e7f7      	b.n	8007922 <__swsetup_r+0xba>
 8007932:	bf00      	nop
 8007934:	20000010 	.word	0x20000010
 8007938:	080096f4 	.word	0x080096f4
 800793c:	08009714 	.word	0x08009714
 8007940:	080096d4 	.word	0x080096d4

08007944 <__assert_func>:
 8007944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007946:	4614      	mov	r4, r2
 8007948:	461a      	mov	r2, r3
 800794a:	4b09      	ldr	r3, [pc, #36]	; (8007970 <__assert_func+0x2c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4605      	mov	r5, r0
 8007950:	68d8      	ldr	r0, [r3, #12]
 8007952:	b14c      	cbz	r4, 8007968 <__assert_func+0x24>
 8007954:	4b07      	ldr	r3, [pc, #28]	; (8007974 <__assert_func+0x30>)
 8007956:	9100      	str	r1, [sp, #0]
 8007958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800795c:	4906      	ldr	r1, [pc, #24]	; (8007978 <__assert_func+0x34>)
 800795e:	462b      	mov	r3, r5
 8007960:	f000 ff5a 	bl	8008818 <fiprintf>
 8007964:	f001 fd4c 	bl	8009400 <abort>
 8007968:	4b04      	ldr	r3, [pc, #16]	; (800797c <__assert_func+0x38>)
 800796a:	461c      	mov	r4, r3
 800796c:	e7f3      	b.n	8007956 <__assert_func+0x12>
 800796e:	bf00      	nop
 8007970:	20000010 	.word	0x20000010
 8007974:	080097de 	.word	0x080097de
 8007978:	080097eb 	.word	0x080097eb
 800797c:	08009819 	.word	0x08009819

08007980 <_close_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d06      	ldr	r5, [pc, #24]	; (800799c <_close_r+0x1c>)
 8007984:	2300      	movs	r3, #0
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	602b      	str	r3, [r5, #0]
 800798c:	f7f9 fccd 	bl	800132a <_close>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_close_r+0x1a>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_close_r+0x1a>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20001cf4 	.word	0x20001cf4

080079a0 <quorem>:
 80079a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	6903      	ldr	r3, [r0, #16]
 80079a6:	690c      	ldr	r4, [r1, #16]
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	4607      	mov	r7, r0
 80079ac:	f2c0 8081 	blt.w	8007ab2 <quorem+0x112>
 80079b0:	3c01      	subs	r4, #1
 80079b2:	f101 0814 	add.w	r8, r1, #20
 80079b6:	f100 0514 	add.w	r5, r0, #20
 80079ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c8:	3301      	adds	r3, #1
 80079ca:	429a      	cmp	r2, r3
 80079cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80079d8:	d331      	bcc.n	8007a3e <quorem+0x9e>
 80079da:	f04f 0e00 	mov.w	lr, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	46ac      	mov	ip, r5
 80079e2:	46f2      	mov	sl, lr
 80079e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80079e8:	b293      	uxth	r3, r2
 80079ea:	fb06 e303 	mla	r3, r6, r3, lr
 80079ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	ebaa 0303 	sub.w	r3, sl, r3
 80079f8:	f8dc a000 	ldr.w	sl, [ip]
 80079fc:	0c12      	lsrs	r2, r2, #16
 80079fe:	fa13 f38a 	uxtah	r3, r3, sl
 8007a02:	fb06 e202 	mla	r2, r6, r2, lr
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	9b00      	ldr	r3, [sp, #0]
 8007a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a18:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a1c:	4581      	cmp	r9, r0
 8007a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a22:	f84c 3b04 	str.w	r3, [ip], #4
 8007a26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a2a:	d2db      	bcs.n	80079e4 <quorem+0x44>
 8007a2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a30:	b92b      	cbnz	r3, 8007a3e <quorem+0x9e>
 8007a32:	9b01      	ldr	r3, [sp, #4]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	429d      	cmp	r5, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	d32e      	bcc.n	8007a9a <quorem+0xfa>
 8007a3c:	613c      	str	r4, [r7, #16]
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f001 fa0e 	bl	8008e60 <__mcmp>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	db24      	blt.n	8007a92 <quorem+0xf2>
 8007a48:	3601      	adds	r6, #1
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f04f 0c00 	mov.w	ip, #0
 8007a50:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a54:	f8d0 e000 	ldr.w	lr, [r0]
 8007a58:	b293      	uxth	r3, r2
 8007a5a:	ebac 0303 	sub.w	r3, ip, r3
 8007a5e:	0c12      	lsrs	r2, r2, #16
 8007a60:	fa13 f38e 	uxtah	r3, r3, lr
 8007a64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a72:	45c1      	cmp	r9, r8
 8007a74:	f840 3b04 	str.w	r3, [r0], #4
 8007a78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a7c:	d2e8      	bcs.n	8007a50 <quorem+0xb0>
 8007a7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a86:	b922      	cbnz	r2, 8007a92 <quorem+0xf2>
 8007a88:	3b04      	subs	r3, #4
 8007a8a:	429d      	cmp	r5, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	d30a      	bcc.n	8007aa6 <quorem+0x106>
 8007a90:	613c      	str	r4, [r7, #16]
 8007a92:	4630      	mov	r0, r6
 8007a94:	b003      	add	sp, #12
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	d1cc      	bne.n	8007a3c <quorem+0x9c>
 8007aa2:	3c01      	subs	r4, #1
 8007aa4:	e7c7      	b.n	8007a36 <quorem+0x96>
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	3b04      	subs	r3, #4
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	d1f0      	bne.n	8007a90 <quorem+0xf0>
 8007aae:	3c01      	subs	r4, #1
 8007ab0:	e7eb      	b.n	8007a8a <quorem+0xea>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e7ee      	b.n	8007a94 <quorem+0xf4>
	...

08007ab8 <_dtoa_r>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	ed2d 8b04 	vpush	{d8-d9}
 8007ac0:	ec57 6b10 	vmov	r6, r7, d0
 8007ac4:	b093      	sub	sp, #76	; 0x4c
 8007ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007acc:	9106      	str	r1, [sp, #24]
 8007ace:	ee10 aa10 	vmov	sl, s0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ad8:	46bb      	mov	fp, r7
 8007ada:	b975      	cbnz	r5, 8007afa <_dtoa_r+0x42>
 8007adc:	2010      	movs	r0, #16
 8007ade:	f000 ff29 	bl	8008934 <malloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ae6:	b920      	cbnz	r0, 8007af2 <_dtoa_r+0x3a>
 8007ae8:	4ba7      	ldr	r3, [pc, #668]	; (8007d88 <_dtoa_r+0x2d0>)
 8007aea:	21ea      	movs	r1, #234	; 0xea
 8007aec:	48a7      	ldr	r0, [pc, #668]	; (8007d8c <_dtoa_r+0x2d4>)
 8007aee:	f7ff ff29 	bl	8007944 <__assert_func>
 8007af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007af6:	6005      	str	r5, [r0, #0]
 8007af8:	60c5      	str	r5, [r0, #12]
 8007afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007afc:	6819      	ldr	r1, [r3, #0]
 8007afe:	b151      	cbz	r1, 8007b16 <_dtoa_r+0x5e>
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	604a      	str	r2, [r1, #4]
 8007b04:	2301      	movs	r3, #1
 8007b06:	4093      	lsls	r3, r2
 8007b08:	608b      	str	r3, [r1, #8]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 ff66 	bl	80089dc <_Bfree>
 8007b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	1e3b      	subs	r3, r7, #0
 8007b18:	bfaa      	itet	ge
 8007b1a:	2300      	movge	r3, #0
 8007b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b20:	f8c8 3000 	strge.w	r3, [r8]
 8007b24:	4b9a      	ldr	r3, [pc, #616]	; (8007d90 <_dtoa_r+0x2d8>)
 8007b26:	bfbc      	itt	lt
 8007b28:	2201      	movlt	r2, #1
 8007b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b2e:	ea33 030b 	bics.w	r3, r3, fp
 8007b32:	d11b      	bne.n	8007b6c <_dtoa_r+0xb4>
 8007b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b40:	4333      	orrs	r3, r6
 8007b42:	f000 8592 	beq.w	800866a <_dtoa_r+0xbb2>
 8007b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b48:	b963      	cbnz	r3, 8007b64 <_dtoa_r+0xac>
 8007b4a:	4b92      	ldr	r3, [pc, #584]	; (8007d94 <_dtoa_r+0x2dc>)
 8007b4c:	e022      	b.n	8007b94 <_dtoa_r+0xdc>
 8007b4e:	4b92      	ldr	r3, [pc, #584]	; (8007d98 <_dtoa_r+0x2e0>)
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	3308      	adds	r3, #8
 8007b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	9801      	ldr	r0, [sp, #4]
 8007b5a:	b013      	add	sp, #76	; 0x4c
 8007b5c:	ecbd 8b04 	vpop	{d8-d9}
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	4b8b      	ldr	r3, [pc, #556]	; (8007d94 <_dtoa_r+0x2dc>)
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	3303      	adds	r3, #3
 8007b6a:	e7f3      	b.n	8007b54 <_dtoa_r+0x9c>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	f7f8 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b78:	ec4b ab19 	vmov	d9, sl, fp
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	b158      	cbz	r0, 8007b98 <_dtoa_r+0xe0>
 8007b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b82:	2301      	movs	r3, #1
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 856b 	beq.w	8008664 <_dtoa_r+0xbac>
 8007b8e:	4883      	ldr	r0, [pc, #524]	; (8007d9c <_dtoa_r+0x2e4>)
 8007b90:	6018      	str	r0, [r3, #0]
 8007b92:	1e43      	subs	r3, r0, #1
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	e7df      	b.n	8007b58 <_dtoa_r+0xa0>
 8007b98:	ec4b ab10 	vmov	d0, sl, fp
 8007b9c:	aa10      	add	r2, sp, #64	; 0x40
 8007b9e:	a911      	add	r1, sp, #68	; 0x44
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f001 fa03 	bl	8008fac <__d2b>
 8007ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007baa:	ee08 0a10 	vmov	s16, r0
 8007bae:	2d00      	cmp	r5, #0
 8007bb0:	f000 8084 	beq.w	8007cbc <_dtoa_r+0x204>
 8007bb4:	ee19 3a90 	vmov	r3, s19
 8007bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007bc0:	4656      	mov	r6, sl
 8007bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007bce:	4b74      	ldr	r3, [pc, #464]	; (8007da0 <_dtoa_r+0x2e8>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 fb57 	bl	8000288 <__aeabi_dsub>
 8007bda:	a365      	add	r3, pc, #404	; (adr r3, 8007d70 <_dtoa_r+0x2b8>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fd0a 	bl	80005f8 <__aeabi_dmul>
 8007be4:	a364      	add	r3, pc, #400	; (adr r3, 8007d78 <_dtoa_r+0x2c0>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7f8 fb4f 	bl	800028c <__adddf3>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	460f      	mov	r7, r1
 8007bf4:	f7f8 fc96 	bl	8000524 <__aeabi_i2d>
 8007bf8:	a361      	add	r3, pc, #388	; (adr r3, 8007d80 <_dtoa_r+0x2c8>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4630      	mov	r0, r6
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 fb3f 	bl	800028c <__adddf3>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460f      	mov	r7, r1
 8007c12:	f7f8 ffa1 	bl	8000b58 <__aeabi_d2iz>
 8007c16:	2200      	movs	r2, #0
 8007c18:	9000      	str	r0, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ff5c 	bl	8000adc <__aeabi_dcmplt>
 8007c24:	b150      	cbz	r0, 8007c3c <_dtoa_r+0x184>
 8007c26:	9800      	ldr	r0, [sp, #0]
 8007c28:	f7f8 fc7c 	bl	8000524 <__aeabi_i2d>
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	f7f8 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c34:	b910      	cbnz	r0, 8007c3c <_dtoa_r+0x184>
 8007c36:	9b00      	ldr	r3, [sp, #0]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	9b00      	ldr	r3, [sp, #0]
 8007c3e:	2b16      	cmp	r3, #22
 8007c40:	d85a      	bhi.n	8007cf8 <_dtoa_r+0x240>
 8007c42:	9a00      	ldr	r2, [sp, #0]
 8007c44:	4b57      	ldr	r3, [pc, #348]	; (8007da4 <_dtoa_r+0x2ec>)
 8007c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	ec51 0b19 	vmov	r0, r1, d9
 8007c52:	f7f8 ff43 	bl	8000adc <__aeabi_dcmplt>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d050      	beq.n	8007cfc <_dtoa_r+0x244>
 8007c5a:	9b00      	ldr	r3, [sp, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	2300      	movs	r3, #0
 8007c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c66:	1b5d      	subs	r5, r3, r5
 8007c68:	1e6b      	subs	r3, r5, #1
 8007c6a:	9305      	str	r3, [sp, #20]
 8007c6c:	bf45      	ittet	mi
 8007c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c72:	9304      	strmi	r3, [sp, #16]
 8007c74:	2300      	movpl	r3, #0
 8007c76:	2300      	movmi	r3, #0
 8007c78:	bf4c      	ite	mi
 8007c7a:	9305      	strmi	r3, [sp, #20]
 8007c7c:	9304      	strpl	r3, [sp, #16]
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	db3d      	blt.n	8007d00 <_dtoa_r+0x248>
 8007c84:	9b05      	ldr	r3, [sp, #20]
 8007c86:	9a00      	ldr	r2, [sp, #0]
 8007c88:	920a      	str	r2, [sp, #40]	; 0x28
 8007c8a:	4413      	add	r3, r2
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9307      	str	r3, [sp, #28]
 8007c92:	9b06      	ldr	r3, [sp, #24]
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	f200 8089 	bhi.w	8007dac <_dtoa_r+0x2f4>
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	bfc4      	itt	gt
 8007c9e:	3b04      	subgt	r3, #4
 8007ca0:	9306      	strgt	r3, [sp, #24]
 8007ca2:	9b06      	ldr	r3, [sp, #24]
 8007ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ca8:	bfcc      	ite	gt
 8007caa:	2500      	movgt	r5, #0
 8007cac:	2501      	movle	r5, #1
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	f200 8087 	bhi.w	8007dc2 <_dtoa_r+0x30a>
 8007cb4:	e8df f003 	tbb	[pc, r3]
 8007cb8:	59383a2d 	.word	0x59383a2d
 8007cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007cc0:	441d      	add	r5, r3
 8007cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	bfc1      	itttt	gt
 8007cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cda:	bfda      	itte	le
 8007cdc:	f1c3 0320 	rsble	r3, r3, #32
 8007ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ce4:	4318      	orrgt	r0, r3
 8007ce6:	f7f8 fc0d 	bl	8000504 <__aeabi_ui2d>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4606      	mov	r6, r0
 8007cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cf2:	3d01      	subs	r5, #1
 8007cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf6:	e76a      	b.n	8007bce <_dtoa_r+0x116>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e7b2      	b.n	8007c62 <_dtoa_r+0x1aa>
 8007cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007cfe:	e7b1      	b.n	8007c64 <_dtoa_r+0x1ac>
 8007d00:	9b04      	ldr	r3, [sp, #16]
 8007d02:	9a00      	ldr	r2, [sp, #0]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	4253      	negs	r3, r2
 8007d0a:	9307      	str	r3, [sp, #28]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d10:	e7bf      	b.n	8007c92 <_dtoa_r+0x1da>
 8007d12:	2300      	movs	r3, #0
 8007d14:	9308      	str	r3, [sp, #32]
 8007d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dc55      	bgt.n	8007dc8 <_dtoa_r+0x310>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d22:	461a      	mov	r2, r3
 8007d24:	9209      	str	r2, [sp, #36]	; 0x24
 8007d26:	e00c      	b.n	8007d42 <_dtoa_r+0x28a>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e7f3      	b.n	8007d14 <_dtoa_r+0x25c>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	9b00      	ldr	r3, [sp, #0]
 8007d34:	4413      	add	r3, r2
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	bfb8      	it	lt
 8007d40:	2301      	movlt	r3, #1
 8007d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d44:	2200      	movs	r2, #0
 8007d46:	6042      	str	r2, [r0, #4]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	f102 0614 	add.w	r6, r2, #20
 8007d4e:	429e      	cmp	r6, r3
 8007d50:	6841      	ldr	r1, [r0, #4]
 8007d52:	d93d      	bls.n	8007dd0 <_dtoa_r+0x318>
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fe01 	bl	800895c <_Balloc>
 8007d5a:	9001      	str	r0, [sp, #4]
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d13b      	bne.n	8007dd8 <_dtoa_r+0x320>
 8007d60:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <_dtoa_r+0x2f0>)
 8007d62:	4602      	mov	r2, r0
 8007d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d68:	e6c0      	b.n	8007aec <_dtoa_r+0x34>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e7df      	b.n	8007d2e <_dtoa_r+0x276>
 8007d6e:	bf00      	nop
 8007d70:	636f4361 	.word	0x636f4361
 8007d74:	3fd287a7 	.word	0x3fd287a7
 8007d78:	8b60c8b3 	.word	0x8b60c8b3
 8007d7c:	3fc68a28 	.word	0x3fc68a28
 8007d80:	509f79fb 	.word	0x509f79fb
 8007d84:	3fd34413 	.word	0x3fd34413
 8007d88:	0800976c 	.word	0x0800976c
 8007d8c:	08009827 	.word	0x08009827
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	08009823 	.word	0x08009823
 8007d98:	0800981a 	.word	0x0800981a
 8007d9c:	08009749 	.word	0x08009749
 8007da0:	3ff80000 	.word	0x3ff80000
 8007da4:	08009918 	.word	0x08009918
 8007da8:	08009882 	.word	0x08009882
 8007dac:	2501      	movs	r5, #1
 8007dae:	2300      	movs	r3, #0
 8007db0:	9306      	str	r3, [sp, #24]
 8007db2:	9508      	str	r5, [sp, #32]
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2312      	movs	r3, #18
 8007dc0:	e7b0      	b.n	8007d24 <_dtoa_r+0x26c>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	9308      	str	r3, [sp, #32]
 8007dc6:	e7f5      	b.n	8007db4 <_dtoa_r+0x2fc>
 8007dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dce:	e7b8      	b.n	8007d42 <_dtoa_r+0x28a>
 8007dd0:	3101      	adds	r1, #1
 8007dd2:	6041      	str	r1, [r0, #4]
 8007dd4:	0052      	lsls	r2, r2, #1
 8007dd6:	e7b8      	b.n	8007d4a <_dtoa_r+0x292>
 8007dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dda:	9a01      	ldr	r2, [sp, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	2b0e      	cmp	r3, #14
 8007de2:	f200 809d 	bhi.w	8007f20 <_dtoa_r+0x468>
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	f000 809a 	beq.w	8007f20 <_dtoa_r+0x468>
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	dd32      	ble.n	8007e58 <_dtoa_r+0x3a0>
 8007df2:	4ab7      	ldr	r2, [pc, #732]	; (80080d0 <_dtoa_r+0x618>)
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	05d8      	lsls	r0, r3, #23
 8007e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e08:	d516      	bpl.n	8007e38 <_dtoa_r+0x380>
 8007e0a:	4bb2      	ldr	r3, [pc, #712]	; (80080d4 <_dtoa_r+0x61c>)
 8007e0c:	ec51 0b19 	vmov	r0, r1, d9
 8007e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e14:	f7f8 fd1a 	bl	800084c <__aeabi_ddiv>
 8007e18:	f007 070f 	and.w	r7, r7, #15
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	468b      	mov	fp, r1
 8007e20:	2503      	movs	r5, #3
 8007e22:	4eac      	ldr	r6, [pc, #688]	; (80080d4 <_dtoa_r+0x61c>)
 8007e24:	b957      	cbnz	r7, 8007e3c <_dtoa_r+0x384>
 8007e26:	4642      	mov	r2, r8
 8007e28:	464b      	mov	r3, r9
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	f7f8 fd0d 	bl	800084c <__aeabi_ddiv>
 8007e32:	4682      	mov	sl, r0
 8007e34:	468b      	mov	fp, r1
 8007e36:	e028      	b.n	8007e8a <_dtoa_r+0x3d2>
 8007e38:	2502      	movs	r5, #2
 8007e3a:	e7f2      	b.n	8007e22 <_dtoa_r+0x36a>
 8007e3c:	07f9      	lsls	r1, r7, #31
 8007e3e:	d508      	bpl.n	8007e52 <_dtoa_r+0x39a>
 8007e40:	4640      	mov	r0, r8
 8007e42:	4649      	mov	r1, r9
 8007e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	4680      	mov	r8, r0
 8007e50:	4689      	mov	r9, r1
 8007e52:	107f      	asrs	r7, r7, #1
 8007e54:	3608      	adds	r6, #8
 8007e56:	e7e5      	b.n	8007e24 <_dtoa_r+0x36c>
 8007e58:	f000 809b 	beq.w	8007f92 <_dtoa_r+0x4da>
 8007e5c:	9b00      	ldr	r3, [sp, #0]
 8007e5e:	4f9d      	ldr	r7, [pc, #628]	; (80080d4 <_dtoa_r+0x61c>)
 8007e60:	425e      	negs	r6, r3
 8007e62:	4b9b      	ldr	r3, [pc, #620]	; (80080d0 <_dtoa_r+0x618>)
 8007e64:	f006 020f 	and.w	r2, r6, #15
 8007e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	ec51 0b19 	vmov	r0, r1, d9
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	1136      	asrs	r6, r6, #4
 8007e7a:	4682      	mov	sl, r0
 8007e7c:	468b      	mov	fp, r1
 8007e7e:	2300      	movs	r3, #0
 8007e80:	2502      	movs	r5, #2
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	d17a      	bne.n	8007f7c <_dtoa_r+0x4c4>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1d3      	bne.n	8007e32 <_dtoa_r+0x37a>
 8007e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 8082 	beq.w	8007f96 <_dtoa_r+0x4de>
 8007e92:	4b91      	ldr	r3, [pc, #580]	; (80080d8 <_dtoa_r+0x620>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	4650      	mov	r0, sl
 8007e98:	4659      	mov	r1, fp
 8007e9a:	f7f8 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d079      	beq.n	8007f96 <_dtoa_r+0x4de>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d076      	beq.n	8007f96 <_dtoa_r+0x4de>
 8007ea8:	9b02      	ldr	r3, [sp, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	dd36      	ble.n	8007f1c <_dtoa_r+0x464>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	4650      	mov	r0, sl
 8007eb2:	4659      	mov	r1, fp
 8007eb4:	1e5f      	subs	r7, r3, #1
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4b88      	ldr	r3, [pc, #544]	; (80080dc <_dtoa_r+0x624>)
 8007eba:	f7f8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8007ebe:	9e02      	ldr	r6, [sp, #8]
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f7f8 fb2c 	bl	8000524 <__aeabi_i2d>
 8007ecc:	4652      	mov	r2, sl
 8007ece:	465b      	mov	r3, fp
 8007ed0:	f7f8 fb92 	bl	80005f8 <__aeabi_dmul>
 8007ed4:	4b82      	ldr	r3, [pc, #520]	; (80080e0 <_dtoa_r+0x628>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f7f8 f9d8 	bl	800028c <__adddf3>
 8007edc:	46d0      	mov	r8, sl
 8007ede:	46d9      	mov	r9, fp
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	d158      	bne.n	8007f9c <_dtoa_r+0x4e4>
 8007eea:	4b7e      	ldr	r3, [pc, #504]	; (80080e4 <_dtoa_r+0x62c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	f7f8 f9c9 	bl	8000288 <__aeabi_dsub>
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	465b      	mov	r3, fp
 8007efa:	4680      	mov	r8, r0
 8007efc:	4689      	mov	r9, r1
 8007efe:	f7f8 fe0b 	bl	8000b18 <__aeabi_dcmpgt>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f040 8295 	bne.w	8008432 <_dtoa_r+0x97a>
 8007f08:	4652      	mov	r2, sl
 8007f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 fde3 	bl	8000adc <__aeabi_dcmplt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f040 8289 	bne.w	800842e <_dtoa_r+0x976>
 8007f1c:	ec5b ab19 	vmov	sl, fp, d9
 8007f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f2c0 8148 	blt.w	80081b8 <_dtoa_r+0x700>
 8007f28:	9a00      	ldr	r2, [sp, #0]
 8007f2a:	2a0e      	cmp	r2, #14
 8007f2c:	f300 8144 	bgt.w	80081b8 <_dtoa_r+0x700>
 8007f30:	4b67      	ldr	r3, [pc, #412]	; (80080d0 <_dtoa_r+0x618>)
 8007f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f280 80d5 	bge.w	80080ec <_dtoa_r+0x634>
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f300 80d1 	bgt.w	80080ec <_dtoa_r+0x634>
 8007f4a:	f040 826f 	bne.w	800842c <_dtoa_r+0x974>
 8007f4e:	4b65      	ldr	r3, [pc, #404]	; (80080e4 <_dtoa_r+0x62c>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	4640      	mov	r0, r8
 8007f54:	4649      	mov	r1, r9
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	f7f8 fdd1 	bl	8000b04 <__aeabi_dcmpge>
 8007f62:	9e03      	ldr	r6, [sp, #12]
 8007f64:	4637      	mov	r7, r6
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f040 8245 	bne.w	80083f6 <_dtoa_r+0x93e>
 8007f6c:	9d01      	ldr	r5, [sp, #4]
 8007f6e:	2331      	movs	r3, #49	; 0x31
 8007f70:	f805 3b01 	strb.w	r3, [r5], #1
 8007f74:	9b00      	ldr	r3, [sp, #0]
 8007f76:	3301      	adds	r3, #1
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	e240      	b.n	80083fe <_dtoa_r+0x946>
 8007f7c:	07f2      	lsls	r2, r6, #31
 8007f7e:	d505      	bpl.n	8007f8c <_dtoa_r+0x4d4>
 8007f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f84:	f7f8 fb38 	bl	80005f8 <__aeabi_dmul>
 8007f88:	3501      	adds	r5, #1
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	1076      	asrs	r6, r6, #1
 8007f8e:	3708      	adds	r7, #8
 8007f90:	e777      	b.n	8007e82 <_dtoa_r+0x3ca>
 8007f92:	2502      	movs	r5, #2
 8007f94:	e779      	b.n	8007e8a <_dtoa_r+0x3d2>
 8007f96:	9f00      	ldr	r7, [sp, #0]
 8007f98:	9e03      	ldr	r6, [sp, #12]
 8007f9a:	e794      	b.n	8007ec6 <_dtoa_r+0x40e>
 8007f9c:	9901      	ldr	r1, [sp, #4]
 8007f9e:	4b4c      	ldr	r3, [pc, #304]	; (80080d0 <_dtoa_r+0x618>)
 8007fa0:	4431      	add	r1, r6
 8007fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8007fa4:	9908      	ldr	r1, [sp, #32]
 8007fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d043      	beq.n	800803a <_dtoa_r+0x582>
 8007fb2:	494d      	ldr	r1, [pc, #308]	; (80080e8 <_dtoa_r+0x630>)
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f7f8 fc49 	bl	800084c <__aeabi_ddiv>
 8007fba:	4652      	mov	r2, sl
 8007fbc:	465b      	mov	r3, fp
 8007fbe:	f7f8 f963 	bl	8000288 <__aeabi_dsub>
 8007fc2:	9d01      	ldr	r5, [sp, #4]
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	468b      	mov	fp, r1
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4640      	mov	r0, r8
 8007fcc:	f7f8 fdc4 	bl	8000b58 <__aeabi_d2iz>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	f7f8 faa7 	bl	8000524 <__aeabi_i2d>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4649      	mov	r1, r9
 8007fde:	f7f8 f953 	bl	8000288 <__aeabi_dsub>
 8007fe2:	3630      	adds	r6, #48	; 0x30
 8007fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8007fe8:	4652      	mov	r2, sl
 8007fea:	465b      	mov	r3, fp
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	f7f8 fd74 	bl	8000adc <__aeabi_dcmplt>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d163      	bne.n	80080c0 <_dtoa_r+0x608>
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	4936      	ldr	r1, [pc, #216]	; (80080d8 <_dtoa_r+0x620>)
 8007ffe:	2000      	movs	r0, #0
 8008000:	f7f8 f942 	bl	8000288 <__aeabi_dsub>
 8008004:	4652      	mov	r2, sl
 8008006:	465b      	mov	r3, fp
 8008008:	f7f8 fd68 	bl	8000adc <__aeabi_dcmplt>
 800800c:	2800      	cmp	r0, #0
 800800e:	f040 80b5 	bne.w	800817c <_dtoa_r+0x6c4>
 8008012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008014:	429d      	cmp	r5, r3
 8008016:	d081      	beq.n	8007f1c <_dtoa_r+0x464>
 8008018:	4b30      	ldr	r3, [pc, #192]	; (80080dc <_dtoa_r+0x624>)
 800801a:	2200      	movs	r2, #0
 800801c:	4650      	mov	r0, sl
 800801e:	4659      	mov	r1, fp
 8008020:	f7f8 faea 	bl	80005f8 <__aeabi_dmul>
 8008024:	4b2d      	ldr	r3, [pc, #180]	; (80080dc <_dtoa_r+0x624>)
 8008026:	4682      	mov	sl, r0
 8008028:	468b      	mov	fp, r1
 800802a:	4640      	mov	r0, r8
 800802c:	4649      	mov	r1, r9
 800802e:	2200      	movs	r2, #0
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	4680      	mov	r8, r0
 8008036:	4689      	mov	r9, r1
 8008038:	e7c6      	b.n	8007fc8 <_dtoa_r+0x510>
 800803a:	4650      	mov	r0, sl
 800803c:	4659      	mov	r1, fp
 800803e:	f7f8 fadb 	bl	80005f8 <__aeabi_dmul>
 8008042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008044:	9d01      	ldr	r5, [sp, #4]
 8008046:	930f      	str	r3, [sp, #60]	; 0x3c
 8008048:	4682      	mov	sl, r0
 800804a:	468b      	mov	fp, r1
 800804c:	4649      	mov	r1, r9
 800804e:	4640      	mov	r0, r8
 8008050:	f7f8 fd82 	bl	8000b58 <__aeabi_d2iz>
 8008054:	4606      	mov	r6, r0
 8008056:	f7f8 fa65 	bl	8000524 <__aeabi_i2d>
 800805a:	3630      	adds	r6, #48	; 0x30
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4640      	mov	r0, r8
 8008062:	4649      	mov	r1, r9
 8008064:	f7f8 f910 	bl	8000288 <__aeabi_dsub>
 8008068:	f805 6b01 	strb.w	r6, [r5], #1
 800806c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800806e:	429d      	cmp	r5, r3
 8008070:	4680      	mov	r8, r0
 8008072:	4689      	mov	r9, r1
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	d124      	bne.n	80080c4 <_dtoa_r+0x60c>
 800807a:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <_dtoa_r+0x630>)
 800807c:	4650      	mov	r0, sl
 800807e:	4659      	mov	r1, fp
 8008080:	f7f8 f904 	bl	800028c <__adddf3>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4640      	mov	r0, r8
 800808a:	4649      	mov	r1, r9
 800808c:	f7f8 fd44 	bl	8000b18 <__aeabi_dcmpgt>
 8008090:	2800      	cmp	r0, #0
 8008092:	d173      	bne.n	800817c <_dtoa_r+0x6c4>
 8008094:	4652      	mov	r2, sl
 8008096:	465b      	mov	r3, fp
 8008098:	4913      	ldr	r1, [pc, #76]	; (80080e8 <_dtoa_r+0x630>)
 800809a:	2000      	movs	r0, #0
 800809c:	f7f8 f8f4 	bl	8000288 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4640      	mov	r0, r8
 80080a6:	4649      	mov	r1, r9
 80080a8:	f7f8 fd18 	bl	8000adc <__aeabi_dcmplt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f43f af35 	beq.w	8007f1c <_dtoa_r+0x464>
 80080b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080b4:	1e6b      	subs	r3, r5, #1
 80080b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080bc:	2b30      	cmp	r3, #48	; 0x30
 80080be:	d0f8      	beq.n	80080b2 <_dtoa_r+0x5fa>
 80080c0:	9700      	str	r7, [sp, #0]
 80080c2:	e049      	b.n	8008158 <_dtoa_r+0x6a0>
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <_dtoa_r+0x624>)
 80080c6:	f7f8 fa97 	bl	80005f8 <__aeabi_dmul>
 80080ca:	4680      	mov	r8, r0
 80080cc:	4689      	mov	r9, r1
 80080ce:	e7bd      	b.n	800804c <_dtoa_r+0x594>
 80080d0:	08009918 	.word	0x08009918
 80080d4:	080098f0 	.word	0x080098f0
 80080d8:	3ff00000 	.word	0x3ff00000
 80080dc:	40240000 	.word	0x40240000
 80080e0:	401c0000 	.word	0x401c0000
 80080e4:	40140000 	.word	0x40140000
 80080e8:	3fe00000 	.word	0x3fe00000
 80080ec:	9d01      	ldr	r5, [sp, #4]
 80080ee:	4656      	mov	r6, sl
 80080f0:	465f      	mov	r7, fp
 80080f2:	4642      	mov	r2, r8
 80080f4:	464b      	mov	r3, r9
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 fba7 	bl	800084c <__aeabi_ddiv>
 80080fe:	f7f8 fd2b 	bl	8000b58 <__aeabi_d2iz>
 8008102:	4682      	mov	sl, r0
 8008104:	f7f8 fa0e 	bl	8000524 <__aeabi_i2d>
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	f7f8 fa74 	bl	80005f8 <__aeabi_dmul>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	f805 6b01 	strb.w	r6, [r5], #1
 8008124:	9e01      	ldr	r6, [sp, #4]
 8008126:	9f03      	ldr	r7, [sp, #12]
 8008128:	1bae      	subs	r6, r5, r6
 800812a:	42b7      	cmp	r7, r6
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	d135      	bne.n	800819e <_dtoa_r+0x6e6>
 8008132:	f7f8 f8ab 	bl	800028c <__adddf3>
 8008136:	4642      	mov	r2, r8
 8008138:	464b      	mov	r3, r9
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	f7f8 fceb 	bl	8000b18 <__aeabi_dcmpgt>
 8008142:	b9d0      	cbnz	r0, 800817a <_dtoa_r+0x6c2>
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008150:	b110      	cbz	r0, 8008158 <_dtoa_r+0x6a0>
 8008152:	f01a 0f01 	tst.w	sl, #1
 8008156:	d110      	bne.n	800817a <_dtoa_r+0x6c2>
 8008158:	4620      	mov	r0, r4
 800815a:	ee18 1a10 	vmov	r1, s16
 800815e:	f000 fc3d 	bl	80089dc <_Bfree>
 8008162:	2300      	movs	r3, #0
 8008164:	9800      	ldr	r0, [sp, #0]
 8008166:	702b      	strb	r3, [r5, #0]
 8008168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800816a:	3001      	adds	r0, #1
 800816c:	6018      	str	r0, [r3, #0]
 800816e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008170:	2b00      	cmp	r3, #0
 8008172:	f43f acf1 	beq.w	8007b58 <_dtoa_r+0xa0>
 8008176:	601d      	str	r5, [r3, #0]
 8008178:	e4ee      	b.n	8007b58 <_dtoa_r+0xa0>
 800817a:	9f00      	ldr	r7, [sp, #0]
 800817c:	462b      	mov	r3, r5
 800817e:	461d      	mov	r5, r3
 8008180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008184:	2a39      	cmp	r2, #57	; 0x39
 8008186:	d106      	bne.n	8008196 <_dtoa_r+0x6de>
 8008188:	9a01      	ldr	r2, [sp, #4]
 800818a:	429a      	cmp	r2, r3
 800818c:	d1f7      	bne.n	800817e <_dtoa_r+0x6c6>
 800818e:	9901      	ldr	r1, [sp, #4]
 8008190:	2230      	movs	r2, #48	; 0x30
 8008192:	3701      	adds	r7, #1
 8008194:	700a      	strb	r2, [r1, #0]
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	3201      	adds	r2, #1
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e790      	b.n	80080c0 <_dtoa_r+0x608>
 800819e:	4ba6      	ldr	r3, [pc, #664]	; (8008438 <_dtoa_r+0x980>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	f7f8 fa29 	bl	80005f8 <__aeabi_dmul>
 80081a6:	2200      	movs	r2, #0
 80081a8:	2300      	movs	r3, #0
 80081aa:	4606      	mov	r6, r0
 80081ac:	460f      	mov	r7, r1
 80081ae:	f7f8 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d09d      	beq.n	80080f2 <_dtoa_r+0x63a>
 80081b6:	e7cf      	b.n	8008158 <_dtoa_r+0x6a0>
 80081b8:	9a08      	ldr	r2, [sp, #32]
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	f000 80d7 	beq.w	800836e <_dtoa_r+0x8b6>
 80081c0:	9a06      	ldr	r2, [sp, #24]
 80081c2:	2a01      	cmp	r2, #1
 80081c4:	f300 80ba 	bgt.w	800833c <_dtoa_r+0x884>
 80081c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	f000 80b2 	beq.w	8008334 <_dtoa_r+0x87c>
 80081d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081d4:	9e07      	ldr	r6, [sp, #28]
 80081d6:	9d04      	ldr	r5, [sp, #16]
 80081d8:	9a04      	ldr	r2, [sp, #16]
 80081da:	441a      	add	r2, r3
 80081dc:	9204      	str	r2, [sp, #16]
 80081de:	9a05      	ldr	r2, [sp, #20]
 80081e0:	2101      	movs	r1, #1
 80081e2:	441a      	add	r2, r3
 80081e4:	4620      	mov	r0, r4
 80081e6:	9205      	str	r2, [sp, #20]
 80081e8:	f000 fcb0 	bl	8008b4c <__i2b>
 80081ec:	4607      	mov	r7, r0
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	dd0c      	ble.n	800820c <_dtoa_r+0x754>
 80081f2:	9b05      	ldr	r3, [sp, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dd09      	ble.n	800820c <_dtoa_r+0x754>
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	bfa8      	it	ge
 80081fe:	462b      	movge	r3, r5
 8008200:	1ad2      	subs	r2, r2, r3
 8008202:	9204      	str	r2, [sp, #16]
 8008204:	9a05      	ldr	r2, [sp, #20]
 8008206:	1aed      	subs	r5, r5, r3
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	b31b      	cbz	r3, 8008258 <_dtoa_r+0x7a0>
 8008210:	9b08      	ldr	r3, [sp, #32]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80af 	beq.w	8008376 <_dtoa_r+0x8be>
 8008218:	2e00      	cmp	r6, #0
 800821a:	dd13      	ble.n	8008244 <_dtoa_r+0x78c>
 800821c:	4639      	mov	r1, r7
 800821e:	4632      	mov	r2, r6
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fd53 	bl	8008ccc <__pow5mult>
 8008226:	ee18 2a10 	vmov	r2, s16
 800822a:	4601      	mov	r1, r0
 800822c:	4607      	mov	r7, r0
 800822e:	4620      	mov	r0, r4
 8008230:	f000 fca2 	bl	8008b78 <__multiply>
 8008234:	ee18 1a10 	vmov	r1, s16
 8008238:	4680      	mov	r8, r0
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fbce 	bl	80089dc <_Bfree>
 8008240:	ee08 8a10 	vmov	s16, r8
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	1b9a      	subs	r2, r3, r6
 8008248:	d006      	beq.n	8008258 <_dtoa_r+0x7a0>
 800824a:	ee18 1a10 	vmov	r1, s16
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fd3c 	bl	8008ccc <__pow5mult>
 8008254:	ee08 0a10 	vmov	s16, r0
 8008258:	2101      	movs	r1, #1
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fc76 	bl	8008b4c <__i2b>
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	4606      	mov	r6, r0
 8008266:	f340 8088 	ble.w	800837a <_dtoa_r+0x8c2>
 800826a:	461a      	mov	r2, r3
 800826c:	4601      	mov	r1, r0
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fd2c 	bl	8008ccc <__pow5mult>
 8008274:	9b06      	ldr	r3, [sp, #24]
 8008276:	2b01      	cmp	r3, #1
 8008278:	4606      	mov	r6, r0
 800827a:	f340 8081 	ble.w	8008380 <_dtoa_r+0x8c8>
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	6933      	ldr	r3, [r6, #16]
 8008284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008288:	6918      	ldr	r0, [r3, #16]
 800828a:	f000 fc0f 	bl	8008aac <__hi0bits>
 800828e:	f1c0 0020 	rsb	r0, r0, #32
 8008292:	9b05      	ldr	r3, [sp, #20]
 8008294:	4418      	add	r0, r3
 8008296:	f010 001f 	ands.w	r0, r0, #31
 800829a:	f000 8092 	beq.w	80083c2 <_dtoa_r+0x90a>
 800829e:	f1c0 0320 	rsb	r3, r0, #32
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	f340 808a 	ble.w	80083bc <_dtoa_r+0x904>
 80082a8:	f1c0 001c 	rsb	r0, r0, #28
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	4403      	add	r3, r0
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	4403      	add	r3, r0
 80082b6:	4405      	add	r5, r0
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd07      	ble.n	80082d0 <_dtoa_r+0x818>
 80082c0:	ee18 1a10 	vmov	r1, s16
 80082c4:	461a      	mov	r2, r3
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 fd5a 	bl	8008d80 <__lshift>
 80082cc:	ee08 0a10 	vmov	s16, r0
 80082d0:	9b05      	ldr	r3, [sp, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd05      	ble.n	80082e2 <_dtoa_r+0x82a>
 80082d6:	4631      	mov	r1, r6
 80082d8:	461a      	mov	r2, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fd50 	bl	8008d80 <__lshift>
 80082e0:	4606      	mov	r6, r0
 80082e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d06e      	beq.n	80083c6 <_dtoa_r+0x90e>
 80082e8:	ee18 0a10 	vmov	r0, s16
 80082ec:	4631      	mov	r1, r6
 80082ee:	f000 fdb7 	bl	8008e60 <__mcmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	da67      	bge.n	80083c6 <_dtoa_r+0x90e>
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	ee18 1a10 	vmov	r1, s16
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	220a      	movs	r2, #10
 8008302:	2300      	movs	r3, #0
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fb8b 	bl	8008a20 <__multadd>
 800830a:	9b08      	ldr	r3, [sp, #32]
 800830c:	ee08 0a10 	vmov	s16, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 81b1 	beq.w	8008678 <_dtoa_r+0xbc0>
 8008316:	2300      	movs	r3, #0
 8008318:	4639      	mov	r1, r7
 800831a:	220a      	movs	r2, #10
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fb7f 	bl	8008a20 <__multadd>
 8008322:	9b02      	ldr	r3, [sp, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	4607      	mov	r7, r0
 8008328:	f300 808e 	bgt.w	8008448 <_dtoa_r+0x990>
 800832c:	9b06      	ldr	r3, [sp, #24]
 800832e:	2b02      	cmp	r3, #2
 8008330:	dc51      	bgt.n	80083d6 <_dtoa_r+0x91e>
 8008332:	e089      	b.n	8008448 <_dtoa_r+0x990>
 8008334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800833a:	e74b      	b.n	80081d4 <_dtoa_r+0x71c>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1e5e      	subs	r6, r3, #1
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	42b3      	cmp	r3, r6
 8008344:	bfbf      	itttt	lt
 8008346:	9b07      	ldrlt	r3, [sp, #28]
 8008348:	9607      	strlt	r6, [sp, #28]
 800834a:	1af2      	sublt	r2, r6, r3
 800834c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800834e:	bfb6      	itet	lt
 8008350:	189b      	addlt	r3, r3, r2
 8008352:	1b9e      	subge	r6, r3, r6
 8008354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	bfb8      	it	lt
 800835a:	2600      	movlt	r6, #0
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfb7      	itett	lt
 8008360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008368:	1a9d      	sublt	r5, r3, r2
 800836a:	2300      	movlt	r3, #0
 800836c:	e734      	b.n	80081d8 <_dtoa_r+0x720>
 800836e:	9e07      	ldr	r6, [sp, #28]
 8008370:	9d04      	ldr	r5, [sp, #16]
 8008372:	9f08      	ldr	r7, [sp, #32]
 8008374:	e73b      	b.n	80081ee <_dtoa_r+0x736>
 8008376:	9a07      	ldr	r2, [sp, #28]
 8008378:	e767      	b.n	800824a <_dtoa_r+0x792>
 800837a:	9b06      	ldr	r3, [sp, #24]
 800837c:	2b01      	cmp	r3, #1
 800837e:	dc18      	bgt.n	80083b2 <_dtoa_r+0x8fa>
 8008380:	f1ba 0f00 	cmp.w	sl, #0
 8008384:	d115      	bne.n	80083b2 <_dtoa_r+0x8fa>
 8008386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800838a:	b993      	cbnz	r3, 80083b2 <_dtoa_r+0x8fa>
 800838c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008390:	0d1b      	lsrs	r3, r3, #20
 8008392:	051b      	lsls	r3, r3, #20
 8008394:	b183      	cbz	r3, 80083b8 <_dtoa_r+0x900>
 8008396:	9b04      	ldr	r3, [sp, #16]
 8008398:	3301      	adds	r3, #1
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	9b05      	ldr	r3, [sp, #20]
 800839e:	3301      	adds	r3, #1
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	f04f 0801 	mov.w	r8, #1
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f af6a 	bne.w	8008282 <_dtoa_r+0x7ca>
 80083ae:	2001      	movs	r0, #1
 80083b0:	e76f      	b.n	8008292 <_dtoa_r+0x7da>
 80083b2:	f04f 0800 	mov.w	r8, #0
 80083b6:	e7f6      	b.n	80083a6 <_dtoa_r+0x8ee>
 80083b8:	4698      	mov	r8, r3
 80083ba:	e7f4      	b.n	80083a6 <_dtoa_r+0x8ee>
 80083bc:	f43f af7d 	beq.w	80082ba <_dtoa_r+0x802>
 80083c0:	4618      	mov	r0, r3
 80083c2:	301c      	adds	r0, #28
 80083c4:	e772      	b.n	80082ac <_dtoa_r+0x7f4>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dc37      	bgt.n	800843c <_dtoa_r+0x984>
 80083cc:	9b06      	ldr	r3, [sp, #24]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	dd34      	ble.n	800843c <_dtoa_r+0x984>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	9b02      	ldr	r3, [sp, #8]
 80083d8:	b96b      	cbnz	r3, 80083f6 <_dtoa_r+0x93e>
 80083da:	4631      	mov	r1, r6
 80083dc:	2205      	movs	r2, #5
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 fb1e 	bl	8008a20 <__multadd>
 80083e4:	4601      	mov	r1, r0
 80083e6:	4606      	mov	r6, r0
 80083e8:	ee18 0a10 	vmov	r0, s16
 80083ec:	f000 fd38 	bl	8008e60 <__mcmp>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f73f adbb 	bgt.w	8007f6c <_dtoa_r+0x4b4>
 80083f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f8:	9d01      	ldr	r5, [sp, #4]
 80083fa:	43db      	mvns	r3, r3
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	f04f 0800 	mov.w	r8, #0
 8008402:	4631      	mov	r1, r6
 8008404:	4620      	mov	r0, r4
 8008406:	f000 fae9 	bl	80089dc <_Bfree>
 800840a:	2f00      	cmp	r7, #0
 800840c:	f43f aea4 	beq.w	8008158 <_dtoa_r+0x6a0>
 8008410:	f1b8 0f00 	cmp.w	r8, #0
 8008414:	d005      	beq.n	8008422 <_dtoa_r+0x96a>
 8008416:	45b8      	cmp	r8, r7
 8008418:	d003      	beq.n	8008422 <_dtoa_r+0x96a>
 800841a:	4641      	mov	r1, r8
 800841c:	4620      	mov	r0, r4
 800841e:	f000 fadd 	bl	80089dc <_Bfree>
 8008422:	4639      	mov	r1, r7
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fad9 	bl	80089dc <_Bfree>
 800842a:	e695      	b.n	8008158 <_dtoa_r+0x6a0>
 800842c:	2600      	movs	r6, #0
 800842e:	4637      	mov	r7, r6
 8008430:	e7e1      	b.n	80083f6 <_dtoa_r+0x93e>
 8008432:	9700      	str	r7, [sp, #0]
 8008434:	4637      	mov	r7, r6
 8008436:	e599      	b.n	8007f6c <_dtoa_r+0x4b4>
 8008438:	40240000 	.word	0x40240000
 800843c:	9b08      	ldr	r3, [sp, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 80ca 	beq.w	80085d8 <_dtoa_r+0xb20>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	9302      	str	r3, [sp, #8]
 8008448:	2d00      	cmp	r5, #0
 800844a:	dd05      	ble.n	8008458 <_dtoa_r+0x9a0>
 800844c:	4639      	mov	r1, r7
 800844e:	462a      	mov	r2, r5
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fc95 	bl	8008d80 <__lshift>
 8008456:	4607      	mov	r7, r0
 8008458:	f1b8 0f00 	cmp.w	r8, #0
 800845c:	d05b      	beq.n	8008516 <_dtoa_r+0xa5e>
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4620      	mov	r0, r4
 8008462:	f000 fa7b 	bl	800895c <_Balloc>
 8008466:	4605      	mov	r5, r0
 8008468:	b928      	cbnz	r0, 8008476 <_dtoa_r+0x9be>
 800846a:	4b87      	ldr	r3, [pc, #540]	; (8008688 <_dtoa_r+0xbd0>)
 800846c:	4602      	mov	r2, r0
 800846e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008472:	f7ff bb3b 	b.w	8007aec <_dtoa_r+0x34>
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	3202      	adds	r2, #2
 800847a:	0092      	lsls	r2, r2, #2
 800847c:	f107 010c 	add.w	r1, r7, #12
 8008480:	300c      	adds	r0, #12
 8008482:	f7fe faee 	bl	8006a62 <memcpy>
 8008486:	2201      	movs	r2, #1
 8008488:	4629      	mov	r1, r5
 800848a:	4620      	mov	r0, r4
 800848c:	f000 fc78 	bl	8008d80 <__lshift>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	f103 0901 	add.w	r9, r3, #1
 8008496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800849a:	4413      	add	r3, r2
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	f00a 0301 	and.w	r3, sl, #1
 80084a2:	46b8      	mov	r8, r7
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	4607      	mov	r7, r0
 80084a8:	4631      	mov	r1, r6
 80084aa:	ee18 0a10 	vmov	r0, s16
 80084ae:	f7ff fa77 	bl	80079a0 <quorem>
 80084b2:	4641      	mov	r1, r8
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084ba:	ee18 0a10 	vmov	r0, s16
 80084be:	f000 fccf 	bl	8008e60 <__mcmp>
 80084c2:	463a      	mov	r2, r7
 80084c4:	9003      	str	r0, [sp, #12]
 80084c6:	4631      	mov	r1, r6
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fce5 	bl	8008e98 <__mdiff>
 80084ce:	68c2      	ldr	r2, [r0, #12]
 80084d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80084d4:	4605      	mov	r5, r0
 80084d6:	bb02      	cbnz	r2, 800851a <_dtoa_r+0xa62>
 80084d8:	4601      	mov	r1, r0
 80084da:	ee18 0a10 	vmov	r0, s16
 80084de:	f000 fcbf 	bl	8008e60 <__mcmp>
 80084e2:	4602      	mov	r2, r0
 80084e4:	4629      	mov	r1, r5
 80084e6:	4620      	mov	r0, r4
 80084e8:	9207      	str	r2, [sp, #28]
 80084ea:	f000 fa77 	bl	80089dc <_Bfree>
 80084ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80084f2:	ea43 0102 	orr.w	r1, r3, r2
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	430b      	orrs	r3, r1
 80084fa:	464d      	mov	r5, r9
 80084fc:	d10f      	bne.n	800851e <_dtoa_r+0xa66>
 80084fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008502:	d02a      	beq.n	800855a <_dtoa_r+0xaa2>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd02      	ble.n	8008510 <_dtoa_r+0xa58>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008510:	f88b a000 	strb.w	sl, [fp]
 8008514:	e775      	b.n	8008402 <_dtoa_r+0x94a>
 8008516:	4638      	mov	r0, r7
 8008518:	e7ba      	b.n	8008490 <_dtoa_r+0x9d8>
 800851a:	2201      	movs	r2, #1
 800851c:	e7e2      	b.n	80084e4 <_dtoa_r+0xa2c>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	db04      	blt.n	800852e <_dtoa_r+0xa76>
 8008524:	9906      	ldr	r1, [sp, #24]
 8008526:	430b      	orrs	r3, r1
 8008528:	9904      	ldr	r1, [sp, #16]
 800852a:	430b      	orrs	r3, r1
 800852c:	d122      	bne.n	8008574 <_dtoa_r+0xabc>
 800852e:	2a00      	cmp	r2, #0
 8008530:	ddee      	ble.n	8008510 <_dtoa_r+0xa58>
 8008532:	ee18 1a10 	vmov	r1, s16
 8008536:	2201      	movs	r2, #1
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fc21 	bl	8008d80 <__lshift>
 800853e:	4631      	mov	r1, r6
 8008540:	ee08 0a10 	vmov	s16, r0
 8008544:	f000 fc8c 	bl	8008e60 <__mcmp>
 8008548:	2800      	cmp	r0, #0
 800854a:	dc03      	bgt.n	8008554 <_dtoa_r+0xa9c>
 800854c:	d1e0      	bne.n	8008510 <_dtoa_r+0xa58>
 800854e:	f01a 0f01 	tst.w	sl, #1
 8008552:	d0dd      	beq.n	8008510 <_dtoa_r+0xa58>
 8008554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008558:	d1d7      	bne.n	800850a <_dtoa_r+0xa52>
 800855a:	2339      	movs	r3, #57	; 0x39
 800855c:	f88b 3000 	strb.w	r3, [fp]
 8008560:	462b      	mov	r3, r5
 8008562:	461d      	mov	r5, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800856a:	2a39      	cmp	r2, #57	; 0x39
 800856c:	d071      	beq.n	8008652 <_dtoa_r+0xb9a>
 800856e:	3201      	adds	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e746      	b.n	8008402 <_dtoa_r+0x94a>
 8008574:	2a00      	cmp	r2, #0
 8008576:	dd07      	ble.n	8008588 <_dtoa_r+0xad0>
 8008578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800857c:	d0ed      	beq.n	800855a <_dtoa_r+0xaa2>
 800857e:	f10a 0301 	add.w	r3, sl, #1
 8008582:	f88b 3000 	strb.w	r3, [fp]
 8008586:	e73c      	b.n	8008402 <_dtoa_r+0x94a>
 8008588:	9b05      	ldr	r3, [sp, #20]
 800858a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800858e:	4599      	cmp	r9, r3
 8008590:	d047      	beq.n	8008622 <_dtoa_r+0xb6a>
 8008592:	ee18 1a10 	vmov	r1, s16
 8008596:	2300      	movs	r3, #0
 8008598:	220a      	movs	r2, #10
 800859a:	4620      	mov	r0, r4
 800859c:	f000 fa40 	bl	8008a20 <__multadd>
 80085a0:	45b8      	cmp	r8, r7
 80085a2:	ee08 0a10 	vmov	s16, r0
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	f04f 020a 	mov.w	r2, #10
 80085ae:	4641      	mov	r1, r8
 80085b0:	4620      	mov	r0, r4
 80085b2:	d106      	bne.n	80085c2 <_dtoa_r+0xb0a>
 80085b4:	f000 fa34 	bl	8008a20 <__multadd>
 80085b8:	4680      	mov	r8, r0
 80085ba:	4607      	mov	r7, r0
 80085bc:	f109 0901 	add.w	r9, r9, #1
 80085c0:	e772      	b.n	80084a8 <_dtoa_r+0x9f0>
 80085c2:	f000 fa2d 	bl	8008a20 <__multadd>
 80085c6:	4639      	mov	r1, r7
 80085c8:	4680      	mov	r8, r0
 80085ca:	2300      	movs	r3, #0
 80085cc:	220a      	movs	r2, #10
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fa26 	bl	8008a20 <__multadd>
 80085d4:	4607      	mov	r7, r0
 80085d6:	e7f1      	b.n	80085bc <_dtoa_r+0xb04>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	9302      	str	r3, [sp, #8]
 80085dc:	9d01      	ldr	r5, [sp, #4]
 80085de:	ee18 0a10 	vmov	r0, s16
 80085e2:	4631      	mov	r1, r6
 80085e4:	f7ff f9dc 	bl	80079a0 <quorem>
 80085e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	f805 ab01 	strb.w	sl, [r5], #1
 80085f2:	1aea      	subs	r2, r5, r3
 80085f4:	9b02      	ldr	r3, [sp, #8]
 80085f6:	4293      	cmp	r3, r2
 80085f8:	dd09      	ble.n	800860e <_dtoa_r+0xb56>
 80085fa:	ee18 1a10 	vmov	r1, s16
 80085fe:	2300      	movs	r3, #0
 8008600:	220a      	movs	r2, #10
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fa0c 	bl	8008a20 <__multadd>
 8008608:	ee08 0a10 	vmov	s16, r0
 800860c:	e7e7      	b.n	80085de <_dtoa_r+0xb26>
 800860e:	9b02      	ldr	r3, [sp, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	bfc8      	it	gt
 8008614:	461d      	movgt	r5, r3
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	bfd8      	it	le
 800861a:	2501      	movle	r5, #1
 800861c:	441d      	add	r5, r3
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	ee18 1a10 	vmov	r1, s16
 8008626:	2201      	movs	r2, #1
 8008628:	4620      	mov	r0, r4
 800862a:	f000 fba9 	bl	8008d80 <__lshift>
 800862e:	4631      	mov	r1, r6
 8008630:	ee08 0a10 	vmov	s16, r0
 8008634:	f000 fc14 	bl	8008e60 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	dc91      	bgt.n	8008560 <_dtoa_r+0xaa8>
 800863c:	d102      	bne.n	8008644 <_dtoa_r+0xb8c>
 800863e:	f01a 0f01 	tst.w	sl, #1
 8008642:	d18d      	bne.n	8008560 <_dtoa_r+0xaa8>
 8008644:	462b      	mov	r3, r5
 8008646:	461d      	mov	r5, r3
 8008648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800864c:	2a30      	cmp	r2, #48	; 0x30
 800864e:	d0fa      	beq.n	8008646 <_dtoa_r+0xb8e>
 8008650:	e6d7      	b.n	8008402 <_dtoa_r+0x94a>
 8008652:	9a01      	ldr	r2, [sp, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d184      	bne.n	8008562 <_dtoa_r+0xaaa>
 8008658:	9b00      	ldr	r3, [sp, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2331      	movs	r3, #49	; 0x31
 8008660:	7013      	strb	r3, [r2, #0]
 8008662:	e6ce      	b.n	8008402 <_dtoa_r+0x94a>
 8008664:	4b09      	ldr	r3, [pc, #36]	; (800868c <_dtoa_r+0xbd4>)
 8008666:	f7ff ba95 	b.w	8007b94 <_dtoa_r+0xdc>
 800866a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800866c:	2b00      	cmp	r3, #0
 800866e:	f47f aa6e 	bne.w	8007b4e <_dtoa_r+0x96>
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <_dtoa_r+0xbd8>)
 8008674:	f7ff ba8e 	b.w	8007b94 <_dtoa_r+0xdc>
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	dcae      	bgt.n	80085dc <_dtoa_r+0xb24>
 800867e:	9b06      	ldr	r3, [sp, #24]
 8008680:	2b02      	cmp	r3, #2
 8008682:	f73f aea8 	bgt.w	80083d6 <_dtoa_r+0x91e>
 8008686:	e7a9      	b.n	80085dc <_dtoa_r+0xb24>
 8008688:	08009882 	.word	0x08009882
 800868c:	08009748 	.word	0x08009748
 8008690:	0800981a 	.word	0x0800981a

08008694 <__sflush_r>:
 8008694:	898a      	ldrh	r2, [r1, #12]
 8008696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869a:	4605      	mov	r5, r0
 800869c:	0710      	lsls	r0, r2, #28
 800869e:	460c      	mov	r4, r1
 80086a0:	d458      	bmi.n	8008754 <__sflush_r+0xc0>
 80086a2:	684b      	ldr	r3, [r1, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dc05      	bgt.n	80086b4 <__sflush_r+0x20>
 80086a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	dc02      	bgt.n	80086b4 <__sflush_r+0x20>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	d0f9      	beq.n	80086ae <__sflush_r+0x1a>
 80086ba:	2300      	movs	r3, #0
 80086bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086c0:	682f      	ldr	r7, [r5, #0]
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	d032      	beq.n	800872c <__sflush_r+0x98>
 80086c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	075a      	lsls	r2, r3, #29
 80086cc:	d505      	bpl.n	80086da <__sflush_r+0x46>
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	1ac0      	subs	r0, r0, r3
 80086d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086d4:	b10b      	cbz	r3, 80086da <__sflush_r+0x46>
 80086d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086d8:	1ac0      	subs	r0, r0, r3
 80086da:	2300      	movs	r3, #0
 80086dc:	4602      	mov	r2, r0
 80086de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086e0:	6a21      	ldr	r1, [r4, #32]
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b0      	blx	r6
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	d106      	bne.n	80086fa <__sflush_r+0x66>
 80086ec:	6829      	ldr	r1, [r5, #0]
 80086ee:	291d      	cmp	r1, #29
 80086f0:	d82c      	bhi.n	800874c <__sflush_r+0xb8>
 80086f2:	4a2a      	ldr	r2, [pc, #168]	; (800879c <__sflush_r+0x108>)
 80086f4:	40ca      	lsrs	r2, r1
 80086f6:	07d6      	lsls	r6, r2, #31
 80086f8:	d528      	bpl.n	800874c <__sflush_r+0xb8>
 80086fa:	2200      	movs	r2, #0
 80086fc:	6062      	str	r2, [r4, #4]
 80086fe:	04d9      	lsls	r1, r3, #19
 8008700:	6922      	ldr	r2, [r4, #16]
 8008702:	6022      	str	r2, [r4, #0]
 8008704:	d504      	bpl.n	8008710 <__sflush_r+0x7c>
 8008706:	1c42      	adds	r2, r0, #1
 8008708:	d101      	bne.n	800870e <__sflush_r+0x7a>
 800870a:	682b      	ldr	r3, [r5, #0]
 800870c:	b903      	cbnz	r3, 8008710 <__sflush_r+0x7c>
 800870e:	6560      	str	r0, [r4, #84]	; 0x54
 8008710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008712:	602f      	str	r7, [r5, #0]
 8008714:	2900      	cmp	r1, #0
 8008716:	d0ca      	beq.n	80086ae <__sflush_r+0x1a>
 8008718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <__sflush_r+0x92>
 8008720:	4628      	mov	r0, r5
 8008722:	f000 fcb5 	bl	8009090 <_free_r>
 8008726:	2000      	movs	r0, #0
 8008728:	6360      	str	r0, [r4, #52]	; 0x34
 800872a:	e7c1      	b.n	80086b0 <__sflush_r+0x1c>
 800872c:	6a21      	ldr	r1, [r4, #32]
 800872e:	2301      	movs	r3, #1
 8008730:	4628      	mov	r0, r5
 8008732:	47b0      	blx	r6
 8008734:	1c41      	adds	r1, r0, #1
 8008736:	d1c7      	bne.n	80086c8 <__sflush_r+0x34>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0c4      	beq.n	80086c8 <__sflush_r+0x34>
 800873e:	2b1d      	cmp	r3, #29
 8008740:	d001      	beq.n	8008746 <__sflush_r+0xb2>
 8008742:	2b16      	cmp	r3, #22
 8008744:	d101      	bne.n	800874a <__sflush_r+0xb6>
 8008746:	602f      	str	r7, [r5, #0]
 8008748:	e7b1      	b.n	80086ae <__sflush_r+0x1a>
 800874a:	89a3      	ldrh	r3, [r4, #12]
 800874c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	e7ad      	b.n	80086b0 <__sflush_r+0x1c>
 8008754:	690f      	ldr	r7, [r1, #16]
 8008756:	2f00      	cmp	r7, #0
 8008758:	d0a9      	beq.n	80086ae <__sflush_r+0x1a>
 800875a:	0793      	lsls	r3, r2, #30
 800875c:	680e      	ldr	r6, [r1, #0]
 800875e:	bf08      	it	eq
 8008760:	694b      	ldreq	r3, [r1, #20]
 8008762:	600f      	str	r7, [r1, #0]
 8008764:	bf18      	it	ne
 8008766:	2300      	movne	r3, #0
 8008768:	eba6 0807 	sub.w	r8, r6, r7
 800876c:	608b      	str	r3, [r1, #8]
 800876e:	f1b8 0f00 	cmp.w	r8, #0
 8008772:	dd9c      	ble.n	80086ae <__sflush_r+0x1a>
 8008774:	6a21      	ldr	r1, [r4, #32]
 8008776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008778:	4643      	mov	r3, r8
 800877a:	463a      	mov	r2, r7
 800877c:	4628      	mov	r0, r5
 800877e:	47b0      	blx	r6
 8008780:	2800      	cmp	r0, #0
 8008782:	dc06      	bgt.n	8008792 <__sflush_r+0xfe>
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008790:	e78e      	b.n	80086b0 <__sflush_r+0x1c>
 8008792:	4407      	add	r7, r0
 8008794:	eba8 0800 	sub.w	r8, r8, r0
 8008798:	e7e9      	b.n	800876e <__sflush_r+0xda>
 800879a:	bf00      	nop
 800879c:	20400001 	.word	0x20400001

080087a0 <_fflush_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	690b      	ldr	r3, [r1, #16]
 80087a4:	4605      	mov	r5, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	b913      	cbnz	r3, 80087b0 <_fflush_r+0x10>
 80087aa:	2500      	movs	r5, #0
 80087ac:	4628      	mov	r0, r5
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	b118      	cbz	r0, 80087ba <_fflush_r+0x1a>
 80087b2:	6983      	ldr	r3, [r0, #24]
 80087b4:	b90b      	cbnz	r3, 80087ba <_fflush_r+0x1a>
 80087b6:	f7fe f88f 	bl	80068d8 <__sinit>
 80087ba:	4b14      	ldr	r3, [pc, #80]	; (800880c <_fflush_r+0x6c>)
 80087bc:	429c      	cmp	r4, r3
 80087be:	d11b      	bne.n	80087f8 <_fflush_r+0x58>
 80087c0:	686c      	ldr	r4, [r5, #4]
 80087c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0ef      	beq.n	80087aa <_fflush_r+0xa>
 80087ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087cc:	07d0      	lsls	r0, r2, #31
 80087ce:	d404      	bmi.n	80087da <_fflush_r+0x3a>
 80087d0:	0599      	lsls	r1, r3, #22
 80087d2:	d402      	bmi.n	80087da <_fflush_r+0x3a>
 80087d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087d6:	f7fe f942 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80087da:	4628      	mov	r0, r5
 80087dc:	4621      	mov	r1, r4
 80087de:	f7ff ff59 	bl	8008694 <__sflush_r>
 80087e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087e4:	07da      	lsls	r2, r3, #31
 80087e6:	4605      	mov	r5, r0
 80087e8:	d4e0      	bmi.n	80087ac <_fflush_r+0xc>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	059b      	lsls	r3, r3, #22
 80087ee:	d4dd      	bmi.n	80087ac <_fflush_r+0xc>
 80087f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087f2:	f7fe f935 	bl	8006a60 <__retarget_lock_release_recursive>
 80087f6:	e7d9      	b.n	80087ac <_fflush_r+0xc>
 80087f8:	4b05      	ldr	r3, [pc, #20]	; (8008810 <_fflush_r+0x70>)
 80087fa:	429c      	cmp	r4, r3
 80087fc:	d101      	bne.n	8008802 <_fflush_r+0x62>
 80087fe:	68ac      	ldr	r4, [r5, #8]
 8008800:	e7df      	b.n	80087c2 <_fflush_r+0x22>
 8008802:	4b04      	ldr	r3, [pc, #16]	; (8008814 <_fflush_r+0x74>)
 8008804:	429c      	cmp	r4, r3
 8008806:	bf08      	it	eq
 8008808:	68ec      	ldreq	r4, [r5, #12]
 800880a:	e7da      	b.n	80087c2 <_fflush_r+0x22>
 800880c:	080096f4 	.word	0x080096f4
 8008810:	08009714 	.word	0x08009714
 8008814:	080096d4 	.word	0x080096d4

08008818 <fiprintf>:
 8008818:	b40e      	push	{r1, r2, r3}
 800881a:	b503      	push	{r0, r1, lr}
 800881c:	4601      	mov	r1, r0
 800881e:	ab03      	add	r3, sp, #12
 8008820:	4805      	ldr	r0, [pc, #20]	; (8008838 <fiprintf+0x20>)
 8008822:	f853 2b04 	ldr.w	r2, [r3], #4
 8008826:	6800      	ldr	r0, [r0, #0]
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	f000 fca7 	bl	800917c <_vfiprintf_r>
 800882e:	b002      	add	sp, #8
 8008830:	f85d eb04 	ldr.w	lr, [sp], #4
 8008834:	b003      	add	sp, #12
 8008836:	4770      	bx	lr
 8008838:	20000010 	.word	0x20000010

0800883c <_localeconv_r>:
 800883c:	4800      	ldr	r0, [pc, #0]	; (8008840 <_localeconv_r+0x4>)
 800883e:	4770      	bx	lr
 8008840:	20000164 	.word	0x20000164

08008844 <_lseek_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d07      	ldr	r5, [pc, #28]	; (8008864 <_lseek_r+0x20>)
 8008848:	4604      	mov	r4, r0
 800884a:	4608      	mov	r0, r1
 800884c:	4611      	mov	r1, r2
 800884e:	2200      	movs	r2, #0
 8008850:	602a      	str	r2, [r5, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	f7f8 fd90 	bl	8001378 <_lseek>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_lseek_r+0x1e>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_lseek_r+0x1e>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20001cf4 	.word	0x20001cf4

08008868 <__swhatbuf_r>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	460e      	mov	r6, r1
 800886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008870:	2900      	cmp	r1, #0
 8008872:	b096      	sub	sp, #88	; 0x58
 8008874:	4614      	mov	r4, r2
 8008876:	461d      	mov	r5, r3
 8008878:	da08      	bge.n	800888c <__swhatbuf_r+0x24>
 800887a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	602a      	str	r2, [r5, #0]
 8008882:	061a      	lsls	r2, r3, #24
 8008884:	d410      	bmi.n	80088a8 <__swhatbuf_r+0x40>
 8008886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888a:	e00e      	b.n	80088aa <__swhatbuf_r+0x42>
 800888c:	466a      	mov	r2, sp
 800888e:	f000 fdbf 	bl	8009410 <_fstat_r>
 8008892:	2800      	cmp	r0, #0
 8008894:	dbf1      	blt.n	800887a <__swhatbuf_r+0x12>
 8008896:	9a01      	ldr	r2, [sp, #4]
 8008898:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800889c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088a0:	425a      	negs	r2, r3
 80088a2:	415a      	adcs	r2, r3
 80088a4:	602a      	str	r2, [r5, #0]
 80088a6:	e7ee      	b.n	8008886 <__swhatbuf_r+0x1e>
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	2000      	movs	r0, #0
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	b016      	add	sp, #88	; 0x58
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080088b4 <__smakebuf_r>:
 80088b4:	898b      	ldrh	r3, [r1, #12]
 80088b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088b8:	079d      	lsls	r5, r3, #30
 80088ba:	4606      	mov	r6, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	d507      	bpl.n	80088d0 <__smakebuf_r+0x1c>
 80088c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	2301      	movs	r3, #1
 80088ca:	6163      	str	r3, [r4, #20]
 80088cc:	b002      	add	sp, #8
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	ab01      	add	r3, sp, #4
 80088d2:	466a      	mov	r2, sp
 80088d4:	f7ff ffc8 	bl	8008868 <__swhatbuf_r>
 80088d8:	9900      	ldr	r1, [sp, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	4630      	mov	r0, r6
 80088de:	f7fe f8f7 	bl	8006ad0 <_malloc_r>
 80088e2:	b948      	cbnz	r0, 80088f8 <__smakebuf_r+0x44>
 80088e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e8:	059a      	lsls	r2, r3, #22
 80088ea:	d4ef      	bmi.n	80088cc <__smakebuf_r+0x18>
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	f043 0302 	orr.w	r3, r3, #2
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	e7e3      	b.n	80088c0 <__smakebuf_r+0xc>
 80088f8:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <__smakebuf_r+0x7c>)
 80088fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	6020      	str	r0, [r4, #0]
 8008900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	9b00      	ldr	r3, [sp, #0]
 8008908:	6163      	str	r3, [r4, #20]
 800890a:	9b01      	ldr	r3, [sp, #4]
 800890c:	6120      	str	r0, [r4, #16]
 800890e:	b15b      	cbz	r3, 8008928 <__smakebuf_r+0x74>
 8008910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008914:	4630      	mov	r0, r6
 8008916:	f000 fd8d 	bl	8009434 <_isatty_r>
 800891a:	b128      	cbz	r0, 8008928 <__smakebuf_r+0x74>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	89a0      	ldrh	r0, [r4, #12]
 800892a:	4305      	orrs	r5, r0
 800892c:	81a5      	strh	r5, [r4, #12]
 800892e:	e7cd      	b.n	80088cc <__smakebuf_r+0x18>
 8008930:	08006871 	.word	0x08006871

08008934 <malloc>:
 8008934:	4b02      	ldr	r3, [pc, #8]	; (8008940 <malloc+0xc>)
 8008936:	4601      	mov	r1, r0
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f7fe b8c9 	b.w	8006ad0 <_malloc_r>
 800893e:	bf00      	nop
 8008940:	20000010 	.word	0x20000010

08008944 <__malloc_lock>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__malloc_lock+0x8>)
 8008946:	f7fe b88a 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	20001ce8 	.word	0x20001ce8

08008950 <__malloc_unlock>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__malloc_unlock+0x8>)
 8008952:	f7fe b885 	b.w	8006a60 <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	20001ce8 	.word	0x20001ce8

0800895c <_Balloc>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	b976      	cbnz	r6, 8008984 <_Balloc+0x28>
 8008966:	2010      	movs	r0, #16
 8008968:	f7ff ffe4 	bl	8008934 <malloc>
 800896c:	4602      	mov	r2, r0
 800896e:	6260      	str	r0, [r4, #36]	; 0x24
 8008970:	b920      	cbnz	r0, 800897c <_Balloc+0x20>
 8008972:	4b18      	ldr	r3, [pc, #96]	; (80089d4 <_Balloc+0x78>)
 8008974:	4818      	ldr	r0, [pc, #96]	; (80089d8 <_Balloc+0x7c>)
 8008976:	2166      	movs	r1, #102	; 0x66
 8008978:	f7fe ffe4 	bl	8007944 <__assert_func>
 800897c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008980:	6006      	str	r6, [r0, #0]
 8008982:	60c6      	str	r6, [r0, #12]
 8008984:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008986:	68f3      	ldr	r3, [r6, #12]
 8008988:	b183      	cbz	r3, 80089ac <_Balloc+0x50>
 800898a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008992:	b9b8      	cbnz	r0, 80089c4 <_Balloc+0x68>
 8008994:	2101      	movs	r1, #1
 8008996:	fa01 f605 	lsl.w	r6, r1, r5
 800899a:	1d72      	adds	r2, r6, #5
 800899c:	0092      	lsls	r2, r2, #2
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fb60 	bl	8009064 <_calloc_r>
 80089a4:	b160      	cbz	r0, 80089c0 <_Balloc+0x64>
 80089a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089aa:	e00e      	b.n	80089ca <_Balloc+0x6e>
 80089ac:	2221      	movs	r2, #33	; 0x21
 80089ae:	2104      	movs	r1, #4
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fb57 	bl	8009064 <_calloc_r>
 80089b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b8:	60f0      	str	r0, [r6, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e4      	bne.n	800898a <_Balloc+0x2e>
 80089c0:	2000      	movs	r0, #0
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	6802      	ldr	r2, [r0, #0]
 80089c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ca:	2300      	movs	r3, #0
 80089cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d0:	e7f7      	b.n	80089c2 <_Balloc+0x66>
 80089d2:	bf00      	nop
 80089d4:	0800976c 	.word	0x0800976c
 80089d8:	08009893 	.word	0x08009893

080089dc <_Bfree>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e0:	4605      	mov	r5, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	b976      	cbnz	r6, 8008a04 <_Bfree+0x28>
 80089e6:	2010      	movs	r0, #16
 80089e8:	f7ff ffa4 	bl	8008934 <malloc>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6268      	str	r0, [r5, #36]	; 0x24
 80089f0:	b920      	cbnz	r0, 80089fc <_Bfree+0x20>
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <_Bfree+0x3c>)
 80089f4:	4809      	ldr	r0, [pc, #36]	; (8008a1c <_Bfree+0x40>)
 80089f6:	218a      	movs	r1, #138	; 0x8a
 80089f8:	f7fe ffa4 	bl	8007944 <__assert_func>
 80089fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a00:	6006      	str	r6, [r0, #0]
 8008a02:	60c6      	str	r6, [r0, #12]
 8008a04:	b13c      	cbz	r4, 8008a16 <_Bfree+0x3a>
 8008a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a08:	6862      	ldr	r2, [r4, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a10:	6021      	str	r1, [r4, #0]
 8008a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	0800976c 	.word	0x0800976c
 8008a1c:	08009893 	.word	0x08009893

08008a20 <__multadd>:
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a24:	690d      	ldr	r5, [r1, #16]
 8008a26:	4607      	mov	r7, r0
 8008a28:	460c      	mov	r4, r1
 8008a2a:	461e      	mov	r6, r3
 8008a2c:	f101 0c14 	add.w	ip, r1, #20
 8008a30:	2000      	movs	r0, #0
 8008a32:	f8dc 3000 	ldr.w	r3, [ip]
 8008a36:	b299      	uxth	r1, r3
 8008a38:	fb02 6101 	mla	r1, r2, r1, r6
 8008a3c:	0c1e      	lsrs	r6, r3, #16
 8008a3e:	0c0b      	lsrs	r3, r1, #16
 8008a40:	fb02 3306 	mla	r3, r2, r6, r3
 8008a44:	b289      	uxth	r1, r1
 8008a46:	3001      	adds	r0, #1
 8008a48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a4c:	4285      	cmp	r5, r0
 8008a4e:	f84c 1b04 	str.w	r1, [ip], #4
 8008a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a56:	dcec      	bgt.n	8008a32 <__multadd+0x12>
 8008a58:	b30e      	cbz	r6, 8008a9e <__multadd+0x7e>
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	42ab      	cmp	r3, r5
 8008a5e:	dc19      	bgt.n	8008a94 <__multadd+0x74>
 8008a60:	6861      	ldr	r1, [r4, #4]
 8008a62:	4638      	mov	r0, r7
 8008a64:	3101      	adds	r1, #1
 8008a66:	f7ff ff79 	bl	800895c <_Balloc>
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	b928      	cbnz	r0, 8008a7a <__multadd+0x5a>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <__multadd+0x84>)
 8008a72:	480d      	ldr	r0, [pc, #52]	; (8008aa8 <__multadd+0x88>)
 8008a74:	21b5      	movs	r1, #181	; 0xb5
 8008a76:	f7fe ff65 	bl	8007944 <__assert_func>
 8008a7a:	6922      	ldr	r2, [r4, #16]
 8008a7c:	3202      	adds	r2, #2
 8008a7e:	f104 010c 	add.w	r1, r4, #12
 8008a82:	0092      	lsls	r2, r2, #2
 8008a84:	300c      	adds	r0, #12
 8008a86:	f7fd ffec 	bl	8006a62 <memcpy>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff ffa5 	bl	80089dc <_Bfree>
 8008a92:	4644      	mov	r4, r8
 8008a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a98:	3501      	adds	r5, #1
 8008a9a:	615e      	str	r6, [r3, #20]
 8008a9c:	6125      	str	r5, [r4, #16]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	08009882 	.word	0x08009882
 8008aa8:	08009893 	.word	0x08009893

08008aac <__hi0bits>:
 8008aac:	0c03      	lsrs	r3, r0, #16
 8008aae:	041b      	lsls	r3, r3, #16
 8008ab0:	b9d3      	cbnz	r3, 8008ae8 <__hi0bits+0x3c>
 8008ab2:	0400      	lsls	r0, r0, #16
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008aba:	bf04      	itt	eq
 8008abc:	0200      	lsleq	r0, r0, #8
 8008abe:	3308      	addeq	r3, #8
 8008ac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ac4:	bf04      	itt	eq
 8008ac6:	0100      	lsleq	r0, r0, #4
 8008ac8:	3304      	addeq	r3, #4
 8008aca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ace:	bf04      	itt	eq
 8008ad0:	0080      	lsleq	r0, r0, #2
 8008ad2:	3302      	addeq	r3, #2
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	db05      	blt.n	8008ae4 <__hi0bits+0x38>
 8008ad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008adc:	f103 0301 	add.w	r3, r3, #1
 8008ae0:	bf08      	it	eq
 8008ae2:	2320      	moveq	r3, #32
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	4770      	bx	lr
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e7e4      	b.n	8008ab6 <__hi0bits+0xa>

08008aec <__lo0bits>:
 8008aec:	6803      	ldr	r3, [r0, #0]
 8008aee:	f013 0207 	ands.w	r2, r3, #7
 8008af2:	4601      	mov	r1, r0
 8008af4:	d00b      	beq.n	8008b0e <__lo0bits+0x22>
 8008af6:	07da      	lsls	r2, r3, #31
 8008af8:	d423      	bmi.n	8008b42 <__lo0bits+0x56>
 8008afa:	0798      	lsls	r0, r3, #30
 8008afc:	bf49      	itett	mi
 8008afe:	085b      	lsrmi	r3, r3, #1
 8008b00:	089b      	lsrpl	r3, r3, #2
 8008b02:	2001      	movmi	r0, #1
 8008b04:	600b      	strmi	r3, [r1, #0]
 8008b06:	bf5c      	itt	pl
 8008b08:	600b      	strpl	r3, [r1, #0]
 8008b0a:	2002      	movpl	r0, #2
 8008b0c:	4770      	bx	lr
 8008b0e:	b298      	uxth	r0, r3
 8008b10:	b9a8      	cbnz	r0, 8008b3e <__lo0bits+0x52>
 8008b12:	0c1b      	lsrs	r3, r3, #16
 8008b14:	2010      	movs	r0, #16
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	b90a      	cbnz	r2, 8008b1e <__lo0bits+0x32>
 8008b1a:	3008      	adds	r0, #8
 8008b1c:	0a1b      	lsrs	r3, r3, #8
 8008b1e:	071a      	lsls	r2, r3, #28
 8008b20:	bf04      	itt	eq
 8008b22:	091b      	lsreq	r3, r3, #4
 8008b24:	3004      	addeq	r0, #4
 8008b26:	079a      	lsls	r2, r3, #30
 8008b28:	bf04      	itt	eq
 8008b2a:	089b      	lsreq	r3, r3, #2
 8008b2c:	3002      	addeq	r0, #2
 8008b2e:	07da      	lsls	r2, r3, #31
 8008b30:	d403      	bmi.n	8008b3a <__lo0bits+0x4e>
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	f100 0001 	add.w	r0, r0, #1
 8008b38:	d005      	beq.n	8008b46 <__lo0bits+0x5a>
 8008b3a:	600b      	str	r3, [r1, #0]
 8008b3c:	4770      	bx	lr
 8008b3e:	4610      	mov	r0, r2
 8008b40:	e7e9      	b.n	8008b16 <__lo0bits+0x2a>
 8008b42:	2000      	movs	r0, #0
 8008b44:	4770      	bx	lr
 8008b46:	2020      	movs	r0, #32
 8008b48:	4770      	bx	lr
	...

08008b4c <__i2b>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	460c      	mov	r4, r1
 8008b50:	2101      	movs	r1, #1
 8008b52:	f7ff ff03 	bl	800895c <_Balloc>
 8008b56:	4602      	mov	r2, r0
 8008b58:	b928      	cbnz	r0, 8008b66 <__i2b+0x1a>
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <__i2b+0x24>)
 8008b5c:	4805      	ldr	r0, [pc, #20]	; (8008b74 <__i2b+0x28>)
 8008b5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b62:	f7fe feef 	bl	8007944 <__assert_func>
 8008b66:	2301      	movs	r3, #1
 8008b68:	6144      	str	r4, [r0, #20]
 8008b6a:	6103      	str	r3, [r0, #16]
 8008b6c:	bd10      	pop	{r4, pc}
 8008b6e:	bf00      	nop
 8008b70:	08009882 	.word	0x08009882
 8008b74:	08009893 	.word	0x08009893

08008b78 <__multiply>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	4691      	mov	r9, r2
 8008b7e:	690a      	ldr	r2, [r1, #16]
 8008b80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	bfb8      	it	lt
 8008b88:	460b      	movlt	r3, r1
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	bfbc      	itt	lt
 8008b8e:	464c      	movlt	r4, r9
 8008b90:	4699      	movlt	r9, r3
 8008b92:	6927      	ldr	r7, [r4, #16]
 8008b94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b98:	68a3      	ldr	r3, [r4, #8]
 8008b9a:	6861      	ldr	r1, [r4, #4]
 8008b9c:	eb07 060a 	add.w	r6, r7, sl
 8008ba0:	42b3      	cmp	r3, r6
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	bfb8      	it	lt
 8008ba6:	3101      	addlt	r1, #1
 8008ba8:	f7ff fed8 	bl	800895c <_Balloc>
 8008bac:	b930      	cbnz	r0, 8008bbc <__multiply+0x44>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	4b44      	ldr	r3, [pc, #272]	; (8008cc4 <__multiply+0x14c>)
 8008bb2:	4845      	ldr	r0, [pc, #276]	; (8008cc8 <__multiply+0x150>)
 8008bb4:	f240 115d 	movw	r1, #349	; 0x15d
 8008bb8:	f7fe fec4 	bl	8007944 <__assert_func>
 8008bbc:	f100 0514 	add.w	r5, r0, #20
 8008bc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bc4:	462b      	mov	r3, r5
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4543      	cmp	r3, r8
 8008bca:	d321      	bcc.n	8008c10 <__multiply+0x98>
 8008bcc:	f104 0314 	add.w	r3, r4, #20
 8008bd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008bd4:	f109 0314 	add.w	r3, r9, #20
 8008bd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008bdc:	9202      	str	r2, [sp, #8]
 8008bde:	1b3a      	subs	r2, r7, r4
 8008be0:	3a15      	subs	r2, #21
 8008be2:	f022 0203 	bic.w	r2, r2, #3
 8008be6:	3204      	adds	r2, #4
 8008be8:	f104 0115 	add.w	r1, r4, #21
 8008bec:	428f      	cmp	r7, r1
 8008bee:	bf38      	it	cc
 8008bf0:	2204      	movcc	r2, #4
 8008bf2:	9201      	str	r2, [sp, #4]
 8008bf4:	9a02      	ldr	r2, [sp, #8]
 8008bf6:	9303      	str	r3, [sp, #12]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d80c      	bhi.n	8008c16 <__multiply+0x9e>
 8008bfc:	2e00      	cmp	r6, #0
 8008bfe:	dd03      	ble.n	8008c08 <__multiply+0x90>
 8008c00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d05a      	beq.n	8008cbe <__multiply+0x146>
 8008c08:	6106      	str	r6, [r0, #16]
 8008c0a:	b005      	add	sp, #20
 8008c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c10:	f843 2b04 	str.w	r2, [r3], #4
 8008c14:	e7d8      	b.n	8008bc8 <__multiply+0x50>
 8008c16:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c1a:	f1ba 0f00 	cmp.w	sl, #0
 8008c1e:	d024      	beq.n	8008c6a <__multiply+0xf2>
 8008c20:	f104 0e14 	add.w	lr, r4, #20
 8008c24:	46a9      	mov	r9, r5
 8008c26:	f04f 0c00 	mov.w	ip, #0
 8008c2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c2e:	f8d9 1000 	ldr.w	r1, [r9]
 8008c32:	fa1f fb82 	uxth.w	fp, r2
 8008c36:	b289      	uxth	r1, r1
 8008c38:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c40:	f8d9 2000 	ldr.w	r2, [r9]
 8008c44:	4461      	add	r1, ip
 8008c46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c52:	b289      	uxth	r1, r1
 8008c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c58:	4577      	cmp	r7, lr
 8008c5a:	f849 1b04 	str.w	r1, [r9], #4
 8008c5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c62:	d8e2      	bhi.n	8008c2a <__multiply+0xb2>
 8008c64:	9a01      	ldr	r2, [sp, #4]
 8008c66:	f845 c002 	str.w	ip, [r5, r2]
 8008c6a:	9a03      	ldr	r2, [sp, #12]
 8008c6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c70:	3304      	adds	r3, #4
 8008c72:	f1b9 0f00 	cmp.w	r9, #0
 8008c76:	d020      	beq.n	8008cba <__multiply+0x142>
 8008c78:	6829      	ldr	r1, [r5, #0]
 8008c7a:	f104 0c14 	add.w	ip, r4, #20
 8008c7e:	46ae      	mov	lr, r5
 8008c80:	f04f 0a00 	mov.w	sl, #0
 8008c84:	f8bc b000 	ldrh.w	fp, [ip]
 8008c88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c8c:	fb09 220b 	mla	r2, r9, fp, r2
 8008c90:	4492      	add	sl, r2
 8008c92:	b289      	uxth	r1, r1
 8008c94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c98:	f84e 1b04 	str.w	r1, [lr], #4
 8008c9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ca0:	f8be 1000 	ldrh.w	r1, [lr]
 8008ca4:	0c12      	lsrs	r2, r2, #16
 8008ca6:	fb09 1102 	mla	r1, r9, r2, r1
 8008caa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008cae:	4567      	cmp	r7, ip
 8008cb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cb4:	d8e6      	bhi.n	8008c84 <__multiply+0x10c>
 8008cb6:	9a01      	ldr	r2, [sp, #4]
 8008cb8:	50a9      	str	r1, [r5, r2]
 8008cba:	3504      	adds	r5, #4
 8008cbc:	e79a      	b.n	8008bf4 <__multiply+0x7c>
 8008cbe:	3e01      	subs	r6, #1
 8008cc0:	e79c      	b.n	8008bfc <__multiply+0x84>
 8008cc2:	bf00      	nop
 8008cc4:	08009882 	.word	0x08009882
 8008cc8:	08009893 	.word	0x08009893

08008ccc <__pow5mult>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	f012 0203 	ands.w	r2, r2, #3
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460f      	mov	r7, r1
 8008cda:	d007      	beq.n	8008cec <__pow5mult+0x20>
 8008cdc:	4c25      	ldr	r4, [pc, #148]	; (8008d74 <__pow5mult+0xa8>)
 8008cde:	3a01      	subs	r2, #1
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ce6:	f7ff fe9b 	bl	8008a20 <__multadd>
 8008cea:	4607      	mov	r7, r0
 8008cec:	10ad      	asrs	r5, r5, #2
 8008cee:	d03d      	beq.n	8008d6c <__pow5mult+0xa0>
 8008cf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cf2:	b97c      	cbnz	r4, 8008d14 <__pow5mult+0x48>
 8008cf4:	2010      	movs	r0, #16
 8008cf6:	f7ff fe1d 	bl	8008934 <malloc>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	6270      	str	r0, [r6, #36]	; 0x24
 8008cfe:	b928      	cbnz	r0, 8008d0c <__pow5mult+0x40>
 8008d00:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <__pow5mult+0xac>)
 8008d02:	481e      	ldr	r0, [pc, #120]	; (8008d7c <__pow5mult+0xb0>)
 8008d04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d08:	f7fe fe1c 	bl	8007944 <__assert_func>
 8008d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d10:	6004      	str	r4, [r0, #0]
 8008d12:	60c4      	str	r4, [r0, #12]
 8008d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d1c:	b94c      	cbnz	r4, 8008d32 <__pow5mult+0x66>
 8008d1e:	f240 2171 	movw	r1, #625	; 0x271
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ff12 	bl	8008b4c <__i2b>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d2e:	4604      	mov	r4, r0
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	f04f 0900 	mov.w	r9, #0
 8008d36:	07eb      	lsls	r3, r5, #31
 8008d38:	d50a      	bpl.n	8008d50 <__pow5mult+0x84>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7ff ff1a 	bl	8008b78 <__multiply>
 8008d44:	4639      	mov	r1, r7
 8008d46:	4680      	mov	r8, r0
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff fe47 	bl	80089dc <_Bfree>
 8008d4e:	4647      	mov	r7, r8
 8008d50:	106d      	asrs	r5, r5, #1
 8008d52:	d00b      	beq.n	8008d6c <__pow5mult+0xa0>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	b938      	cbnz	r0, 8008d68 <__pow5mult+0x9c>
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff ff0b 	bl	8008b78 <__multiply>
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	f8c0 9000 	str.w	r9, [r0]
 8008d68:	4604      	mov	r4, r0
 8008d6a:	e7e4      	b.n	8008d36 <__pow5mult+0x6a>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d72:	bf00      	nop
 8008d74:	080099e0 	.word	0x080099e0
 8008d78:	0800976c 	.word	0x0800976c
 8008d7c:	08009893 	.word	0x08009893

08008d80 <__lshift>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	460c      	mov	r4, r1
 8008d86:	6849      	ldr	r1, [r1, #4]
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	4607      	mov	r7, r0
 8008d92:	4691      	mov	r9, r2
 8008d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d98:	f108 0601 	add.w	r6, r8, #1
 8008d9c:	42b3      	cmp	r3, r6
 8008d9e:	db0b      	blt.n	8008db8 <__lshift+0x38>
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff fddb 	bl	800895c <_Balloc>
 8008da6:	4605      	mov	r5, r0
 8008da8:	b948      	cbnz	r0, 8008dbe <__lshift+0x3e>
 8008daa:	4602      	mov	r2, r0
 8008dac:	4b2a      	ldr	r3, [pc, #168]	; (8008e58 <__lshift+0xd8>)
 8008dae:	482b      	ldr	r0, [pc, #172]	; (8008e5c <__lshift+0xdc>)
 8008db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008db4:	f7fe fdc6 	bl	8007944 <__assert_func>
 8008db8:	3101      	adds	r1, #1
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	e7ee      	b.n	8008d9c <__lshift+0x1c>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f100 0114 	add.w	r1, r0, #20
 8008dc4:	f100 0210 	add.w	r2, r0, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	4553      	cmp	r3, sl
 8008dcc:	db37      	blt.n	8008e3e <__lshift+0xbe>
 8008dce:	6920      	ldr	r0, [r4, #16]
 8008dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dd4:	f104 0314 	add.w	r3, r4, #20
 8008dd8:	f019 091f 	ands.w	r9, r9, #31
 8008ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008de4:	d02f      	beq.n	8008e46 <__lshift+0xc6>
 8008de6:	f1c9 0e20 	rsb	lr, r9, #32
 8008dea:	468a      	mov	sl, r1
 8008dec:	f04f 0c00 	mov.w	ip, #0
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	fa02 f209 	lsl.w	r2, r2, r9
 8008df6:	ea42 020c 	orr.w	r2, r2, ip
 8008dfa:	f84a 2b04 	str.w	r2, [sl], #4
 8008dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e02:	4298      	cmp	r0, r3
 8008e04:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e08:	d8f2      	bhi.n	8008df0 <__lshift+0x70>
 8008e0a:	1b03      	subs	r3, r0, r4
 8008e0c:	3b15      	subs	r3, #21
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	3304      	adds	r3, #4
 8008e14:	f104 0215 	add.w	r2, r4, #21
 8008e18:	4290      	cmp	r0, r2
 8008e1a:	bf38      	it	cc
 8008e1c:	2304      	movcc	r3, #4
 8008e1e:	f841 c003 	str.w	ip, [r1, r3]
 8008e22:	f1bc 0f00 	cmp.w	ip, #0
 8008e26:	d001      	beq.n	8008e2c <__lshift+0xac>
 8008e28:	f108 0602 	add.w	r6, r8, #2
 8008e2c:	3e01      	subs	r6, #1
 8008e2e:	4638      	mov	r0, r7
 8008e30:	612e      	str	r6, [r5, #16]
 8008e32:	4621      	mov	r1, r4
 8008e34:	f7ff fdd2 	bl	80089dc <_Bfree>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e42:	3301      	adds	r3, #1
 8008e44:	e7c1      	b.n	8008dca <__lshift+0x4a>
 8008e46:	3904      	subs	r1, #4
 8008e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e50:	4298      	cmp	r0, r3
 8008e52:	d8f9      	bhi.n	8008e48 <__lshift+0xc8>
 8008e54:	e7ea      	b.n	8008e2c <__lshift+0xac>
 8008e56:	bf00      	nop
 8008e58:	08009882 	.word	0x08009882
 8008e5c:	08009893 	.word	0x08009893

08008e60 <__mcmp>:
 8008e60:	b530      	push	{r4, r5, lr}
 8008e62:	6902      	ldr	r2, [r0, #16]
 8008e64:	690c      	ldr	r4, [r1, #16]
 8008e66:	1b12      	subs	r2, r2, r4
 8008e68:	d10e      	bne.n	8008e88 <__mcmp+0x28>
 8008e6a:	f100 0314 	add.w	r3, r0, #20
 8008e6e:	3114      	adds	r1, #20
 8008e70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e80:	42a5      	cmp	r5, r4
 8008e82:	d003      	beq.n	8008e8c <__mcmp+0x2c>
 8008e84:	d305      	bcc.n	8008e92 <__mcmp+0x32>
 8008e86:	2201      	movs	r2, #1
 8008e88:	4610      	mov	r0, r2
 8008e8a:	bd30      	pop	{r4, r5, pc}
 8008e8c:	4283      	cmp	r3, r0
 8008e8e:	d3f3      	bcc.n	8008e78 <__mcmp+0x18>
 8008e90:	e7fa      	b.n	8008e88 <__mcmp+0x28>
 8008e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e96:	e7f7      	b.n	8008e88 <__mcmp+0x28>

08008e98 <__mdiff>:
 8008e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4690      	mov	r8, r2
 8008ea6:	f7ff ffdb 	bl	8008e60 <__mcmp>
 8008eaa:	1e05      	subs	r5, r0, #0
 8008eac:	d110      	bne.n	8008ed0 <__mdiff+0x38>
 8008eae:	4629      	mov	r1, r5
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff fd53 	bl	800895c <_Balloc>
 8008eb6:	b930      	cbnz	r0, 8008ec6 <__mdiff+0x2e>
 8008eb8:	4b3a      	ldr	r3, [pc, #232]	; (8008fa4 <__mdiff+0x10c>)
 8008eba:	4602      	mov	r2, r0
 8008ebc:	f240 2132 	movw	r1, #562	; 0x232
 8008ec0:	4839      	ldr	r0, [pc, #228]	; (8008fa8 <__mdiff+0x110>)
 8008ec2:	f7fe fd3f 	bl	8007944 <__assert_func>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed0:	bfa4      	itt	ge
 8008ed2:	4643      	movge	r3, r8
 8008ed4:	46a0      	movge	r8, r4
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008edc:	bfa6      	itte	ge
 8008ede:	461c      	movge	r4, r3
 8008ee0:	2500      	movge	r5, #0
 8008ee2:	2501      	movlt	r5, #1
 8008ee4:	f7ff fd3a 	bl	800895c <_Balloc>
 8008ee8:	b920      	cbnz	r0, 8008ef4 <__mdiff+0x5c>
 8008eea:	4b2e      	ldr	r3, [pc, #184]	; (8008fa4 <__mdiff+0x10c>)
 8008eec:	4602      	mov	r2, r0
 8008eee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ef2:	e7e5      	b.n	8008ec0 <__mdiff+0x28>
 8008ef4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ef8:	6926      	ldr	r6, [r4, #16]
 8008efa:	60c5      	str	r5, [r0, #12]
 8008efc:	f104 0914 	add.w	r9, r4, #20
 8008f00:	f108 0514 	add.w	r5, r8, #20
 8008f04:	f100 0e14 	add.w	lr, r0, #20
 8008f08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f10:	f108 0210 	add.w	r2, r8, #16
 8008f14:	46f2      	mov	sl, lr
 8008f16:	2100      	movs	r1, #0
 8008f18:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f20:	fa1f f883 	uxth.w	r8, r3
 8008f24:	fa11 f18b 	uxtah	r1, r1, fp
 8008f28:	0c1b      	lsrs	r3, r3, #16
 8008f2a:	eba1 0808 	sub.w	r8, r1, r8
 8008f2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f36:	fa1f f888 	uxth.w	r8, r8
 8008f3a:	1419      	asrs	r1, r3, #16
 8008f3c:	454e      	cmp	r6, r9
 8008f3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f42:	f84a 3b04 	str.w	r3, [sl], #4
 8008f46:	d8e7      	bhi.n	8008f18 <__mdiff+0x80>
 8008f48:	1b33      	subs	r3, r6, r4
 8008f4a:	3b15      	subs	r3, #21
 8008f4c:	f023 0303 	bic.w	r3, r3, #3
 8008f50:	3304      	adds	r3, #4
 8008f52:	3415      	adds	r4, #21
 8008f54:	42a6      	cmp	r6, r4
 8008f56:	bf38      	it	cc
 8008f58:	2304      	movcc	r3, #4
 8008f5a:	441d      	add	r5, r3
 8008f5c:	4473      	add	r3, lr
 8008f5e:	469e      	mov	lr, r3
 8008f60:	462e      	mov	r6, r5
 8008f62:	4566      	cmp	r6, ip
 8008f64:	d30e      	bcc.n	8008f84 <__mdiff+0xec>
 8008f66:	f10c 0203 	add.w	r2, ip, #3
 8008f6a:	1b52      	subs	r2, r2, r5
 8008f6c:	f022 0203 	bic.w	r2, r2, #3
 8008f70:	3d03      	subs	r5, #3
 8008f72:	45ac      	cmp	ip, r5
 8008f74:	bf38      	it	cc
 8008f76:	2200      	movcc	r2, #0
 8008f78:	441a      	add	r2, r3
 8008f7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f7e:	b17b      	cbz	r3, 8008fa0 <__mdiff+0x108>
 8008f80:	6107      	str	r7, [r0, #16]
 8008f82:	e7a3      	b.n	8008ecc <__mdiff+0x34>
 8008f84:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f88:	fa11 f288 	uxtah	r2, r1, r8
 8008f8c:	1414      	asrs	r4, r2, #16
 8008f8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f92:	b292      	uxth	r2, r2
 8008f94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f98:	f84e 2b04 	str.w	r2, [lr], #4
 8008f9c:	1421      	asrs	r1, r4, #16
 8008f9e:	e7e0      	b.n	8008f62 <__mdiff+0xca>
 8008fa0:	3f01      	subs	r7, #1
 8008fa2:	e7ea      	b.n	8008f7a <__mdiff+0xe2>
 8008fa4:	08009882 	.word	0x08009882
 8008fa8:	08009893 	.word	0x08009893

08008fac <__d2b>:
 8008fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	ec57 6b10 	vmov	r6, r7, d0
 8008fb8:	4690      	mov	r8, r2
 8008fba:	f7ff fccf 	bl	800895c <_Balloc>
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	b930      	cbnz	r0, 8008fd0 <__d2b+0x24>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b25      	ldr	r3, [pc, #148]	; (800905c <__d2b+0xb0>)
 8008fc6:	4826      	ldr	r0, [pc, #152]	; (8009060 <__d2b+0xb4>)
 8008fc8:	f240 310a 	movw	r1, #778	; 0x30a
 8008fcc:	f7fe fcba 	bl	8007944 <__assert_func>
 8008fd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fd8:	bb35      	cbnz	r5, 8009028 <__d2b+0x7c>
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	d028      	beq.n	8009032 <__d2b+0x86>
 8008fe0:	4668      	mov	r0, sp
 8008fe2:	9600      	str	r6, [sp, #0]
 8008fe4:	f7ff fd82 	bl	8008aec <__lo0bits>
 8008fe8:	9900      	ldr	r1, [sp, #0]
 8008fea:	b300      	cbz	r0, 800902e <__d2b+0x82>
 8008fec:	9a01      	ldr	r2, [sp, #4]
 8008fee:	f1c0 0320 	rsb	r3, r0, #32
 8008ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	40c2      	lsrs	r2, r0
 8008ffa:	6163      	str	r3, [r4, #20]
 8008ffc:	9201      	str	r2, [sp, #4]
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	61a3      	str	r3, [r4, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bf14      	ite	ne
 8009006:	2202      	movne	r2, #2
 8009008:	2201      	moveq	r2, #1
 800900a:	6122      	str	r2, [r4, #16]
 800900c:	b1d5      	cbz	r5, 8009044 <__d2b+0x98>
 800900e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009012:	4405      	add	r5, r0
 8009014:	f8c9 5000 	str.w	r5, [r9]
 8009018:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800901c:	f8c8 0000 	str.w	r0, [r8]
 8009020:	4620      	mov	r0, r4
 8009022:	b003      	add	sp, #12
 8009024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800902c:	e7d5      	b.n	8008fda <__d2b+0x2e>
 800902e:	6161      	str	r1, [r4, #20]
 8009030:	e7e5      	b.n	8008ffe <__d2b+0x52>
 8009032:	a801      	add	r0, sp, #4
 8009034:	f7ff fd5a 	bl	8008aec <__lo0bits>
 8009038:	9b01      	ldr	r3, [sp, #4]
 800903a:	6163      	str	r3, [r4, #20]
 800903c:	2201      	movs	r2, #1
 800903e:	6122      	str	r2, [r4, #16]
 8009040:	3020      	adds	r0, #32
 8009042:	e7e3      	b.n	800900c <__d2b+0x60>
 8009044:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800904c:	f8c9 0000 	str.w	r0, [r9]
 8009050:	6918      	ldr	r0, [r3, #16]
 8009052:	f7ff fd2b 	bl	8008aac <__hi0bits>
 8009056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800905a:	e7df      	b.n	800901c <__d2b+0x70>
 800905c:	08009882 	.word	0x08009882
 8009060:	08009893 	.word	0x08009893

08009064 <_calloc_r>:
 8009064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009066:	fba1 2402 	umull	r2, r4, r1, r2
 800906a:	b94c      	cbnz	r4, 8009080 <_calloc_r+0x1c>
 800906c:	4611      	mov	r1, r2
 800906e:	9201      	str	r2, [sp, #4]
 8009070:	f7fd fd2e 	bl	8006ad0 <_malloc_r>
 8009074:	9a01      	ldr	r2, [sp, #4]
 8009076:	4605      	mov	r5, r0
 8009078:	b930      	cbnz	r0, 8009088 <_calloc_r+0x24>
 800907a:	4628      	mov	r0, r5
 800907c:	b003      	add	sp, #12
 800907e:	bd30      	pop	{r4, r5, pc}
 8009080:	220c      	movs	r2, #12
 8009082:	6002      	str	r2, [r0, #0]
 8009084:	2500      	movs	r5, #0
 8009086:	e7f8      	b.n	800907a <_calloc_r+0x16>
 8009088:	4621      	mov	r1, r4
 800908a:	f7fd fcf8 	bl	8006a7e <memset>
 800908e:	e7f4      	b.n	800907a <_calloc_r+0x16>

08009090 <_free_r>:
 8009090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009092:	2900      	cmp	r1, #0
 8009094:	d044      	beq.n	8009120 <_free_r+0x90>
 8009096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800909a:	9001      	str	r0, [sp, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f1a1 0404 	sub.w	r4, r1, #4
 80090a2:	bfb8      	it	lt
 80090a4:	18e4      	addlt	r4, r4, r3
 80090a6:	f7ff fc4d 	bl	8008944 <__malloc_lock>
 80090aa:	4a1e      	ldr	r2, [pc, #120]	; (8009124 <_free_r+0x94>)
 80090ac:	9801      	ldr	r0, [sp, #4]
 80090ae:	6813      	ldr	r3, [r2, #0]
 80090b0:	b933      	cbnz	r3, 80090c0 <_free_r+0x30>
 80090b2:	6063      	str	r3, [r4, #4]
 80090b4:	6014      	str	r4, [r2, #0]
 80090b6:	b003      	add	sp, #12
 80090b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090bc:	f7ff bc48 	b.w	8008950 <__malloc_unlock>
 80090c0:	42a3      	cmp	r3, r4
 80090c2:	d908      	bls.n	80090d6 <_free_r+0x46>
 80090c4:	6825      	ldr	r5, [r4, #0]
 80090c6:	1961      	adds	r1, r4, r5
 80090c8:	428b      	cmp	r3, r1
 80090ca:	bf01      	itttt	eq
 80090cc:	6819      	ldreq	r1, [r3, #0]
 80090ce:	685b      	ldreq	r3, [r3, #4]
 80090d0:	1949      	addeq	r1, r1, r5
 80090d2:	6021      	streq	r1, [r4, #0]
 80090d4:	e7ed      	b.n	80090b2 <_free_r+0x22>
 80090d6:	461a      	mov	r2, r3
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	b10b      	cbz	r3, 80090e0 <_free_r+0x50>
 80090dc:	42a3      	cmp	r3, r4
 80090de:	d9fa      	bls.n	80090d6 <_free_r+0x46>
 80090e0:	6811      	ldr	r1, [r2, #0]
 80090e2:	1855      	adds	r5, r2, r1
 80090e4:	42a5      	cmp	r5, r4
 80090e6:	d10b      	bne.n	8009100 <_free_r+0x70>
 80090e8:	6824      	ldr	r4, [r4, #0]
 80090ea:	4421      	add	r1, r4
 80090ec:	1854      	adds	r4, r2, r1
 80090ee:	42a3      	cmp	r3, r4
 80090f0:	6011      	str	r1, [r2, #0]
 80090f2:	d1e0      	bne.n	80090b6 <_free_r+0x26>
 80090f4:	681c      	ldr	r4, [r3, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	6053      	str	r3, [r2, #4]
 80090fa:	4421      	add	r1, r4
 80090fc:	6011      	str	r1, [r2, #0]
 80090fe:	e7da      	b.n	80090b6 <_free_r+0x26>
 8009100:	d902      	bls.n	8009108 <_free_r+0x78>
 8009102:	230c      	movs	r3, #12
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	e7d6      	b.n	80090b6 <_free_r+0x26>
 8009108:	6825      	ldr	r5, [r4, #0]
 800910a:	1961      	adds	r1, r4, r5
 800910c:	428b      	cmp	r3, r1
 800910e:	bf04      	itt	eq
 8009110:	6819      	ldreq	r1, [r3, #0]
 8009112:	685b      	ldreq	r3, [r3, #4]
 8009114:	6063      	str	r3, [r4, #4]
 8009116:	bf04      	itt	eq
 8009118:	1949      	addeq	r1, r1, r5
 800911a:	6021      	streq	r1, [r4, #0]
 800911c:	6054      	str	r4, [r2, #4]
 800911e:	e7ca      	b.n	80090b6 <_free_r+0x26>
 8009120:	b003      	add	sp, #12
 8009122:	bd30      	pop	{r4, r5, pc}
 8009124:	20001cec 	.word	0x20001cec

08009128 <__sfputc_r>:
 8009128:	6893      	ldr	r3, [r2, #8]
 800912a:	3b01      	subs	r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	b410      	push	{r4}
 8009130:	6093      	str	r3, [r2, #8]
 8009132:	da08      	bge.n	8009146 <__sfputc_r+0x1e>
 8009134:	6994      	ldr	r4, [r2, #24]
 8009136:	42a3      	cmp	r3, r4
 8009138:	db01      	blt.n	800913e <__sfputc_r+0x16>
 800913a:	290a      	cmp	r1, #10
 800913c:	d103      	bne.n	8009146 <__sfputc_r+0x1e>
 800913e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009142:	f7fe bb2d 	b.w	80077a0 <__swbuf_r>
 8009146:	6813      	ldr	r3, [r2, #0]
 8009148:	1c58      	adds	r0, r3, #1
 800914a:	6010      	str	r0, [r2, #0]
 800914c:	7019      	strb	r1, [r3, #0]
 800914e:	4608      	mov	r0, r1
 8009150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009154:	4770      	bx	lr

08009156 <__sfputs_r>:
 8009156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009158:	4606      	mov	r6, r0
 800915a:	460f      	mov	r7, r1
 800915c:	4614      	mov	r4, r2
 800915e:	18d5      	adds	r5, r2, r3
 8009160:	42ac      	cmp	r4, r5
 8009162:	d101      	bne.n	8009168 <__sfputs_r+0x12>
 8009164:	2000      	movs	r0, #0
 8009166:	e007      	b.n	8009178 <__sfputs_r+0x22>
 8009168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916c:	463a      	mov	r2, r7
 800916e:	4630      	mov	r0, r6
 8009170:	f7ff ffda 	bl	8009128 <__sfputc_r>
 8009174:	1c43      	adds	r3, r0, #1
 8009176:	d1f3      	bne.n	8009160 <__sfputs_r+0xa>
 8009178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800917c <_vfiprintf_r>:
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	460d      	mov	r5, r1
 8009182:	b09d      	sub	sp, #116	; 0x74
 8009184:	4614      	mov	r4, r2
 8009186:	4698      	mov	r8, r3
 8009188:	4606      	mov	r6, r0
 800918a:	b118      	cbz	r0, 8009194 <_vfiprintf_r+0x18>
 800918c:	6983      	ldr	r3, [r0, #24]
 800918e:	b90b      	cbnz	r3, 8009194 <_vfiprintf_r+0x18>
 8009190:	f7fd fba2 	bl	80068d8 <__sinit>
 8009194:	4b89      	ldr	r3, [pc, #548]	; (80093bc <_vfiprintf_r+0x240>)
 8009196:	429d      	cmp	r5, r3
 8009198:	d11b      	bne.n	80091d2 <_vfiprintf_r+0x56>
 800919a:	6875      	ldr	r5, [r6, #4]
 800919c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800919e:	07d9      	lsls	r1, r3, #31
 80091a0:	d405      	bmi.n	80091ae <_vfiprintf_r+0x32>
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	059a      	lsls	r2, r3, #22
 80091a6:	d402      	bmi.n	80091ae <_vfiprintf_r+0x32>
 80091a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091aa:	f7fd fc58 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	071b      	lsls	r3, r3, #28
 80091b2:	d501      	bpl.n	80091b8 <_vfiprintf_r+0x3c>
 80091b4:	692b      	ldr	r3, [r5, #16]
 80091b6:	b9eb      	cbnz	r3, 80091f4 <_vfiprintf_r+0x78>
 80091b8:	4629      	mov	r1, r5
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7fe fb54 	bl	8007868 <__swsetup_r>
 80091c0:	b1c0      	cbz	r0, 80091f4 <_vfiprintf_r+0x78>
 80091c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091c4:	07dc      	lsls	r4, r3, #31
 80091c6:	d50e      	bpl.n	80091e6 <_vfiprintf_r+0x6a>
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091cc:	b01d      	add	sp, #116	; 0x74
 80091ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d2:	4b7b      	ldr	r3, [pc, #492]	; (80093c0 <_vfiprintf_r+0x244>)
 80091d4:	429d      	cmp	r5, r3
 80091d6:	d101      	bne.n	80091dc <_vfiprintf_r+0x60>
 80091d8:	68b5      	ldr	r5, [r6, #8]
 80091da:	e7df      	b.n	800919c <_vfiprintf_r+0x20>
 80091dc:	4b79      	ldr	r3, [pc, #484]	; (80093c4 <_vfiprintf_r+0x248>)
 80091de:	429d      	cmp	r5, r3
 80091e0:	bf08      	it	eq
 80091e2:	68f5      	ldreq	r5, [r6, #12]
 80091e4:	e7da      	b.n	800919c <_vfiprintf_r+0x20>
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	0598      	lsls	r0, r3, #22
 80091ea:	d4ed      	bmi.n	80091c8 <_vfiprintf_r+0x4c>
 80091ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091ee:	f7fd fc37 	bl	8006a60 <__retarget_lock_release_recursive>
 80091f2:	e7e9      	b.n	80091c8 <_vfiprintf_r+0x4c>
 80091f4:	2300      	movs	r3, #0
 80091f6:	9309      	str	r3, [sp, #36]	; 0x24
 80091f8:	2320      	movs	r3, #32
 80091fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009202:	2330      	movs	r3, #48	; 0x30
 8009204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093c8 <_vfiprintf_r+0x24c>
 8009208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800920c:	f04f 0901 	mov.w	r9, #1
 8009210:	4623      	mov	r3, r4
 8009212:	469a      	mov	sl, r3
 8009214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009218:	b10a      	cbz	r2, 800921e <_vfiprintf_r+0xa2>
 800921a:	2a25      	cmp	r2, #37	; 0x25
 800921c:	d1f9      	bne.n	8009212 <_vfiprintf_r+0x96>
 800921e:	ebba 0b04 	subs.w	fp, sl, r4
 8009222:	d00b      	beq.n	800923c <_vfiprintf_r+0xc0>
 8009224:	465b      	mov	r3, fp
 8009226:	4622      	mov	r2, r4
 8009228:	4629      	mov	r1, r5
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff ff93 	bl	8009156 <__sfputs_r>
 8009230:	3001      	adds	r0, #1
 8009232:	f000 80aa 	beq.w	800938a <_vfiprintf_r+0x20e>
 8009236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009238:	445a      	add	r2, fp
 800923a:	9209      	str	r2, [sp, #36]	; 0x24
 800923c:	f89a 3000 	ldrb.w	r3, [sl]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 80a2 	beq.w	800938a <_vfiprintf_r+0x20e>
 8009246:	2300      	movs	r3, #0
 8009248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800924c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009250:	f10a 0a01 	add.w	sl, sl, #1
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	9307      	str	r3, [sp, #28]
 8009258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800925c:	931a      	str	r3, [sp, #104]	; 0x68
 800925e:	4654      	mov	r4, sl
 8009260:	2205      	movs	r2, #5
 8009262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009266:	4858      	ldr	r0, [pc, #352]	; (80093c8 <_vfiprintf_r+0x24c>)
 8009268:	f7f6 ffba 	bl	80001e0 <memchr>
 800926c:	9a04      	ldr	r2, [sp, #16]
 800926e:	b9d8      	cbnz	r0, 80092a8 <_vfiprintf_r+0x12c>
 8009270:	06d1      	lsls	r1, r2, #27
 8009272:	bf44      	itt	mi
 8009274:	2320      	movmi	r3, #32
 8009276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800927a:	0713      	lsls	r3, r2, #28
 800927c:	bf44      	itt	mi
 800927e:	232b      	movmi	r3, #43	; 0x2b
 8009280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009284:	f89a 3000 	ldrb.w	r3, [sl]
 8009288:	2b2a      	cmp	r3, #42	; 0x2a
 800928a:	d015      	beq.n	80092b8 <_vfiprintf_r+0x13c>
 800928c:	9a07      	ldr	r2, [sp, #28]
 800928e:	4654      	mov	r4, sl
 8009290:	2000      	movs	r0, #0
 8009292:	f04f 0c0a 	mov.w	ip, #10
 8009296:	4621      	mov	r1, r4
 8009298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800929c:	3b30      	subs	r3, #48	; 0x30
 800929e:	2b09      	cmp	r3, #9
 80092a0:	d94e      	bls.n	8009340 <_vfiprintf_r+0x1c4>
 80092a2:	b1b0      	cbz	r0, 80092d2 <_vfiprintf_r+0x156>
 80092a4:	9207      	str	r2, [sp, #28]
 80092a6:	e014      	b.n	80092d2 <_vfiprintf_r+0x156>
 80092a8:	eba0 0308 	sub.w	r3, r0, r8
 80092ac:	fa09 f303 	lsl.w	r3, r9, r3
 80092b0:	4313      	orrs	r3, r2
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	46a2      	mov	sl, r4
 80092b6:	e7d2      	b.n	800925e <_vfiprintf_r+0xe2>
 80092b8:	9b03      	ldr	r3, [sp, #12]
 80092ba:	1d19      	adds	r1, r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	9103      	str	r1, [sp, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bfbb      	ittet	lt
 80092c4:	425b      	neglt	r3, r3
 80092c6:	f042 0202 	orrlt.w	r2, r2, #2
 80092ca:	9307      	strge	r3, [sp, #28]
 80092cc:	9307      	strlt	r3, [sp, #28]
 80092ce:	bfb8      	it	lt
 80092d0:	9204      	strlt	r2, [sp, #16]
 80092d2:	7823      	ldrb	r3, [r4, #0]
 80092d4:	2b2e      	cmp	r3, #46	; 0x2e
 80092d6:	d10c      	bne.n	80092f2 <_vfiprintf_r+0x176>
 80092d8:	7863      	ldrb	r3, [r4, #1]
 80092da:	2b2a      	cmp	r3, #42	; 0x2a
 80092dc:	d135      	bne.n	800934a <_vfiprintf_r+0x1ce>
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	1d1a      	adds	r2, r3, #4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	9203      	str	r2, [sp, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	bfb8      	it	lt
 80092ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092ee:	3402      	adds	r4, #2
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093d8 <_vfiprintf_r+0x25c>
 80092f6:	7821      	ldrb	r1, [r4, #0]
 80092f8:	2203      	movs	r2, #3
 80092fa:	4650      	mov	r0, sl
 80092fc:	f7f6 ff70 	bl	80001e0 <memchr>
 8009300:	b140      	cbz	r0, 8009314 <_vfiprintf_r+0x198>
 8009302:	2340      	movs	r3, #64	; 0x40
 8009304:	eba0 000a 	sub.w	r0, r0, sl
 8009308:	fa03 f000 	lsl.w	r0, r3, r0
 800930c:	9b04      	ldr	r3, [sp, #16]
 800930e:	4303      	orrs	r3, r0
 8009310:	3401      	adds	r4, #1
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009318:	482c      	ldr	r0, [pc, #176]	; (80093cc <_vfiprintf_r+0x250>)
 800931a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800931e:	2206      	movs	r2, #6
 8009320:	f7f6 ff5e 	bl	80001e0 <memchr>
 8009324:	2800      	cmp	r0, #0
 8009326:	d03f      	beq.n	80093a8 <_vfiprintf_r+0x22c>
 8009328:	4b29      	ldr	r3, [pc, #164]	; (80093d0 <_vfiprintf_r+0x254>)
 800932a:	bb1b      	cbnz	r3, 8009374 <_vfiprintf_r+0x1f8>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	3307      	adds	r3, #7
 8009330:	f023 0307 	bic.w	r3, r3, #7
 8009334:	3308      	adds	r3, #8
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933a:	443b      	add	r3, r7
 800933c:	9309      	str	r3, [sp, #36]	; 0x24
 800933e:	e767      	b.n	8009210 <_vfiprintf_r+0x94>
 8009340:	fb0c 3202 	mla	r2, ip, r2, r3
 8009344:	460c      	mov	r4, r1
 8009346:	2001      	movs	r0, #1
 8009348:	e7a5      	b.n	8009296 <_vfiprintf_r+0x11a>
 800934a:	2300      	movs	r3, #0
 800934c:	3401      	adds	r4, #1
 800934e:	9305      	str	r3, [sp, #20]
 8009350:	4619      	mov	r1, r3
 8009352:	f04f 0c0a 	mov.w	ip, #10
 8009356:	4620      	mov	r0, r4
 8009358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800935c:	3a30      	subs	r2, #48	; 0x30
 800935e:	2a09      	cmp	r2, #9
 8009360:	d903      	bls.n	800936a <_vfiprintf_r+0x1ee>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0c5      	beq.n	80092f2 <_vfiprintf_r+0x176>
 8009366:	9105      	str	r1, [sp, #20]
 8009368:	e7c3      	b.n	80092f2 <_vfiprintf_r+0x176>
 800936a:	fb0c 2101 	mla	r1, ip, r1, r2
 800936e:	4604      	mov	r4, r0
 8009370:	2301      	movs	r3, #1
 8009372:	e7f0      	b.n	8009356 <_vfiprintf_r+0x1da>
 8009374:	ab03      	add	r3, sp, #12
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	462a      	mov	r2, r5
 800937a:	4b16      	ldr	r3, [pc, #88]	; (80093d4 <_vfiprintf_r+0x258>)
 800937c:	a904      	add	r1, sp, #16
 800937e:	4630      	mov	r0, r6
 8009380:	f7fd fcba 	bl	8006cf8 <_printf_float>
 8009384:	4607      	mov	r7, r0
 8009386:	1c78      	adds	r0, r7, #1
 8009388:	d1d6      	bne.n	8009338 <_vfiprintf_r+0x1bc>
 800938a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800938c:	07d9      	lsls	r1, r3, #31
 800938e:	d405      	bmi.n	800939c <_vfiprintf_r+0x220>
 8009390:	89ab      	ldrh	r3, [r5, #12]
 8009392:	059a      	lsls	r2, r3, #22
 8009394:	d402      	bmi.n	800939c <_vfiprintf_r+0x220>
 8009396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009398:	f7fd fb62 	bl	8006a60 <__retarget_lock_release_recursive>
 800939c:	89ab      	ldrh	r3, [r5, #12]
 800939e:	065b      	lsls	r3, r3, #25
 80093a0:	f53f af12 	bmi.w	80091c8 <_vfiprintf_r+0x4c>
 80093a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a6:	e711      	b.n	80091cc <_vfiprintf_r+0x50>
 80093a8:	ab03      	add	r3, sp, #12
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	462a      	mov	r2, r5
 80093ae:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <_vfiprintf_r+0x258>)
 80093b0:	a904      	add	r1, sp, #16
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7fd ff44 	bl	8007240 <_printf_i>
 80093b8:	e7e4      	b.n	8009384 <_vfiprintf_r+0x208>
 80093ba:	bf00      	nop
 80093bc:	080096f4 	.word	0x080096f4
 80093c0:	08009714 	.word	0x08009714
 80093c4:	080096d4 	.word	0x080096d4
 80093c8:	080099ec 	.word	0x080099ec
 80093cc:	080099f6 	.word	0x080099f6
 80093d0:	08006cf9 	.word	0x08006cf9
 80093d4:	08009157 	.word	0x08009157
 80093d8:	080099f2 	.word	0x080099f2

080093dc <_read_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4d07      	ldr	r5, [pc, #28]	; (80093fc <_read_r+0x20>)
 80093e0:	4604      	mov	r4, r0
 80093e2:	4608      	mov	r0, r1
 80093e4:	4611      	mov	r1, r2
 80093e6:	2200      	movs	r2, #0
 80093e8:	602a      	str	r2, [r5, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	f7f7 ff64 	bl	80012b8 <_read>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_read_r+0x1e>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_read_r+0x1e>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20001cf4 	.word	0x20001cf4

08009400 <abort>:
 8009400:	b508      	push	{r3, lr}
 8009402:	2006      	movs	r0, #6
 8009404:	f000 f860 	bl	80094c8 <raise>
 8009408:	2001      	movs	r0, #1
 800940a:	f7f7 ff4b 	bl	80012a4 <_exit>
	...

08009410 <_fstat_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d07      	ldr	r5, [pc, #28]	; (8009430 <_fstat_r+0x20>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	f7f7 ff90 	bl	8001342 <_fstat>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d102      	bne.n	800942c <_fstat_r+0x1c>
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	b103      	cbz	r3, 800942c <_fstat_r+0x1c>
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	bd38      	pop	{r3, r4, r5, pc}
 800942e:	bf00      	nop
 8009430:	20001cf4 	.word	0x20001cf4

08009434 <_isatty_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d06      	ldr	r5, [pc, #24]	; (8009450 <_isatty_r+0x1c>)
 8009438:	2300      	movs	r3, #0
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7f7 ff8f 	bl	8001362 <_isatty>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_isatty_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_isatty_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	20001cf4 	.word	0x20001cf4

08009454 <__ascii_mbtowc>:
 8009454:	b082      	sub	sp, #8
 8009456:	b901      	cbnz	r1, 800945a <__ascii_mbtowc+0x6>
 8009458:	a901      	add	r1, sp, #4
 800945a:	b142      	cbz	r2, 800946e <__ascii_mbtowc+0x1a>
 800945c:	b14b      	cbz	r3, 8009472 <__ascii_mbtowc+0x1e>
 800945e:	7813      	ldrb	r3, [r2, #0]
 8009460:	600b      	str	r3, [r1, #0]
 8009462:	7812      	ldrb	r2, [r2, #0]
 8009464:	1e10      	subs	r0, r2, #0
 8009466:	bf18      	it	ne
 8009468:	2001      	movne	r0, #1
 800946a:	b002      	add	sp, #8
 800946c:	4770      	bx	lr
 800946e:	4610      	mov	r0, r2
 8009470:	e7fb      	b.n	800946a <__ascii_mbtowc+0x16>
 8009472:	f06f 0001 	mvn.w	r0, #1
 8009476:	e7f8      	b.n	800946a <__ascii_mbtowc+0x16>

08009478 <_raise_r>:
 8009478:	291f      	cmp	r1, #31
 800947a:	b538      	push	{r3, r4, r5, lr}
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	d904      	bls.n	800948c <_raise_r+0x14>
 8009482:	2316      	movs	r3, #22
 8009484:	6003      	str	r3, [r0, #0]
 8009486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800948e:	b112      	cbz	r2, 8009496 <_raise_r+0x1e>
 8009490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009494:	b94b      	cbnz	r3, 80094aa <_raise_r+0x32>
 8009496:	4620      	mov	r0, r4
 8009498:	f000 f830 	bl	80094fc <_getpid_r>
 800949c:	462a      	mov	r2, r5
 800949e:	4601      	mov	r1, r0
 80094a0:	4620      	mov	r0, r4
 80094a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a6:	f000 b817 	b.w	80094d8 <_kill_r>
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d00a      	beq.n	80094c4 <_raise_r+0x4c>
 80094ae:	1c59      	adds	r1, r3, #1
 80094b0:	d103      	bne.n	80094ba <_raise_r+0x42>
 80094b2:	2316      	movs	r3, #22
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	2001      	movs	r0, #1
 80094b8:	e7e7      	b.n	800948a <_raise_r+0x12>
 80094ba:	2400      	movs	r4, #0
 80094bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094c0:	4628      	mov	r0, r5
 80094c2:	4798      	blx	r3
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7e0      	b.n	800948a <_raise_r+0x12>

080094c8 <raise>:
 80094c8:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <raise+0xc>)
 80094ca:	4601      	mov	r1, r0
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	f7ff bfd3 	b.w	8009478 <_raise_r>
 80094d2:	bf00      	nop
 80094d4:	20000010 	.word	0x20000010

080094d8 <_kill_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d07      	ldr	r5, [pc, #28]	; (80094f8 <_kill_r+0x20>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	4611      	mov	r1, r2
 80094e4:	602b      	str	r3, [r5, #0]
 80094e6:	f7f7 fecd 	bl	8001284 <_kill>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	d102      	bne.n	80094f4 <_kill_r+0x1c>
 80094ee:	682b      	ldr	r3, [r5, #0]
 80094f0:	b103      	cbz	r3, 80094f4 <_kill_r+0x1c>
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	bd38      	pop	{r3, r4, r5, pc}
 80094f6:	bf00      	nop
 80094f8:	20001cf4 	.word	0x20001cf4

080094fc <_getpid_r>:
 80094fc:	f7f7 beba 	b.w	8001274 <_getpid>

08009500 <__ascii_wctomb>:
 8009500:	b149      	cbz	r1, 8009516 <__ascii_wctomb+0x16>
 8009502:	2aff      	cmp	r2, #255	; 0xff
 8009504:	bf85      	ittet	hi
 8009506:	238a      	movhi	r3, #138	; 0x8a
 8009508:	6003      	strhi	r3, [r0, #0]
 800950a:	700a      	strbls	r2, [r1, #0]
 800950c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009510:	bf98      	it	ls
 8009512:	2001      	movls	r0, #1
 8009514:	4770      	bx	lr
 8009516:	4608      	mov	r0, r1
 8009518:	4770      	bx	lr
	...

0800951c <_init>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	bf00      	nop
 8009520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009522:	bc08      	pop	{r3}
 8009524:	469e      	mov	lr, r3
 8009526:	4770      	bx	lr

08009528 <_fini>:
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952a:	bf00      	nop
 800952c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952e:	bc08      	pop	{r3}
 8009530:	469e      	mov	lr, r3
 8009532:	4770      	bx	lr
