
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005be8  08005be8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be8  08005be8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001b0c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b80  20001b80  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000195d6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000301f  00000000  00000000  0003967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001208  00000000  00000000  0003d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e5d  00000000  00000000  0003ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016631  00000000  00000000  00041a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc34a  00000000  00000000  00058056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001243a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005360  00000000  00000000  001243f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ae8 	.word	0x08005ae8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005ae8 	.word	0x08005ae8

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa98 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f81a 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f88a 	bl	80002f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f858 	bl	8000294 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  start_rtos();
 80001e4:	f000 f914 	bl	8000410 <start_rtos>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e8:	f002 fe0c 	bl	8002e04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <main+0x34>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <main+0x38>)
 80001f2:	f002 fe6f 	bl	8002ed4 <osThreadNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x3c>)
 80001fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001fc:	f002 fe36 	bl	8002e6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x30>
 8000202:	bf00      	nop
 8000204:	08005b2c 	.word	0x08005b2c
 8000208:	080003d1 	.word	0x080003d1
 800020c:	20000118 	.word	0x20000118

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f005 fb98 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000246:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fcfb 	bl	8000c4c <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800025c:	f000 f8d2 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fd24 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000286:	f000 f8bd 	bl	8000404 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <MX_USART2_UART_Init+0x58>)
 800029a:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <MX_USART2_UART_Init+0x5c>)
 800029c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002ba:	220c      	movs	r2, #12
 80002bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_USART2_UART_Init+0x58>)
 80002d8:	f002 f9fa 	bl	80026d0 <HAL_UART_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002e2:	f000 f88f 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000090 	.word	0x20000090
 80002f0:	40004400 	.word	0x40004400

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08a      	sub	sp, #40	; 0x28
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <MX_GPIO_Init+0xd4>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a2e      	ldr	r2, [pc, #184]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000314:	6153      	str	r3, [r2, #20]
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000322:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a28      	ldr	r2, [pc, #160]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800032c:	6153      	str	r3, [r2, #20]
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <MX_GPIO_Init+0xd4>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_GPIO_Init+0xd4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2120      	movs	r1, #32
 800036e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000372:	f000 fc53 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_EXT_GPIO_Port, LD_EXT_Pin, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000380:	f000 fc4c 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800038a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000394:	f107 0314 	add.w	r3, r7, #20
 8000398:	4619      	mov	r1, r3
 800039a:	480c      	ldr	r0, [pc, #48]	; (80003cc <MX_GPIO_Init+0xd8>)
 800039c:	f000 facc 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD_EXT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD_EXT_Pin;
 80003a0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2300      	movs	r3, #0
 80003b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f000 fabc 	bl	8000938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003c0:	bf00      	nop
 80003c2:	3728      	adds	r7, #40	; 0x28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800

080003d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003d8:	2001      	movs	r0, #1
 80003da:	f002 fe25 	bl	8003028 <osDelay>
 80003de:	e7fb      	b.n	80003d8 <StartDefaultTask+0x8>

080003e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d101      	bne.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003f2:	f000 f99f 	bl	8000734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40001000 	.word	0x40001000

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	e7fe      	b.n	800040c <Error_Handler+0x8>
	...

08000410 <start_rtos>:

TaskHandle_t hledTask;

void ledTask(void *arg);

void start_rtos(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af02      	add	r7, sp, #8
	xTaskCreate(ledTask,
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <start_rtos+0x20>)
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2301      	movs	r3, #1
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2300      	movs	r3, #0
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	4904      	ldr	r1, [pc, #16]	; (8000434 <start_rtos+0x24>)
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <start_rtos+0x28>)
 8000426:	f003 fc57 	bl	8003cd8 <xTaskCreate>
				128,
				NULL,
				1,
				&hledTask);

	vTaskStartScheduler();
 800042a:	f003 fddd 	bl	8003fe8 <vTaskStartScheduler>

	while(1);
 800042e:	e7fe      	b.n	800042e <start_rtos+0x1e>
 8000430:	2000011c 	.word	0x2000011c
 8000434:	08005b0c 	.word	0x08005b0c
 8000438:	0800043d 	.word	0x0800043d

0800043c <ledTask>:
}

void ledTask(void *arg) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	while(1) {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000444:	2201      	movs	r2, #1
 8000446:	2120      	movs	r1, #32
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 fbe6 	bl	8000c1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_EXT_GPIO_Port, LD_EXT_Pin, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045a:	f000 fbdf 	bl	8000c1c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(100));
 800045e:	2064      	movs	r0, #100	; 0x64
 8000460:	f003 fd8e 	bl	8003f80 <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2120      	movs	r1, #32
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f000 fbd6 	bl	8000c1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_EXT_GPIO_Port, LD_EXT_Pin, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fbcf 	bl	8000c1c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(100));
 800047e:	2064      	movs	r0, #100	; 0x64
 8000480:	f003 fd7e 	bl	8003f80 <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000484:	e7de      	b.n	8000444 <ledTask+0x8>
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_MspInit+0x4c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <HAL_MspInit+0x4c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_MspInit+0x4c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_MspInit+0x4c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <HAL_MspInit+0x4c>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_MspInit+0x4c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	210f      	movs	r1, #15
 80004c2:	f06f 0001 	mvn.w	r0, #1
 80004c6:	f000 fa0d 	bl	80008e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <HAL_UART_MspInit+0x7c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d128      	bne.n	800054c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_UART_MspInit+0x80>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a10      	ldr	r2, [pc, #64]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_UART_MspInit+0x80>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800052a:	230c      	movs	r3, #12
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2303      	movs	r3, #3
 8000538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800053a:	2307      	movs	r3, #7
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f000 f9f6 	bl	8000938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	; 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40004400 	.word	0x40004400
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000564:	2300      	movs	r3, #0
 8000566:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800056c:	4b33      	ldr	r3, [pc, #204]	; (800063c <HAL_InitTick+0xe0>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a32      	ldr	r2, [pc, #200]	; (800063c <HAL_InitTick+0xe0>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	61d3      	str	r3, [r2, #28]
 8000578:	4b30      	ldr	r3, [pc, #192]	; (800063c <HAL_InitTick+0xe0>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f003 0310 	and.w	r3, r3, #16
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000584:	f107 0210 	add.w	r2, r7, #16
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fdd0 	bl	8002134 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800059e:	f001 fd85 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 80005a2:	6378      	str	r0, [r7, #52]	; 0x34
 80005a4:	e004      	b.n	80005b0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005a6:	f001 fd81 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 80005aa:	4603      	mov	r3, r0
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <HAL_InitTick+0xe4>)
 80005b4:	fba2 2303 	umull	r2, r3, r2, r3
 80005b8:	0c9b      	lsrs	r3, r3, #18
 80005ba:	3b01      	subs	r3, #1
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <HAL_InitTick+0xe8>)
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <HAL_InitTick+0xec>)
 80005c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <HAL_InitTick+0xe8>)
 80005c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <HAL_InitTick+0xe8>)
 80005ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <HAL_InitTick+0xe8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <HAL_InitTick+0xe8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_InitTick+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <HAL_InitTick+0xe8>)
 80005e6:	f001 fdd7 	bl	8002198 <HAL_TIM_Base_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d11b      	bne.n	8000630 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <HAL_InitTick+0xe8>)
 80005fa:	f001 fe2f 	bl	800225c <HAL_TIM_Base_Start_IT>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000604:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000608:	2b00      	cmp	r3, #0
 800060a:	d111      	bne.n	8000630 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800060c:	2036      	movs	r0, #54	; 0x36
 800060e:	f000 f985 	bl	800091c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d808      	bhi.n	800062a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	2036      	movs	r0, #54	; 0x36
 800061e:	f000 f961 	bl	80008e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <HAL_InitTick+0xf0>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	e002      	b.n	8000630 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000634:	4618      	mov	r0, r3
 8000636:	3738      	adds	r7, #56	; 0x38
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	431bde83 	.word	0x431bde83
 8000644:	20000120 	.word	0x20000120
 8000648:	40001000 	.word	0x40001000
 800064c:	20000004 	.word	0x20000004

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <TIM6_DAC1_IRQHandler+0x10>)
 8000682:	f001 fe47 	bl	8002314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000120 	.word	0x20000120

08000690 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <SystemInit+0x20>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <SystemInit+0x20>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b8:	f7ff ffea 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006be:	490d      	ldr	r1, [pc, #52]	; (80006f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <LoopForever+0xe>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d4:	4c0a      	ldr	r4, [pc, #40]	; (8000700 <LoopForever+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e2:	f005 f903 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006e6:	f7ff fd73 	bl	80001d0 <main>

080006ea <LoopForever>:

LoopForever:
    b LoopForever
 80006ea:	e7fe      	b.n	80006ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006f8:	08005bf0 	.word	0x08005bf0
  ldr r2, =_sbss
 80006fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000700:	20001b80 	.word	0x20001b80

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f8d8 	bl	80008ce <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	200f      	movs	r0, #15
 8000720:	f7ff ff1c 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff feb0 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_IncTick+0x20>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_IncTick+0x24>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_IncTick+0x24>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000008 	.word	0x20000008
 8000758:	2000016c 	.word	0x2000016c

0800075c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_GetTick+0x14>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	2000016c 	.word	0x2000016c

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <__NVIC_EnableIRQ+0x38>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff4c 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f6:	f7ff ff61 	bl	80007bc <__NVIC_GetPriorityGrouping>
 80008fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	6978      	ldr	r0, [r7, #20]
 8000902:	f7ff ffb1 	bl	8000868 <NVIC_EncodePriority>
 8000906:	4602      	mov	r2, r0
 8000908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff80 	bl	8000814 <__NVIC_SetPriority>
}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff54 	bl	80007d8 <__NVIC_EnableIRQ>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e14e      	b.n	8000be6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8140 	beq.w	8000be0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0303 	and.w	r3, r3, #3
 8000968:	2b01      	cmp	r3, #1
 800096a:	d005      	beq.n	8000978 <HAL_GPIO_Init+0x40>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d130      	bne.n	80009da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	f003 0201 	and.w	r2, r3, #1
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d017      	beq.n	8000a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	6939      	ldr	r1, [r7, #16]
 8000a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 809a 	beq.w	8000be0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	4b55      	ldr	r3, [pc, #340]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a54      	ldr	r2, [pc, #336]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac4:	4a50      	ldr	r2, [pc, #320]	; (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aee:	d013      	beq.n	8000b18 <HAL_GPIO_Init+0x1e0>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <HAL_GPIO_Init+0x2d4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00d      	beq.n	8000b14 <HAL_GPIO_Init+0x1dc>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <HAL_GPIO_Init+0x2d8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d007      	beq.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d101      	bne.n	8000b0c <HAL_GPIO_Init+0x1d4>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	e004      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b10:	2302      	movs	r3, #2
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	f002 0203 	and.w	r2, r2, #3
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	4093      	lsls	r3, r2
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b2a:	4937      	ldr	r1, [pc, #220]	; (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3302      	adds	r3, #2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f47f aea9 	bne.w	8000948 <HAL_GPIO_Init+0x10>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010000 	.word	0x40010000
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	48000800 	.word	0x48000800
 8000c14:	48000c00 	.word	0x48000c00
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f001 b823 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 817d 	beq.w	8000f82 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c88:	4bbc      	ldr	r3, [pc, #752]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d00c      	beq.n	8000cae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c94:	4bb9      	ldr	r3, [pc, #740]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d15c      	bne.n	8000d5a <HAL_RCC_OscConfig+0x10e>
 8000ca0:	4bb6      	ldr	r3, [pc, #728]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cac:	d155      	bne.n	8000d5a <HAL_RCC_OscConfig+0x10e>
 8000cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc6:	fab3 f383 	clz	r3, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	095b      	lsrs	r3, r3, #5
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d102      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x94>
 8000cda:	4ba8      	ldr	r3, [pc, #672]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	e015      	b.n	8000d0c <HAL_RCC_OscConfig+0xc0>
 8000ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cfc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d00:	fa93 f3a3 	rbit	r3, r3
 8000d04:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d08:	4b9c      	ldr	r3, [pc, #624]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d10:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d18:	fa92 f2a2 	rbit	r2, r2
 8000d1c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d20:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	f042 0220 	orr.w	r2, r2, #32
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	f002 021f 	and.w	r2, r2, #31
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 811f 	beq.w	8000f80 <HAL_RCC_OscConfig+0x334>
 8000d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8116 	bne.w	8000f80 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f000 bfaf 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6a:	d106      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12e>
 8000d6c:	4b83      	ldr	r3, [pc, #524]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a82      	ldr	r2, [pc, #520]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e036      	b.n	8000de8 <HAL_RCC_OscConfig+0x19c>
 8000d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x158>
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7b      	ldr	r2, [pc, #492]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b79      	ldr	r3, [pc, #484]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a78      	ldr	r2, [pc, #480]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e021      	b.n	8000de8 <HAL_RCC_OscConfig+0x19c>
 8000da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x184>
 8000db6:	4b71      	ldr	r3, [pc, #452]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a70      	ldr	r2, [pc, #448]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a6d      	ldr	r2, [pc, #436]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e00b      	b.n	8000de8 <HAL_RCC_OscConfig+0x19c>
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a69      	ldr	r2, [pc, #420]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a66      	ldr	r2, [pc, #408]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000de8:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	f023 020f 	bic.w	r2, r3, #15
 8000df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	495f      	ldr	r1, [pc, #380]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d059      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e12:	f7ff fca3 	bl	800075c <HAL_GetTick>
 8000e16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	e00a      	b.n	8000e32 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fc9e 	bl	800075c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b64      	cmp	r3, #100	; 0x64
 8000e2a:	d902      	bls.n	8000e32 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f000 bf43 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8000e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e36:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	fab3 f383 	clz	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	095b      	lsrs	r3, r3, #5
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <HAL_RCC_OscConfig+0x218>
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	e015      	b.n	8000e90 <HAL_RCC_OscConfig+0x244>
 8000e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e68:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e80:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e94:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e98:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e9c:	fa92 f2a2 	rbit	r2, r2
 8000ea0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ea4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ea8:	fab2 f282 	clz	r2, r2
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	f042 0220 	orr.w	r2, r2, #32
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f002 021f 	and.w	r2, r2, #31
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0ab      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1d0>
 8000ec4:	e05d      	b.n	8000f82 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fc49 	bl	800075c <HAL_GetTick>
 8000eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ece:	e00a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fc44 	bl	800075c <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	; 0x64
 8000ede:	d902      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f000 bee9 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8000ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ef2:	fa93 f3a3 	rbit	r3, r3
 8000ef6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000efa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	095b      	lsrs	r3, r3, #5
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d102      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2cc>
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	e015      	b.n	8000f44 <HAL_RCC_OscConfig+0x2f8>
 8000f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f30:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f48:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f4c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f50:	fa92 f2a2 	rbit	r2, r2
 8000f54:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f58:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f5c:	fab2 f282 	clz	r2, r2
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	f042 0220 	orr.w	r2, r2, #32
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	f002 021f 	and.w	r2, r2, #31
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ab      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x284>
 8000f78:	e003      	b.n	8000f82 <HAL_RCC_OscConfig+0x336>
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 817d 	beq.w	8001292 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f98:	4ba6      	ldr	r3, [pc, #664]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fa4:	4ba3      	ldr	r3, [pc, #652]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d172      	bne.n	8001096 <HAL_RCC_OscConfig+0x44a>
 8000fb0:	4ba0      	ldr	r3, [pc, #640]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d16c      	bne.n	8001096 <HAL_RCC_OscConfig+0x44a>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	fab3 f383 	clz	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	095b      	lsrs	r3, r3, #5
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_RCC_OscConfig+0x3a0>
 8000fe6:	4b93      	ldr	r3, [pc, #588]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	e013      	b.n	8001014 <HAL_RCC_OscConfig+0x3c8>
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001004:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001010:	4b88      	ldr	r3, [pc, #544]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	2202      	movs	r2, #2
 8001016:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800101a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800101e:	fa92 f2a2 	rbit	r2, r2
 8001022:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001026:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800102a:	fab2 f282 	clz	r2, r2
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	f042 0220 	orr.w	r2, r2, #32
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f002 021f 	and.w	r2, r2, #31
 800103a:	2101      	movs	r1, #1
 800103c:	fa01 f202 	lsl.w	r2, r1, r2
 8001040:	4013      	ands	r3, r2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00a      	beq.n	800105c <HAL_RCC_OscConfig+0x410>
 8001046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f000 be2e 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b75      	ldr	r3, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	21f8      	movs	r1, #248	; 0xf8
 8001072:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800107a:	fa91 f1a1 	rbit	r1, r1
 800107e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001082:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001086:	fab1 f181 	clz	r1, r1
 800108a:	b2c9      	uxtb	r1, r1
 800108c:	408b      	lsls	r3, r1
 800108e:	4969      	ldr	r1, [pc, #420]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001094:	e0fd      	b.n	8001292 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8088 	beq.w	80011b8 <HAL_RCC_OscConfig+0x56c>
 80010a8:	2301      	movs	r3, #1
 80010aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	2301      	movs	r3, #1
 80010d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fb42 	bl	800075c <HAL_GetTick>
 80010d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fb3d 	bl	800075c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d902      	bls.n	80010f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f000 bde2 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001106:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110a:	fab3 f383 	clz	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	095b      	lsrs	r3, r3, #5
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d102      	bne.n	8001124 <HAL_RCC_OscConfig+0x4d8>
 800111e:	4b45      	ldr	r3, [pc, #276]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	e013      	b.n	800114c <HAL_RCC_OscConfig+0x500>
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800113c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	2202      	movs	r2, #2
 800114e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001152:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001156:	fa92 f2a2 	rbit	r2, r2
 800115a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800115e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001162:	fab2 f282 	clz	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	f042 0220 	orr.w	r2, r2, #32
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	f002 021f 	and.w	r2, r2, #31
 8001172:	2101      	movs	r1, #1
 8001174:	fa01 f202 	lsl.w	r2, r1, r2
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0af      	beq.n	80010de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	21f8      	movs	r1, #248	; 0xf8
 8001194:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800119c:	fa91 f1a1 	rbit	r1, r1
 80011a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011a8:	fab1 f181 	clz	r1, r1
 80011ac:	b2c9      	uxtb	r1, r1
 80011ae:	408b      	lsls	r3, r1
 80011b0:	4920      	ldr	r1, [pc, #128]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
 80011b6:	e06c      	b.n	8001292 <HAL_RCC_OscConfig+0x646>
 80011b8:	2301      	movs	r3, #1
 80011ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	461a      	mov	r2, r3
 80011e0:	2300      	movs	r3, #0
 80011e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff faba 	bl	800075c <HAL_GetTick>
 80011e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fab5 	bl	800075c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d902      	bls.n	8001204 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	f000 bd5a 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d104      	bne.n	8001238 <HAL_RCC_OscConfig+0x5ec>
 800122e:	4b01      	ldr	r3, [pc, #4]	; (8001234 <HAL_RCC_OscConfig+0x5e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	e015      	b.n	8001260 <HAL_RCC_OscConfig+0x614>
 8001234:	40021000 	.word	0x40021000
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001250:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800125c:	4bc8      	ldr	r3, [pc, #800]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	2202      	movs	r2, #2
 8001262:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001266:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800126a:	fa92 f2a2 	rbit	r2, r2
 800126e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001272:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f002 021f 	and.w	r2, r2, #31
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ad      	bne.n	80011ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8110 	beq.w	80014c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d079      	beq.n	80013ac <HAL_RCC_OscConfig+0x760>
 80012b8:	2301      	movs	r3, #1
 80012ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4bab      	ldr	r3, [pc, #684]	; (8001584 <HAL_RCC_OscConfig+0x938>)
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	461a      	mov	r2, r3
 80012de:	2301      	movs	r3, #1
 80012e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fa3b 	bl	800075c <HAL_GetTick>
 80012e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fa36 	bl	800075c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d902      	bls.n	8001302 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f000 bcdb 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001318:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800131c:	2202      	movs	r2, #2
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001324:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fa93 f2a3 	rbit	r2, r3
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	fa93 f2a3 	rbit	r2, r3
 8001352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001356:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800135a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 800135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001368:	2102      	movs	r1, #2
 800136a:	6019      	str	r1, [r3, #0]
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f1a3 	rbit	r1, r3
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001382:	6019      	str	r1, [r3, #0]
  return result;
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0a0      	beq.n	80012ec <HAL_RCC_OscConfig+0x6a0>
 80013aa:	e08d      	b.n	80014c8 <HAL_RCC_OscConfig+0x87c>
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f2a3 	rbit	r2, r3
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ce:	601a      	str	r2, [r3, #0]
  return result;
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_RCC_OscConfig+0x938>)
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	461a      	mov	r2, r3
 80013ea:	2300      	movs	r3, #0
 80013ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff f9b5 	bl	800075c <HAL_GetTick>
 80013f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f8:	f7ff f9b0 	bl	800075c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d902      	bls.n	800140e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	f000 bc55 	b.w	8001cb8 <HAL_RCC_OscConfig+0x106c>
 800140e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001412:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fa93 f2a3 	rbit	r2, r3
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	fa93 f2a3 	rbit	r2, r3
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001478:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001486:	2102      	movs	r1, #2
 8001488:	6019      	str	r1, [r3, #0]
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fa93 f1a3 	rbit	r1, r3
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014a0:	6019      	str	r1, [r3, #0]
  return result;
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d197      	bne.n	80013f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 81a1 	beq.w	8001820 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d116      	bne.n	800151e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fa:	61d3      	str	r3, [r2, #28]
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001516:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11a      	bne.n	8001560 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff f911 	bl	800075c <HAL_GetTick>
 800153a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	e009      	b.n	8001554 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001540:	f7ff f90c 	bl	800075c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b64      	cmp	r3, #100	; 0x64
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e3b1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_RCC_OscConfig+0x93c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ef      	beq.n	8001540 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d10d      	bne.n	800158c <HAL_RCC_OscConfig+0x940>
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a02      	ldr	r2, [pc, #8]	; (8001580 <HAL_RCC_OscConfig+0x934>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e03c      	b.n	80015f8 <HAL_RCC_OscConfig+0x9ac>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	10908120 	.word	0x10908120
 8001588:	40007000 	.word	0x40007000
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x96a>
 800159c:	4bc1      	ldr	r3, [pc, #772]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4ac0      	ldr	r2, [pc, #768]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	4bbe      	ldr	r3, [pc, #760]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4abd      	ldr	r2, [pc, #756]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e020      	b.n	80015f8 <HAL_RCC_OscConfig+0x9ac>
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x994>
 80015c6:	4bb7      	ldr	r3, [pc, #732]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4ab6      	ldr	r2, [pc, #728]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	4bb4      	ldr	r3, [pc, #720]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4ab3      	ldr	r2, [pc, #716]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6213      	str	r3, [r2, #32]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0x9ac>
 80015e0:	4bb0      	ldr	r3, [pc, #704]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4aaf      	ldr	r2, [pc, #700]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4bad      	ldr	r3, [pc, #692]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4aac      	ldr	r2, [pc, #688]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8081 	beq.w	800170c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff f8a7 	bl	800075c <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff f8a2 	bl	800075c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e345      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001672:	601a      	str	r2, [r3, #0]
  return result;
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800167c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d102      	bne.n	8001698 <HAL_RCC_OscConfig+0xa4c>
 8001692:	4b84      	ldr	r3, [pc, #528]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	e013      	b.n	80016c0 <HAL_RCC_OscConfig+0xa74>
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016c8:	2102      	movs	r1, #2
 80016ca:	6011      	str	r1, [r2, #0]
 80016cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	fa92 f1a2 	rbit	r1, r2
 80016da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016e2:	6011      	str	r1, [r2, #0]
  return result;
 80016e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d084      	beq.n	8001614 <HAL_RCC_OscConfig+0x9c8>
 800170a:	e07f      	b.n	800180c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff f826 	bl	800075c <HAL_GetTick>
 8001710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff f821 	bl	800075c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e2c4      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001736:	2202      	movs	r2, #2
 8001738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800175a:	2202      	movs	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001774:	601a      	str	r2, [r3, #0]
  return result;
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800177e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <HAL_RCC_OscConfig+0xb4e>
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	e013      	b.n	80017c2 <HAL_RCC_OscConfig+0xb76>
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017ca:	2102      	movs	r1, #2
 80017cc:	6011      	str	r1, [r2, #0]
 80017ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	fa92 f1a2 	rbit	r1, r2
 80017dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017e4:	6011      	str	r1, [r2, #0]
  return result;
 80017e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d184      	bne.n	8001716 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800180c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 800181a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8242 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_RCC_OscConfig+0xc58>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	f000 8213 	beq.w	8001c66 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b02      	cmp	r3, #2
 800184e:	f040 8162 	bne.w	8001b16 <HAL_RCC_OscConfig+0xeca>
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800185a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800185e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f2a3 	rbit	r2, r3
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001876:	601a      	str	r2, [r3, #0]
  return result;
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001880:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7fe ff60 	bl	800075c <HAL_GetTick>
 800189c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a0:	e00c      	b.n	80018bc <HAL_RCC_OscConfig+0xc70>
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a8:	f7fe ff58 	bl	800075c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1fd      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018e0:	601a      	str	r2, [r3, #0]
  return result;
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0xcba>
 8001900:	4bb0      	ldr	r3, [pc, #704]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e027      	b.n	8001956 <HAL_RCC_OscConfig+0xd0a>
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800190e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	4b9c      	ldr	r3, [pc, #624]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800195a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800195e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001962:	6011      	str	r1, [r2, #0]
 8001964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001968:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	fa92 f1a2 	rbit	r1, r2
 8001972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001976:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800197a:	6011      	str	r1, [r2, #0]
  return result;
 800197c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001980:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d182      	bne.n	80018a8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	430b      	orrs	r3, r1
 80019c4:	497f      	ldr	r1, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019ee:	601a      	str	r2, [r3, #0]
  return result;
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe fea4 	bl	800075c <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7fe fe9f 	bl	800075c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e144      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a52:	601a      	str	r2, [r3, #0]
  return result;
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0xe2c>
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e027      	b.n	8001ac8 <HAL_RCC_OscConfig+0xe7c>
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001acc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ad0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ad4:	6011      	str	r1, [r2, #0]
 8001ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ada:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	fa92 f1a2 	rbit	r1, r2
 8001ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001aec:	6011      	str	r1, [r2, #0]
  return result;
 8001aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d082      	beq.n	8001a1a <HAL_RCC_OscConfig+0xdce>
 8001b14:	e0cf      	b.n	8001cb6 <HAL_RCC_OscConfig+0x106a>
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fa93 f2a3 	rbit	r2, r3
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b3a:	601a      	str	r2, [r3, #0]
  return result;
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	461a      	mov	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7fe fdfe 	bl	800075c <HAL_GetTick>
 8001b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fdf9 	bl	800075c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e09e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ba8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d104      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xf7c>
 8001bbe:	4b01      	ldr	r3, [pc, #4]	; (8001bc4 <HAL_RCC_OscConfig+0xf78>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	e029      	b.n	8001c18 <HAL_RCC_OscConfig+0xfcc>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_OscConfig+0x1078>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	fa92 f1a2 	rbit	r1, r2
 8001c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c38:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c3c:	6011      	str	r1, [r2, #0]
  return result;
 8001c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c42:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d180      	bne.n	8001b66 <HAL_RCC_OscConfig+0xf1a>
 8001c64:	e027      	b.n	8001cb6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e01e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_OscConfig+0x1078>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c86:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d10b      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b09e      	sub	sp, #120	; 0x78
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e162      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b90      	ldr	r3, [pc, #576]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d910      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b8d      	ldr	r3, [pc, #564]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	498b      	ldr	r1, [pc, #556]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b89      	ldr	r3, [pc, #548]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e14a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	497f      	ldr	r1, [pc, #508]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80dc 	beq.w	8001ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d13c      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xf6>
 8001d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xa6>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	e00f      	b.n	8001d8e <HAL_RCC_ClockConfig+0xc6>
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d80:	663b      	str	r3, [r7, #96]	; 0x60
 8001d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d17b      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0f3      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d13c      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x178>
 8001dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x128>
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_ClockConfig+0x148>
 8001df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
 8001e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e14:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f002 021f 	and.w	r2, r2, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d13a      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b2      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
 8001e40:	2302      	movs	r3, #2
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e00d      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1bc>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2202      	movs	r2, #2
 8001e86:	61ba      	str	r2, [r7, #24]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	617a      	str	r2, [r7, #20]
  return result;
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e079      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	491a      	ldr	r1, [pc, #104]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fc4a 	bl	800075c <HAL_GetTick>
 8001ec8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fc46 	bl	800075c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e061      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d214      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4906      	ldr	r1, [pc, #24]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e040      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4912      	ldr	r1, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f6a:	f000 f829 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4601      	mov	r1, r0
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	22f0      	movs	r2, #240	; 0xf0
 8001f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	60fa      	str	r2, [r7, #12]
  return result;
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	40d3      	lsrs	r3, r2
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	fa21 f303 	lsr.w	r3, r1, r3
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_RCC_ClockConfig+0x2f4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fadc 	bl	800055c <HAL_InitTick>
  
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3778      	adds	r7, #120	; 0x78
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08005b50 	.word	0x08005b50
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fee:	e03c      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ff2:	623b      	str	r3, [r7, #32]
      break;
 8001ff4:	e03c      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ffc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002000:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	fa92 f2a2 	rbit	r2, r2
 8002008:	607a      	str	r2, [r7, #4]
  return result;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	40d3      	lsrs	r3, r2
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc0>)
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	220f      	movs	r2, #15
 8002024:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	60fa      	str	r2, [r7, #12]
  return result;
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_RCC_GetSysClockFreq+0xcc>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e004      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_RCC_GetSysClockFreq+0xd0>)
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	623b      	str	r3, [r7, #32]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800206c:	623b      	str	r3, [r7, #32]
      break;
 800206e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002070:	6a3b      	ldr	r3, [r7, #32]
}
 8002072:	4618      	mov	r0, r3
 8002074:	372c      	adds	r7, #44	; 0x2c
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	08005b68 	.word	0x08005b68
 800208c:	08005b78 	.word	0x08005b78
 8002090:	003d0900 	.word	0x003d0900

08002094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020b2:	f7ff ffef 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	603a      	str	r2, [r7, #0]
  return result;
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	40d3      	lsrs	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08005b60 	.word	0x08005b60

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020f6:	f7ff ffcd 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020fa:	4601      	mov	r1, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002104:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	fa92 f2a2 	rbit	r2, r2
 8002110:	603a      	str	r2, [r7, #0]
  return result;
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	40d3      	lsrs	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x40>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	08005b60 	.word	0x08005b60

08002134 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	220f      	movs	r2, #15
 8002142:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_GetClockConfig+0x5c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_RCC_GetClockConfig+0x60>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e049      	b.n	800223e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f841 	bl	8002246 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 f9e4 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e040      	b.n	80022f6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_TIM_Base_Start_IT+0xa8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d009      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a18      	ldr	r2, [pc, #96]	; (8002308 <HAL_TIM_Base_Start_IT+0xac>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x58>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_TIM_Base_Start_IT+0xb0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d115      	bne.n	80022e0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_TIM_Base_Start_IT+0xb4>)
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d015      	beq.n	80022f2 <HAL_TIM_Base_Start_IT+0x96>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d011      	beq.n	80022f2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022de:	e008      	b.n	80022f2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e000      	b.n	80022f4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40000400 	.word	0x40000400
 800230c:	40014000 	.word	0x40014000
 8002310:	00010007 	.word	0x00010007

08002314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0202 	mvn.w	r2, #2
 8002340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f905 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8f7 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f908 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d122      	bne.n	80023c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b04      	cmp	r3, #4
 800238a:	d11b      	bne.n	80023c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0204 	mvn.w	r2, #4
 8002394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8db 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8cd 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f8de 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d122      	bne.n	8002418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d11b      	bne.n	8002418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0208 	mvn.w	r2, #8
 80023e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2204      	movs	r2, #4
 80023ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8b1 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8a3 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f8b4 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b10      	cmp	r3, #16
 8002424:	d122      	bne.n	800246c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b10      	cmp	r3, #16
 8002432:	d11b      	bne.n	800246c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0210 	mvn.w	r2, #16
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2208      	movs	r2, #8
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f887 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f879 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f88a 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10e      	bne.n	8002498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0201 	mvn.w	r2, #1
 8002490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fd ffa4 	bl	80003e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d10e      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d107      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8f2 	bl	80026a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d2:	d10e      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d107      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8e5 	bl	80026bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d10e      	bne.n	800251e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d107      	bne.n	800251e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f838 	bl	800258e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b20      	cmp	r3, #32
 800252a:	d10e      	bne.n	800254a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d107      	bne.n	800254a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f06f 0220 	mvn.w	r2, #32
 8002542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f8a5 	bl	8002694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a32      	ldr	r2, [pc, #200]	; (8002680 <TIM_Base_SetConfig+0xdc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d007      	beq.n	80025cc <TIM_Base_SetConfig+0x28>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d003      	beq.n	80025cc <TIM_Base_SetConfig+0x28>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a2f      	ldr	r2, [pc, #188]	; (8002684 <TIM_Base_SetConfig+0xe0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d108      	bne.n	80025de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a27      	ldr	r2, [pc, #156]	; (8002680 <TIM_Base_SetConfig+0xdc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <TIM_Base_SetConfig+0x6a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d00f      	beq.n	800260e <TIM_Base_SetConfig+0x6a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <TIM_Base_SetConfig+0xe0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <TIM_Base_SetConfig+0x6a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a23      	ldr	r2, [pc, #140]	; (8002688 <TIM_Base_SetConfig+0xe4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0x6a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <TIM_Base_SetConfig+0xe8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0x6a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a21      	ldr	r2, [pc, #132]	; (8002690 <TIM_Base_SetConfig+0xec>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <TIM_Base_SetConfig+0xdc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00b      	beq.n	8002664 <TIM_Base_SetConfig+0xc0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <TIM_Base_SetConfig+0xe4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <TIM_Base_SetConfig+0xc0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0d      	ldr	r2, [pc, #52]	; (800268c <TIM_Base_SetConfig+0xe8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_Base_SetConfig+0xc0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <TIM_Base_SetConfig+0xec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d103      	bne.n	800266c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	615a      	str	r2, [r3, #20]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400
 8002688:	40014000 	.word	0x40014000
 800268c:	40014400 	.word	0x40014400
 8002690:	40014800 	.word	0x40014800

08002694 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e040      	b.n	8002764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fd fef0 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f82c 	bl	800276c <UART_SetConfig>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e022      	b.n	8002764 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f956 	bl	80029d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800273a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800274a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f9dd 	bl	8002b1c <UART_CheckIdleState>
 8002762:	4603      	mov	r3, r0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b8a      	ldr	r3, [pc, #552]	; (80029c0 <UART_SetConfig+0x254>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	6979      	ldr	r1, [r7, #20]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a78      	ldr	r2, [pc, #480]	; (80029c4 <UART_SetConfig+0x258>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d120      	bne.n	800282a <UART_SetConfig+0xbe>
 80027e8:	4b77      	ldr	r3, [pc, #476]	; (80029c8 <UART_SetConfig+0x25c>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d817      	bhi.n	8002824 <UART_SetConfig+0xb8>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <UART_SetConfig+0x90>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002819 	.word	0x08002819
 8002804:	0800281f 	.word	0x0800281f
 8002808:	08002813 	.word	0x08002813
 800280c:	2300      	movs	r3, #0
 800280e:	77fb      	strb	r3, [r7, #31]
 8002810:	e01d      	b.n	800284e <UART_SetConfig+0xe2>
 8002812:	2302      	movs	r3, #2
 8002814:	77fb      	strb	r3, [r7, #31]
 8002816:	e01a      	b.n	800284e <UART_SetConfig+0xe2>
 8002818:	2304      	movs	r3, #4
 800281a:	77fb      	strb	r3, [r7, #31]
 800281c:	e017      	b.n	800284e <UART_SetConfig+0xe2>
 800281e:	2308      	movs	r3, #8
 8002820:	77fb      	strb	r3, [r7, #31]
 8002822:	e014      	b.n	800284e <UART_SetConfig+0xe2>
 8002824:	2310      	movs	r3, #16
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	e011      	b.n	800284e <UART_SetConfig+0xe2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a67      	ldr	r2, [pc, #412]	; (80029cc <UART_SetConfig+0x260>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d102      	bne.n	800283a <UART_SetConfig+0xce>
 8002834:	2300      	movs	r3, #0
 8002836:	77fb      	strb	r3, [r7, #31]
 8002838:	e009      	b.n	800284e <UART_SetConfig+0xe2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a64      	ldr	r2, [pc, #400]	; (80029d0 <UART_SetConfig+0x264>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <UART_SetConfig+0xde>
 8002844:	2300      	movs	r3, #0
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e001      	b.n	800284e <UART_SetConfig+0xe2>
 800284a:	2310      	movs	r3, #16
 800284c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002856:	d15a      	bne.n	800290e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002858:	7ffb      	ldrb	r3, [r7, #31]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d827      	bhi.n	80028ae <UART_SetConfig+0x142>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <UART_SetConfig+0xf8>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002889 	.word	0x08002889
 8002868:	08002891 	.word	0x08002891
 800286c:	08002899 	.word	0x08002899
 8002870:	080028af 	.word	0x080028af
 8002874:	0800289f 	.word	0x0800289f
 8002878:	080028af 	.word	0x080028af
 800287c:	080028af 	.word	0x080028af
 8002880:	080028af 	.word	0x080028af
 8002884:	080028a7 	.word	0x080028a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002888:	f7ff fc10 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 800288c:	61b8      	str	r0, [r7, #24]
        break;
 800288e:	e013      	b.n	80028b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002890:	f7ff fc2e 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8002894:	61b8      	str	r0, [r7, #24]
        break;
 8002896:	e00f      	b.n	80028b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002898:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <UART_SetConfig+0x268>)
 800289a:	61bb      	str	r3, [r7, #24]
        break;
 800289c:	e00c      	b.n	80028b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800289e:	f7ff fb8f 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80028a2:	61b8      	str	r0, [r7, #24]
        break;
 80028a4:	e008      	b.n	80028b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	61bb      	str	r3, [r7, #24]
        break;
 80028ac:	e004      	b.n	80028b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	77bb      	strb	r3, [r7, #30]
        break;
 80028b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d074      	beq.n	80029a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	005a      	lsls	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	d916      	bls.n	8002908 <UART_SetConfig+0x19c>
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d212      	bcs.n	8002908 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f023 030f 	bic.w	r3, r3, #15
 80028ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	89fa      	ldrh	r2, [r7, #14]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	e04f      	b.n	80029a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	77bb      	strb	r3, [r7, #30]
 800290c:	e04c      	b.n	80029a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d828      	bhi.n	8002966 <UART_SetConfig+0x1fa>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <UART_SetConfig+0x1b0>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	08002941 	.word	0x08002941
 8002920:	08002949 	.word	0x08002949
 8002924:	08002951 	.word	0x08002951
 8002928:	08002967 	.word	0x08002967
 800292c:	08002957 	.word	0x08002957
 8002930:	08002967 	.word	0x08002967
 8002934:	08002967 	.word	0x08002967
 8002938:	08002967 	.word	0x08002967
 800293c:	0800295f 	.word	0x0800295f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002940:	f7ff fbb4 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8002944:	61b8      	str	r0, [r7, #24]
        break;
 8002946:	e013      	b.n	8002970 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002948:	f7ff fbd2 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 800294c:	61b8      	str	r0, [r7, #24]
        break;
 800294e:	e00f      	b.n	8002970 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002950:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <UART_SetConfig+0x268>)
 8002952:	61bb      	str	r3, [r7, #24]
        break;
 8002954:	e00c      	b.n	8002970 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002956:	f7ff fb33 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800295a:	61b8      	str	r0, [r7, #24]
        break;
 800295c:	e008      	b.n	8002970 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800295e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002962:	61bb      	str	r3, [r7, #24]
        break;
 8002964:	e004      	b.n	8002970 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	77bb      	strb	r3, [r7, #30]
        break;
 800296e:	bf00      	nop
    }

    if (pclk != 0U)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d018      	beq.n	80029a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085a      	lsrs	r2, r3, #1
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	441a      	add	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b0f      	cmp	r3, #15
 800298e:	d909      	bls.n	80029a4 <UART_SetConfig+0x238>
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002996:	d205      	bcs.n	80029a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	e001      	b.n	80029a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80029b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	efff69f3 	.word	0xefff69f3
 80029c4:	40013800 	.word	0x40013800
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40004400 	.word	0x40004400
 80029d0:	40004800 	.word	0x40004800
 80029d4:	007a1200 	.word	0x007a1200

080029d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01a      	beq.n	8002aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad6:	d10a      	bne.n	8002aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	605a      	str	r2, [r3, #4]
  }
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b098      	sub	sp, #96	; 0x60
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b2c:	f7fd fe16 	bl	800075c <HAL_GetTick>
 8002b30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d12e      	bne.n	8002b9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f88c 	bl	8002c6c <UART_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d021      	beq.n	8002b9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b80:	e841 2300 	strex	r3, r2, [r1]
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e6      	bne.n	8002b5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e062      	b.n	8002c64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d149      	bne.n	8002c40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f856 	bl	8002c6c <UART_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d03c      	beq.n	8002c40 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
 8002be6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e6      	bne.n	8002bc6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3308      	adds	r3, #8
 8002c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c18:	61fa      	str	r2, [r7, #28]
 8002c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1c:	69b9      	ldr	r1, [r7, #24]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	e841 2300 	strex	r3, r2, [r1]
 8002c24:	617b      	str	r3, [r7, #20]
   return(result);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e5      	bne.n	8002bf8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e011      	b.n	8002c64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3758      	adds	r7, #88	; 0x58
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7c:	e049      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c84:	d045      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fd fd69 	bl	800075c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e048      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d031      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d110      	bne.n	8002cde <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f838 	bl	8002d3a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e029      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cec:	d111      	bne.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f81e 	bl	8002d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e00f      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d0a6      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b095      	sub	sp, #84	; 0x54
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	643b      	str	r3, [r7, #64]	; 0x40
 8002d62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d68:	e841 2300 	strex	r3, r2, [r1]
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e6      	bne.n	8002d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3308      	adds	r3, #8
 8002d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3308      	adds	r3, #8
 8002d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e5      	bne.n	8002d74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d118      	bne.n	8002de2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f023 0310 	bic.w	r3, r3, #16
 8002dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	613b      	str	r3, [r7, #16]
   return(result);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e6      	bne.n	8002db0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002df6:	bf00      	nop
 8002df8:	3754      	adds	r7, #84	; 0x54
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e0a:	f3ef 8305 	mrs	r3, IPSR
 8002e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e16:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1a:	607b      	str	r3, [r7, #4]
  return(result);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <osKernelInitialize+0x32>
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <osKernelInitialize+0x64>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d109      	bne.n	8002e3e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e36:	f06f 0305 	mvn.w	r3, #5
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e00c      	b.n	8002e58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <osKernelInitialize+0x64>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <osKernelInitialize+0x64>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e002      	b.n	8002e58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e58:	68fb      	ldr	r3, [r7, #12]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000170 	.word	0x20000170

08002e6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e72:	f3ef 8305 	mrs	r3, IPSR
 8002e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e82:	607b      	str	r3, [r7, #4]
  return(result);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <osKernelStart+0x32>
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <osKernelStart+0x64>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d109      	bne.n	8002ea6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e92:	f3ef 8311 	mrs	r3, BASEPRI
 8002e96:	603b      	str	r3, [r7, #0]
  return(result);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e9e:	f06f 0305 	mvn.w	r3, #5
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e00e      	b.n	8002ec4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <osKernelStart+0x64>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <osKernelStart+0x64>)
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002eb4:	f001 f898 	bl	8003fe8 <vTaskStartScheduler>
      stat = osOK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e002      	b.n	8002ec4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000170 	.word	0x20000170

08002ed4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b092      	sub	sp, #72	; 0x48
 8002ed8:	af04      	add	r7, sp, #16
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ee4:	f3ef 8305 	mrs	r3, IPSR
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 8094 	bne.w	800301a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef6:	623b      	str	r3, [r7, #32]
  return(result);
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 808d 	bne.w	800301a <osThreadNew+0x146>
 8002f00:	4b48      	ldr	r3, [pc, #288]	; (8003024 <osThreadNew+0x150>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d106      	bne.n	8002f16 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f08:	f3ef 8311 	mrs	r3, BASEPRI
 8002f0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 8082 	bne.w	800301a <osThreadNew+0x146>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d07e      	beq.n	800301a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002f20:	2318      	movs	r3, #24
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002f24:	2300      	movs	r3, #0
 8002f26:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002f28:	f107 031b 	add.w	r3, r7, #27
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d045      	beq.n	8002fc6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <osThreadNew+0x74>
        name = attr->name;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <osThreadNew+0x9a>
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b38      	cmp	r3, #56	; 0x38
 8002f60:	d805      	bhi.n	8002f6e <osThreadNew+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <osThreadNew+0x9e>
        return (NULL);
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e054      	b.n	800301c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00e      	beq.n	8002fa8 <osThreadNew+0xd4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2bbb      	cmp	r3, #187	; 0xbb
 8002f90:	d90a      	bls.n	8002fa8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d006      	beq.n	8002fa8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <osThreadNew+0xd4>
        mem = 1;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa6:	e010      	b.n	8002fca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10c      	bne.n	8002fca <osThreadNew+0xf6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d108      	bne.n	8002fca <osThreadNew+0xf6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <osThreadNew+0xf6>
          mem = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc4:	e001      	b.n	8002fca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d110      	bne.n	8002ff2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fd8:	9202      	str	r2, [sp, #8]
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fe1a 	bl	8003c20 <xTaskCreateStatic>
 8002fec:	4603      	mov	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e013      	b.n	800301a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d110      	bne.n	800301a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fe64 	bl	8003cd8 <xTaskCreate>
 8003010:	4603      	mov	r3, r0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <osThreadNew+0x146>
          hTask = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800301a:	697b      	ldr	r3, [r7, #20]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3738      	adds	r7, #56	; 0x38
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000170 	.word	0x20000170

08003028 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003030:	f3ef 8305 	mrs	r3, IPSR
 8003034:	613b      	str	r3, [r7, #16]
  return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303c:	f3ef 8310 	mrs	r3, PRIMASK
 8003040:	60fb      	str	r3, [r7, #12]
  return(result);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <osDelay+0x34>
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <osDelay+0x58>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d109      	bne.n	8003064 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003050:	f3ef 8311 	mrs	r3, BASEPRI
 8003054:	60bb      	str	r3, [r7, #8]
  return(result);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <osDelay+0x3c>
    stat = osErrorISR;
 800305c:	f06f 0305 	mvn.w	r3, #5
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e007      	b.n	8003074 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <osDelay+0x4c>
      vTaskDelay(ticks);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 ff86 	bl	8003f80 <vTaskDelay>
    }
  }

  return (stat);
 8003074:	697b      	ldr	r3, [r7, #20]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000170 	.word	0x20000170

08003084 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003094:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4a06      	ldr	r2, [pc, #24]	; (80030b4 <vApplicationGetIdleTaskMemory+0x30>)
 800309a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000174 	.word	0x20000174
 80030b4:	20000230 	.word	0x20000230

080030b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80030c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <vApplicationGetTimerTaskMemory+0x30>)
 80030ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	601a      	str	r2, [r3, #0]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	20000430 	.word	0x20000430
 80030e8:	200004ec 	.word	0x200004ec

080030ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f103 0208 	add.w	r2, r3, #8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003104:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f103 0208 	add.w	r2, r3, #8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f103 0208 	add.w	r2, r3, #8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a4:	d103      	bne.n	80031ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	e00c      	b.n	80031c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3308      	adds	r3, #8
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e002      	b.n	80031bc <vListInsert+0x2e>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d2f6      	bcs.n	80031b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6892      	ldr	r2, [r2, #8]
 8003216:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6852      	ldr	r2, [r2, #4]
 8003220:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d103      	bne.n	8003234 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	1e5a      	subs	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800327e:	f002 f839 	bl	80052f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	68f9      	ldr	r1, [r7, #12]
 800328c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	441a      	add	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	3b01      	subs	r3, #1
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	441a      	add	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	22ff      	movs	r2, #255	; 0xff
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d114      	bne.n	80032fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01a      	beq.n	8003312 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3310      	adds	r3, #16
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f91f 	bl	8004524 <xTaskRemoveFromEventList>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <xQueueGenericReset+0xcc>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	e009      	b.n	8003312 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3310      	adds	r3, #16
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fef2 	bl	80030ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3324      	adds	r3, #36	; 0x24
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff feed 	bl	80030ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003312:	f002 f81f 	bl	8005354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003316:	2301      	movs	r3, #1
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	e000ed04 	.word	0xe000ed04

08003324 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <xQueueGenericCreateStatic+0x52>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <xQueueGenericCreateStatic+0x56>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <xQueueGenericCreateStatic+0x58>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	623b      	str	r3, [r7, #32]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <xQueueGenericCreateStatic+0x7e>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <xQueueGenericCreateStatic+0x82>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <xQueueGenericCreateStatic+0x84>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	61fb      	str	r3, [r7, #28]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033c2:	2350      	movs	r3, #80	; 0x50
 80033c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b50      	cmp	r3, #80	; 0x50
 80033ca:	d00a      	beq.n	80033e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	61bb      	str	r3, [r7, #24]
}
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00d      	beq.n	8003408 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f805 	bl	8003412 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800340a:	4618      	mov	r0, r3
 800340c:	3730      	adds	r7, #48	; 0x30
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e002      	b.n	8003434 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003440:	2101      	movs	r1, #1
 8003442:	69b8      	ldr	r0, [r7, #24]
 8003444:	f7ff ff06 	bl	8003254 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	; 0x38
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003466:	2300      	movs	r3, #0
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <xQueueGenericSend+0x32>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d103      	bne.n	8003498 <xQueueGenericSend+0x40>
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <xQueueGenericSend+0x44>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <xQueueGenericSend+0x46>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <xQueueGenericSend+0x60>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d103      	bne.n	80034c6 <xQueueGenericSend+0x6e>
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <xQueueGenericSend+0x72>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <xQueueGenericSend+0x74>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	623b      	str	r3, [r7, #32]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034e6:	f001 f9e5 	bl	80048b4 <xTaskGetSchedulerState>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <xQueueGenericSend+0x9e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <xQueueGenericSend+0xa2>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <xQueueGenericSend+0xa4>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <xQueueGenericSend+0xbe>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	61fb      	str	r3, [r7, #28]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003516:	f001 feed 	bl	80052f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <xQueueGenericSend+0xd4>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d129      	bne.n	8003580 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003532:	f000 fa07 	bl	8003944 <prvCopyDataToQueue>
 8003536:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	4618      	mov	r0, r3
 8003546:	f000 ffed 	bl	8004524 <xTaskRemoveFromEventList>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003550:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <xQueueGenericSend+0x1f8>)
 8003552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	e00a      	b.n	8003578 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003568:	4b39      	ldr	r3, [pc, #228]	; (8003650 <xQueueGenericSend+0x1f8>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003578:	f001 feec 	bl	8005354 <vPortExitCritical>
				return pdPASS;
 800357c:	2301      	movs	r3, #1
 800357e:	e063      	b.n	8003648 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003586:	f001 fee5 	bl	8005354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800358a:	2300      	movs	r3, #0
 800358c:	e05c      	b.n	8003648 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4618      	mov	r0, r3
 800359a:	f001 f827 	bl	80045ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800359e:	2301      	movs	r3, #1
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035a2:	f001 fed7 	bl	8005354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035a6:	f000 fd8f 	bl	80040c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035aa:	f001 fea3 	bl	80052f4 <vPortEnterCritical>
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ba:	d103      	bne.n	80035c4 <xQueueGenericSend+0x16c>
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d0:	d103      	bne.n	80035da <xQueueGenericSend+0x182>
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035da:	f001 febb 	bl	8005354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035de:	1d3a      	adds	r2, r7, #4
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 f816 	bl	8004618 <xTaskCheckForTimeOut>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d124      	bne.n	800363c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035f4:	f000 fa9e 	bl	8003b34 <prvIsQueueFull>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d018      	beq.n	8003630 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	3310      	adds	r3, #16
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f000 ff3c 	bl	8004484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800360c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360e:	f000 fa29 	bl	8003a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003612:	f000 fd67 	bl	80040e4 <xTaskResumeAll>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	f47f af7c 	bne.w	8003516 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <xQueueGenericSend+0x1f8>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	e772      	b.n	8003516 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003632:	f000 fa17 	bl	8003a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003636:	f000 fd55 	bl	80040e4 <xTaskResumeAll>
 800363a:	e76c      	b.n	8003516 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800363c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800363e:	f000 fa11 	bl	8003a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003642:	f000 fd4f 	bl	80040e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003646:	2300      	movs	r3, #0
		}
	}
}
 8003648:	4618      	mov	r0, r3
 800364a:	3738      	adds	r7, #56	; 0x38
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	; 0x38
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800367e:	bf00      	nop
 8003680:	e7fe      	b.n	8003680 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <xQueueGenericSendFromISR+0x3c>
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <xQueueGenericSendFromISR+0x40>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <xQueueGenericSendFromISR+0x42>
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	623b      	str	r3, [r7, #32]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d103      	bne.n	80036be <xQueueGenericSendFromISR+0x6a>
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <xQueueGenericSendFromISR+0x6e>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xQueueGenericSendFromISR+0x70>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	61fb      	str	r3, [r7, #28]
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036de:	f001 feeb 	bl	80054b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036e2:	f3ef 8211 	mrs	r2, BASEPRI
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	61ba      	str	r2, [r7, #24]
 80036f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <xQueueGenericSendFromISR+0xbc>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d12c      	bne.n	800376a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003720:	f000 f910 	bl	8003944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003724:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800372c:	d112      	bne.n	8003754 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	3324      	adds	r3, #36	; 0x24
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fef2 	bl	8004524 <xTaskRemoveFromEventList>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e007      	b.n	8003764 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003758:	3301      	adds	r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	b25a      	sxtb	r2, r3
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003764:	2301      	movs	r3, #1
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003768:	e001      	b.n	800376e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800376a:	2300      	movs	r3, #0
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003778:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800377c:	4618      	mov	r0, r3
 800377e:	3738      	adds	r7, #56	; 0x38
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	; 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <xQueueReceive+0x30>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	623b      	str	r3, [r7, #32]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <xQueueReceive+0x3e>
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <xQueueReceive+0x42>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueReceive+0x44>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueReceive+0x5e>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61fb      	str	r3, [r7, #28]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037e2:	f001 f867 	bl	80048b4 <xTaskGetSchedulerState>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <xQueueReceive+0x6e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <xQueueReceive+0x72>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueReceive+0x74>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueReceive+0x8e>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61bb      	str	r3, [r7, #24]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003812:	f001 fd6f 	bl	80052f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01f      	beq.n	8003862 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003826:	f000 f8f7 	bl	8003a18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00f      	beq.n	800385a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	3310      	adds	r3, #16
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fe70 	bl	8004524 <xTaskRemoveFromEventList>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <xQueueReceive+0x1bc>)
 800384c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800385a:	f001 fd7b 	bl	8005354 <vPortExitCritical>
				return pdPASS;
 800385e:	2301      	movs	r3, #1
 8003860:	e069      	b.n	8003936 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003868:	f001 fd74 	bl	8005354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800386c:	2300      	movs	r3, #0
 800386e:	e062      	b.n	8003936 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003876:	f107 0310 	add.w	r3, r7, #16
 800387a:	4618      	mov	r0, r3
 800387c:	f000 feb6 	bl	80045ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003884:	f001 fd66 	bl	8005354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003888:	f000 fc1e 	bl	80040c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800388c:	f001 fd32 	bl	80052f4 <vPortEnterCritical>
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003896:	b25b      	sxtb	r3, r3
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800389c:	d103      	bne.n	80038a6 <xQueueReceive+0x122>
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b2:	d103      	bne.n	80038bc <xQueueReceive+0x138>
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038bc:	f001 fd4a 	bl	8005354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038c0:	1d3a      	adds	r2, r7, #4
 80038c2:	f107 0310 	add.w	r3, r7, #16
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fea5 	bl	8004618 <xTaskCheckForTimeOut>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d123      	bne.n	800391c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d6:	f000 f917 	bl	8003b08 <prvIsQueueEmpty>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d017      	beq.n	8003910 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	3324      	adds	r3, #36	; 0x24
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fdcb 	bl	8004484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f0:	f000 f8b8 	bl	8003a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038f4:	f000 fbf6 	bl	80040e4 <xTaskResumeAll>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d189      	bne.n	8003812 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <xQueueReceive+0x1bc>)
 8003900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	e780      	b.n	8003812 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003912:	f000 f8a7 	bl	8003a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003916:	f000 fbe5 	bl	80040e4 <xTaskResumeAll>
 800391a:	e77a      	b.n	8003812 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800391c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800391e:	f000 f8a1 	bl	8003a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003922:	f000 fbdf 	bl	80040e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003928:	f000 f8ee 	bl	8003b08 <prvIsQueueEmpty>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	f43f af6f 	beq.w	8003812 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003936:	4618      	mov	r0, r3
 8003938:	3730      	adds	r7, #48	; 0x30
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10d      	bne.n	800397e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d14d      	bne.n	8003a06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ffbe 	bl	80048f0 <xTaskPriorityDisinherit>
 8003974:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	e043      	b.n	8003a06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d119      	bne.n	80039b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6898      	ldr	r0, [r3, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	461a      	mov	r2, r3
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	f001 ffd2 	bl	8005938 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d32b      	bcc.n	8003a06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	e026      	b.n	8003a06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68d8      	ldr	r0, [r3, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	461a      	mov	r2, r3
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	f001 ffb8 	bl	8005938 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	425b      	negs	r3, r3
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d207      	bcs.n	80039f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	425b      	negs	r3, r3
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d105      	bne.n	8003a06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a0e:	697b      	ldr	r3, [r7, #20]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	441a      	add	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d303      	bcc.n	8003a4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	461a      	mov	r2, r3
 8003a56:	6838      	ldr	r0, [r7, #0]
 8003a58:	f001 ff6e 	bl	8005938 <memcpy>
	}
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a6c:	f001 fc42 	bl	80052f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a78:	e011      	b.n	8003a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3324      	adds	r3, #36	; 0x24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fd4c 	bl	8004524 <xTaskRemoveFromEventList>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a92:	f000 fe23 	bl	80046dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dce9      	bgt.n	8003a7a <prvUnlockQueue+0x16>
 8003aa6:	e000      	b.n	8003aaa <prvUnlockQueue+0x46>
					break;
 8003aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	22ff      	movs	r2, #255	; 0xff
 8003aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ab2:	f001 fc4f 	bl	8005354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ab6:	f001 fc1d 	bl	80052f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ac2:	e011      	b.n	8003ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d012      	beq.n	8003af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3310      	adds	r3, #16
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fd27 	bl	8004524 <xTaskRemoveFromEventList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003adc:	f000 fdfe 	bl	80046dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	dce9      	bgt.n	8003ac4 <prvUnlockQueue+0x60>
 8003af0:	e000      	b.n	8003af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003afc:	f001 fc2a 	bl	8005354 <vPortExitCritical>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b10:	f001 fbf0 	bl	80052f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e001      	b.n	8003b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b26:	f001 fc15 	bl	8005354 <vPortExitCritical>

	return xReturn;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b3c:	f001 fbda 	bl	80052f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d102      	bne.n	8003b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e001      	b.n	8003b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b56:	f001 fbfd 	bl	8005354 <vPortExitCritical>

	return xReturn;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e014      	b.n	8003b9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b74:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <vQueueAddToRegistry+0x50>)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <vQueueAddToRegistry+0x50>)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <vQueueAddToRegistry+0x50>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b96:	e006      	b.n	8003ba6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b07      	cmp	r3, #7
 8003ba2:	d9e7      	bls.n	8003b74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	200008ec 	.word	0x200008ec

08003bb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bc8:	f001 fb94 	bl	80052f4 <vPortEnterCritical>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd8:	d103      	bne.n	8003be2 <vQueueWaitForMessageRestricted+0x2a>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be8:	b25b      	sxtb	r3, r3
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bee:	d103      	bne.n	8003bf8 <vQueueWaitForMessageRestricted+0x40>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf8:	f001 fbac 	bl	8005354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3324      	adds	r3, #36	; 0x24
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fc5d 	bl	80044cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff ff26 	bl	8003a64 <prvUnlockQueue>
	}
 8003c18:	bf00      	nop
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08e      	sub	sp, #56	; 0x38
 8003c24:	af04      	add	r7, sp, #16
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	623b      	str	r3, [r7, #32]
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	61fb      	str	r3, [r7, #28]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c66:	23bc      	movs	r3, #188	; 0xbc
 8003c68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2bbc      	cmp	r3, #188	; 0xbc
 8003c6e:	d00a      	beq.n	8003c86 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	61bb      	str	r3, [r7, #24]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01e      	beq.n	8003cca <xTaskCreateStatic+0xaa>
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01b      	beq.n	8003cca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9303      	str	r3, [sp, #12]
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	9302      	str	r3, [sp, #8]
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f851 	bl	8003d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cc4:	f000 f8ec 	bl	8003ea0 <prvAddNewTaskToReadyList>
 8003cc8:	e001      	b.n	8003cce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cce:	697b      	ldr	r3, [r7, #20]
	}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	; 0x30
 8003cdc:	af04      	add	r7, sp, #16
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fc23 	bl	8005538 <pvPortMalloc>
 8003cf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00e      	beq.n	8003d18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003cfa:	20bc      	movs	r0, #188	; 0xbc
 8003cfc:	f001 fc1c 	bl	8005538 <pvPortMalloc>
 8003d00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d0e:	e005      	b.n	8003d1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d10:	6978      	ldr	r0, [r7, #20]
 8003d12:	f001 fcd5 	bl	80056c0 <vPortFree>
 8003d16:	e001      	b.n	8003d1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d017      	beq.n	8003d52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	9302      	str	r3, [sp, #8]
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f80f 	bl	8003d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d46:	69f8      	ldr	r0, [r7, #28]
 8003d48:	f000 f8aa 	bl	8003ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	e002      	b.n	8003d58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d58:	69bb      	ldr	r3, [r7, #24]
	}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	21a5      	movs	r1, #165	; 0xa5
 8003d7e:	f001 fde9 	bl	8005954 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f023 0307 	bic.w	r3, r3, #7
 8003d9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	617b      	str	r3, [r7, #20]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e012      	b.n	8003de8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	7819      	ldrb	r1, [r3, #0]
 8003dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3334      	adds	r3, #52	; 0x34
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d9e9      	bls.n	8003dc2 <prvInitialiseNewTask+0x5e>
 8003dee:	e000      	b.n	8003df2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003df0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2b37      	cmp	r3, #55	; 0x37
 8003dfe:	d901      	bls.n	8003e04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e00:	2337      	movs	r3, #55	; 0x37
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	2200      	movs	r2, #0
 8003e14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f986 	bl	800312c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	3318      	adds	r3, #24
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f981 	bl	800312c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	3354      	adds	r3, #84	; 0x54
 8003e54:	2260      	movs	r2, #96	; 0x60
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 fd7b 	bl	8005954 <memset>
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <prvInitialiseNewTask+0x130>)
 8003e62:	659a      	str	r2, [r3, #88]	; 0x58
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <prvInitialiseNewTask+0x134>)
 8003e68:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <prvInitialiseNewTask+0x138>)
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	69b8      	ldr	r0, [r7, #24]
 8003e76:	f001 f90f 	bl	8005098 <pxPortInitialiseStack>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e8c:	bf00      	nop
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08005ba8 	.word	0x08005ba8
 8003e98:	08005bc8 	.word	0x08005bc8
 8003e9c:	08005b88 	.word	0x08005b88

08003ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ea8:	f001 fa24 	bl	80052f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eac:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a2c      	ldr	r2, [pc, #176]	; (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eb6:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d110      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ecc:	f000 fc2a 	bl	8004724 <prvInitialiseTaskLists>
 8003ed0:	e00d      	b.n	8003eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ed2:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <prvAddNewTaskToReadyList+0xcc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eda:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d802      	bhi.n	8003eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <prvAddNewTaskToReadyList+0xd0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <prvAddNewTaskToReadyList+0xd0>)
 8003ef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <prvAddNewTaskToReadyList+0xd0>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <prvAddNewTaskToReadyList+0xd4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d903      	bls.n	8003f14 <prvAddNewTaskToReadyList+0x74>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <prvAddNewTaskToReadyList+0xd4>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <prvAddNewTaskToReadyList+0xd8>)
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f7ff f90b 	bl	8003146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f30:	f001 fa10 	bl	8005354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <prvAddNewTaskToReadyList+0xcc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d207      	bcs.n	8003f5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <prvAddNewTaskToReadyList+0xdc>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000e00 	.word	0x20000e00
 8003f68:	2000092c 	.word	0x2000092c
 8003f6c:	20000e0c 	.word	0x20000e0c
 8003f70:	20000e1c 	.word	0x20000e1c
 8003f74:	20000e08 	.word	0x20000e08
 8003f78:	20000930 	.word	0x20000930
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d017      	beq.n	8003fc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <vTaskDelay+0x60>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <vTaskDelay+0x30>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	60bb      	str	r3, [r7, #8]
}
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fb0:	f000 f88a 	bl	80040c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fd08 	bl	80049cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fbc:	f000 f892 	bl	80040e4 <xTaskResumeAll>
 8003fc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <vTaskDelay+0x64>)
 8003fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000e28 	.word	0x20000e28
 8003fe4:	e000ed04 	.word	0xe000ed04

08003fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ff6:	463a      	mov	r2, r7
 8003ff8:	1d39      	adds	r1, r7, #4
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff f840 	bl	8003084 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	9202      	str	r2, [sp, #8]
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	2300      	movs	r3, #0
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	460a      	mov	r2, r1
 8004016:	4924      	ldr	r1, [pc, #144]	; (80040a8 <vTaskStartScheduler+0xc0>)
 8004018:	4824      	ldr	r0, [pc, #144]	; (80040ac <vTaskStartScheduler+0xc4>)
 800401a:	f7ff fe01 	bl	8003c20 <xTaskCreateStatic>
 800401e:	4603      	mov	r3, r0
 8004020:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <vTaskStartScheduler+0xc8>)
 8004022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <vTaskStartScheduler+0xc8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e001      	b.n	8004036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800403c:	f000 fd1a 	bl	8004a74 <xTimerCreateTimerTask>
 8004040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d11b      	bne.n	8004080 <vTaskStartScheduler+0x98>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	613b      	str	r3, [r7, #16]
}
 800405a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800405c:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <vTaskStartScheduler+0xcc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3354      	adds	r3, #84	; 0x54
 8004062:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <vTaskStartScheduler+0xd0>)
 8004064:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <vTaskStartScheduler+0xd4>)
 8004068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800406c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <vTaskStartScheduler+0xd8>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <vTaskStartScheduler+0xdc>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800407a:	f001 f899 	bl	80051b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800407e:	e00e      	b.n	800409e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004086:	d10a      	bne.n	800409e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60fb      	str	r3, [r7, #12]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <vTaskStartScheduler+0xb4>
}
 800409e:	bf00      	nop
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	08005b14 	.word	0x08005b14
 80040ac:	080046f5 	.word	0x080046f5
 80040b0:	20000e24 	.word	0x20000e24
 80040b4:	2000092c 	.word	0x2000092c
 80040b8:	20000010 	.word	0x20000010
 80040bc:	20000e20 	.word	0x20000e20
 80040c0:	20000e0c 	.word	0x20000e0c
 80040c4:	20000e04 	.word	0x20000e04

080040c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <vTaskSuspendAll+0x18>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <vTaskSuspendAll+0x18>)
 80040d4:	6013      	str	r3, [r2, #0]
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000e28 	.word	0x20000e28

080040e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <xTaskResumeAll+0x118>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <xTaskResumeAll+0x2c>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	603b      	str	r3, [r7, #0]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004110:	f001 f8f0 	bl	80052f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <xTaskResumeAll+0x118>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3b01      	subs	r3, #1
 800411a:	4a38      	ldr	r2, [pc, #224]	; (80041fc <xTaskResumeAll+0x118>)
 800411c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800411e:	4b37      	ldr	r3, [pc, #220]	; (80041fc <xTaskResumeAll+0x118>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d162      	bne.n	80041ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004126:	4b36      	ldr	r3, [pc, #216]	; (8004200 <xTaskResumeAll+0x11c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d05e      	beq.n	80041ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800412e:	e02f      	b.n	8004190 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <xTaskResumeAll+0x120>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3318      	adds	r3, #24
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff f85f 	bl	8003200 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff f85a 	bl	8003200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <xTaskResumeAll+0x124>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d903      	bls.n	8004160 <xTaskResumeAll+0x7c>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <xTaskResumeAll+0x124>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a27      	ldr	r2, [pc, #156]	; (800420c <xTaskResumeAll+0x128>)
 800416e:	441a      	add	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7fe ffe5 	bl	8003146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <xTaskResumeAll+0x12c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <xTaskResumeAll+0x130>)
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <xTaskResumeAll+0x120>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1cb      	bne.n	8004130 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800419e:	f000 fb63 	bl	8004868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <xTaskResumeAll+0x134>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041ae:	f000 f847 	bl	8004240 <xTaskIncrementTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <xTaskResumeAll+0x130>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f1      	bne.n	80041ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <xTaskResumeAll+0x134>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <xTaskResumeAll+0x130>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <xTaskResumeAll+0x138>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ec:	f001 f8b2 	bl	8005354 <vPortExitCritical>

	return xAlreadyYielded;
 80041f0:	68bb      	ldr	r3, [r7, #8]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000e28 	.word	0x20000e28
 8004200:	20000e00 	.word	0x20000e00
 8004204:	20000dc0 	.word	0x20000dc0
 8004208:	20000e08 	.word	0x20000e08
 800420c:	20000930 	.word	0x20000930
 8004210:	2000092c 	.word	0x2000092c
 8004214:	20000e14 	.word	0x20000e14
 8004218:	20000e10 	.word	0x20000e10
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <xTaskGetTickCount+0x1c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000e04 	.word	0x20000e04

08004240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800424a:	4b51      	ldr	r3, [pc, #324]	; (8004390 <xTaskIncrementTick+0x150>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 808e 	bne.w	8004370 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004254:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <xTaskIncrementTick+0x154>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800425c:	4a4d      	ldr	r2, [pc, #308]	; (8004394 <xTaskIncrementTick+0x154>)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d120      	bne.n	80042aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004268:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <xTaskIncrementTick+0x158>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <xTaskIncrementTick+0x48>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	603b      	str	r3, [r7, #0]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xTaskIncrementTick+0x46>
 8004288:	4b43      	ldr	r3, [pc, #268]	; (8004398 <xTaskIncrementTick+0x158>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	4b43      	ldr	r3, [pc, #268]	; (800439c <xTaskIncrementTick+0x15c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a41      	ldr	r2, [pc, #260]	; (8004398 <xTaskIncrementTick+0x158>)
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4a41      	ldr	r2, [pc, #260]	; (800439c <xTaskIncrementTick+0x15c>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <xTaskIncrementTick+0x160>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	4a3f      	ldr	r2, [pc, #252]	; (80043a0 <xTaskIncrementTick+0x160>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	f000 fadf 	bl	8004868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042aa:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <xTaskIncrementTick+0x164>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d34e      	bcc.n	8004352 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042b4:	4b38      	ldr	r3, [pc, #224]	; (8004398 <xTaskIncrementTick+0x158>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <xTaskIncrementTick+0x82>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <xTaskIncrementTick+0x84>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <xTaskIncrementTick+0x164>)
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ce:	601a      	str	r2, [r3, #0]
					break;
 80042d0:	e03f      	b.n	8004352 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <xTaskIncrementTick+0x158>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d203      	bcs.n	80042f2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042ea:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <xTaskIncrementTick+0x164>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6013      	str	r3, [r2, #0]
						break;
 80042f0:	e02f      	b.n	8004352 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe ff82 	bl	8003200 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	3318      	adds	r3, #24
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe ff79 	bl	8003200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <xTaskIncrementTick+0x168>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d903      	bls.n	8004322 <xTaskIncrementTick+0xe2>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a22      	ldr	r2, [pc, #136]	; (80043a8 <xTaskIncrementTick+0x168>)
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <xTaskIncrementTick+0x16c>)
 8004330:	441a      	add	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe ff04 	bl	8003146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <xTaskIncrementTick+0x170>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	429a      	cmp	r2, r3
 800434a:	d3b3      	bcc.n	80042b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800434c:	2301      	movs	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004350:	e7b0      	b.n	80042b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <xTaskIncrementTick+0x170>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4914      	ldr	r1, [pc, #80]	; (80043ac <xTaskIncrementTick+0x16c>)
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d907      	bls.n	800437a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800436a:	2301      	movs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e004      	b.n	800437a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <xTaskIncrementTick+0x174>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <xTaskIncrementTick+0x174>)
 8004378:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <xTaskIncrementTick+0x178>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004382:	2301      	movs	r3, #1
 8004384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000e28 	.word	0x20000e28
 8004394:	20000e04 	.word	0x20000e04
 8004398:	20000db8 	.word	0x20000db8
 800439c:	20000dbc 	.word	0x20000dbc
 80043a0:	20000e18 	.word	0x20000e18
 80043a4:	20000e20 	.word	0x20000e20
 80043a8:	20000e08 	.word	0x20000e08
 80043ac:	20000930 	.word	0x20000930
 80043b0:	2000092c 	.word	0x2000092c
 80043b4:	20000e10 	.word	0x20000e10
 80043b8:	20000e14 	.word	0x20000e14

080043bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043c2:	4b2a      	ldr	r3, [pc, #168]	; (800446c <vTaskSwitchContext+0xb0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <vTaskSwitchContext+0xb4>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043d0:	e046      	b.n	8004460 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <vTaskSwitchContext+0xb4>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043d8:	4b26      	ldr	r3, [pc, #152]	; (8004474 <vTaskSwitchContext+0xb8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e010      	b.n	8004402 <vTaskSwitchContext+0x46>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <vTaskSwitchContext+0x40>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	607b      	str	r3, [r7, #4]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <vTaskSwitchContext+0x3e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b01      	subs	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	491d      	ldr	r1, [pc, #116]	; (8004478 <vTaskSwitchContext+0xbc>)
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0e4      	beq.n	80043e0 <vTaskSwitchContext+0x24>
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <vTaskSwitchContext+0xbc>)
 8004422:	4413      	add	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3308      	adds	r3, #8
 8004438:	429a      	cmp	r2, r3
 800443a:	d104      	bne.n	8004446 <vTaskSwitchContext+0x8a>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <vTaskSwitchContext+0xc0>)
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <vTaskSwitchContext+0xb8>)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <vTaskSwitchContext+0xc0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3354      	adds	r3, #84	; 0x54
 800445c:	4a08      	ldr	r2, [pc, #32]	; (8004480 <vTaskSwitchContext+0xc4>)
 800445e:	6013      	str	r3, [r2, #0]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	20000e28 	.word	0x20000e28
 8004470:	20000e14 	.word	0x20000e14
 8004474:	20000e08 	.word	0x20000e08
 8004478:	20000930 	.word	0x20000930
 800447c:	2000092c 	.word	0x2000092c
 8004480:	20000010 	.word	0x20000010

08004484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	60fb      	str	r3, [r7, #12]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <vTaskPlaceOnEventList+0x44>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3318      	adds	r3, #24
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fe fe6b 	bl	800318e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044b8:	2101      	movs	r1, #1
 80044ba:	6838      	ldr	r0, [r7, #0]
 80044bc:	f000 fa86 	bl	80049cc <prvAddCurrentTaskToDelayedList>
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	2000092c 	.word	0x2000092c

080044cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	617b      	str	r3, [r7, #20]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <vTaskPlaceOnEventListRestricted+0x54>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3318      	adds	r3, #24
 80044fa:	4619      	mov	r1, r3
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7fe fe22 	bl	8003146 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800450c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	f000 fa5b 	bl	80049cc <prvAddCurrentTaskToDelayedList>
	}
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000092c 	.word	0x2000092c

08004524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	60fb      	str	r3, [r7, #12]
}
 800454c:	bf00      	nop
 800454e:	e7fe      	b.n	800454e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3318      	adds	r3, #24
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fe53 	bl	8003200 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <xTaskRemoveFromEventList+0xb0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11d      	bne.n	800459e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fe4a 	bl	8003200 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <xTaskRemoveFromEventList+0xb4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d903      	bls.n	8004580 <xTaskRemoveFromEventList+0x5c>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <xTaskRemoveFromEventList+0xb4>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <xTaskRemoveFromEventList+0xb8>)
 800458e:	441a      	add	r2, r3
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe fdd5 	bl	8003146 <vListInsertEnd>
 800459c:	e005      	b.n	80045aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3318      	adds	r3, #24
 80045a2:	4619      	mov	r1, r3
 80045a4:	480e      	ldr	r0, [pc, #56]	; (80045e0 <xTaskRemoveFromEventList+0xbc>)
 80045a6:	f7fe fdce 	bl	8003146 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <xTaskRemoveFromEventList+0xc0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d905      	bls.n	80045c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <xTaskRemoveFromEventList+0xc4>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e001      	b.n	80045c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80045c8:	697b      	ldr	r3, [r7, #20]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000e28 	.word	0x20000e28
 80045d8:	20000e08 	.word	0x20000e08
 80045dc:	20000930 	.word	0x20000930
 80045e0:	20000dc0 	.word	0x20000dc0
 80045e4:	2000092c 	.word	0x2000092c
 80045e8:	20000e14 	.word	0x20000e14

080045ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <vTaskInternalSetTimeOutState+0x24>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <vTaskInternalSetTimeOutState+0x28>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000e18 	.word	0x20000e18
 8004614:	20000e04 	.word	0x20000e04

08004618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	613b      	str	r3, [r7, #16]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60fb      	str	r3, [r7, #12]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800465a:	f000 fe4b 	bl	80052f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <xTaskCheckForTimeOut+0xbc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004676:	d102      	bne.n	800467e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e023      	b.n	80046c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <xTaskCheckForTimeOut+0xc0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d007      	beq.n	800469a <xTaskCheckForTimeOut+0x82>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	429a      	cmp	r2, r3
 8004692:	d302      	bcc.n	800469a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e015      	b.n	80046c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d20b      	bcs.n	80046bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff9b 	bl	80045ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e004      	b.n	80046c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046c6:	f000 fe45 	bl	8005354 <vPortExitCritical>

	return xReturn;
 80046ca:	69fb      	ldr	r3, [r7, #28]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000e04 	.word	0x20000e04
 80046d8:	20000e18 	.word	0x20000e18

080046dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <vTaskMissedYield+0x14>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
}
 80046e6:	bf00      	nop
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20000e14 	.word	0x20000e14

080046f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046fc:	f000 f852 	bl	80047a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <prvIdleTask+0x28>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d9f9      	bls.n	80046fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <prvIdleTask+0x2c>)
 800470a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004718:	e7f0      	b.n	80046fc <prvIdleTask+0x8>
 800471a:	bf00      	nop
 800471c:	20000930 	.word	0x20000930
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	e00c      	b.n	800474a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <prvInitialiseTaskLists+0x60>)
 800473c:	4413      	add	r3, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fcd4 	bl	80030ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3301      	adds	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b37      	cmp	r3, #55	; 0x37
 800474e:	d9ef      	bls.n	8004730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004750:	480d      	ldr	r0, [pc, #52]	; (8004788 <prvInitialiseTaskLists+0x64>)
 8004752:	f7fe fccb 	bl	80030ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004756:	480d      	ldr	r0, [pc, #52]	; (800478c <prvInitialiseTaskLists+0x68>)
 8004758:	f7fe fcc8 	bl	80030ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800475c:	480c      	ldr	r0, [pc, #48]	; (8004790 <prvInitialiseTaskLists+0x6c>)
 800475e:	f7fe fcc5 	bl	80030ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004762:	480c      	ldr	r0, [pc, #48]	; (8004794 <prvInitialiseTaskLists+0x70>)
 8004764:	f7fe fcc2 	bl	80030ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004768:	480b      	ldr	r0, [pc, #44]	; (8004798 <prvInitialiseTaskLists+0x74>)
 800476a:	f7fe fcbf 	bl	80030ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800476e:	4b0b      	ldr	r3, [pc, #44]	; (800479c <prvInitialiseTaskLists+0x78>)
 8004770:	4a05      	ldr	r2, [pc, #20]	; (8004788 <prvInitialiseTaskLists+0x64>)
 8004772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <prvInitialiseTaskLists+0x7c>)
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <prvInitialiseTaskLists+0x68>)
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000930 	.word	0x20000930
 8004788:	20000d90 	.word	0x20000d90
 800478c:	20000da4 	.word	0x20000da4
 8004790:	20000dc0 	.word	0x20000dc0
 8004794:	20000dd4 	.word	0x20000dd4
 8004798:	20000dec 	.word	0x20000dec
 800479c:	20000db8 	.word	0x20000db8
 80047a0:	20000dbc 	.word	0x20000dbc

080047a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047aa:	e019      	b.n	80047e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047ac:	f000 fda2 	bl	80052f4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <prvCheckTasksWaitingTermination+0x50>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fd1f 	bl	8003200 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <prvCheckTasksWaitingTermination+0x54>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <prvCheckTasksWaitingTermination+0x54>)
 80047ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <prvCheckTasksWaitingTermination+0x58>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <prvCheckTasksWaitingTermination+0x58>)
 80047d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047d6:	f000 fdbd 	bl	8005354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f810 	bl	8004800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <prvCheckTasksWaitingTermination+0x58>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e1      	bne.n	80047ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000dd4 	.word	0x20000dd4
 80047f8:	20000e00 	.word	0x20000e00
 80047fc:	20000de8 	.word	0x20000de8

08004800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3354      	adds	r3, #84	; 0x54
 800480c:	4618      	mov	r0, r3
 800480e:	f001 f8b7 	bl	8005980 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	4618      	mov	r0, r3
 8004822:	f000 ff4d 	bl	80056c0 <vPortFree>
				vPortFree( pxTCB );
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 ff4a 	bl	80056c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800482c:	e018      	b.n	8004860 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004834:	2b01      	cmp	r3, #1
 8004836:	d103      	bne.n	8004840 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 ff41 	bl	80056c0 <vPortFree>
	}
 800483e:	e00f      	b.n	8004860 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004846:	2b02      	cmp	r3, #2
 8004848:	d00a      	beq.n	8004860 <prvDeleteTCB+0x60>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60fb      	str	r3, [r7, #12]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <prvDeleteTCB+0x5e>
	}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <prvResetNextTaskUnblockTime+0x44>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <prvResetNextTaskUnblockTime+0x14>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <prvResetNextTaskUnblockTime+0x16>
 800487c:	2300      	movs	r3, #0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <prvResetNextTaskUnblockTime+0x48>)
 8004884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004888:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800488a:	e008      	b.n	800489e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <prvResetNextTaskUnblockTime+0x44>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4a05      	ldr	r2, [pc, #20]	; (80048b0 <prvResetNextTaskUnblockTime+0x48>)
 800489c:	6013      	str	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000db8 	.word	0x20000db8
 80048b0:	20000e20 	.word	0x20000e20

080048b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <xTaskGetSchedulerState+0x34>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048c2:	2301      	movs	r3, #1
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	e008      	b.n	80048da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <xTaskGetSchedulerState+0x38>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048d0:	2302      	movs	r3, #2
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	e001      	b.n	80048da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048da:	687b      	ldr	r3, [r7, #4]
	}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	20000e0c 	.word	0x20000e0c
 80048ec:	20000e28 	.word	0x20000e28

080048f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d056      	beq.n	80049b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <xTaskPriorityDisinherit+0xd0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	429a      	cmp	r2, r3
 800490e:	d00a      	beq.n	8004926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60bb      	str	r3, [r7, #8]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004948:	1e5a      	subs	r2, r3, #1
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	429a      	cmp	r2, r3
 8004958:	d02c      	beq.n	80049b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495e:	2b00      	cmp	r3, #0
 8004960:	d128      	bne.n	80049b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3304      	adds	r3, #4
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fc4a 	bl	8003200 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <xTaskPriorityDisinherit+0xd4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d903      	bls.n	8004994 <xTaskPriorityDisinherit+0xa4>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <xTaskPriorityDisinherit+0xd4>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <xTaskPriorityDisinherit+0xd8>)
 80049a2:	441a      	add	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe fbcb 	bl	8003146 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049b4:	697b      	ldr	r3, [r7, #20]
	}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	2000092c 	.word	0x2000092c
 80049c4:	20000e08 	.word	0x20000e08
 80049c8:	20000930 	.word	0x20000930

080049cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049d6:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <prvAddCurrentTaskToDelayedList+0x90>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <prvAddCurrentTaskToDelayedList+0x94>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fc0c 	bl	8003200 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ee:	d10a      	bne.n	8004a06 <prvAddCurrentTaskToDelayedList+0x3a>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f6:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <prvAddCurrentTaskToDelayedList+0x94>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4819      	ldr	r0, [pc, #100]	; (8004a64 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a00:	f7fe fba1 	bl	8003146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a04:	e026      	b.n	8004a54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a0e:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d209      	bcs.n	8004a32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7fe fbaf 	bl	800318e <vListInsert>
}
 8004a30:	e010      	b.n	8004a54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a32:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fe fba5 	bl	800318e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d202      	bcs.n	8004a54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a4e:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6013      	str	r3, [r2, #0]
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000e04 	.word	0x20000e04
 8004a60:	2000092c 	.word	0x2000092c
 8004a64:	20000dec 	.word	0x20000dec
 8004a68:	20000dbc 	.word	0x20000dbc
 8004a6c:	20000db8 	.word	0x20000db8
 8004a70:	20000e20 	.word	0x20000e20

08004a74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	; 0x28
 8004a78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a7e:	f000 facb 	bl	8005018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a82:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <xTimerCreateTimerTask+0x80>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d021      	beq.n	8004ace <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a92:	1d3a      	adds	r2, r7, #4
 8004a94:	f107 0108 	add.w	r1, r7, #8
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe fb0b 	bl	80030b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	9202      	str	r2, [sp, #8]
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	2302      	movs	r3, #2
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	460a      	mov	r2, r1
 8004ab4:	4910      	ldr	r1, [pc, #64]	; (8004af8 <xTimerCreateTimerTask+0x84>)
 8004ab6:	4811      	ldr	r0, [pc, #68]	; (8004afc <xTimerCreateTimerTask+0x88>)
 8004ab8:	f7ff f8b2 	bl	8003c20 <xTaskCreateStatic>
 8004abc:	4603      	mov	r3, r0
 8004abe:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <xTimerCreateTimerTask+0x8c>)
 8004ac0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <xTimerCreateTimerTask+0x8c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004aca:	2301      	movs	r3, #1
 8004acc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	613b      	str	r3, [r7, #16]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004aea:	697b      	ldr	r3, [r7, #20]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000e5c 	.word	0x20000e5c
 8004af8:	08005b1c 	.word	0x08005b1c
 8004afc:	08004c21 	.word	0x08004c21
 8004b00:	20000e60 	.word	0x20000e60

08004b04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	623b      	str	r3, [r7, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <xTimerGenericCommand+0x98>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02a      	beq.n	8004b90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b05      	cmp	r3, #5
 8004b4a:	dc18      	bgt.n	8004b7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b4c:	f7ff feb2 	bl	80048b4 <xTaskGetSchedulerState>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d109      	bne.n	8004b6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <xTimerGenericCommand+0x98>)
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	f107 0110 	add.w	r1, r7, #16
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b62:	f7fe fc79 	bl	8003458 <xQueueGenericSend>
 8004b66:	6278      	str	r0, [r7, #36]	; 0x24
 8004b68:	e012      	b.n	8004b90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <xTimerGenericCommand+0x98>)
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	f107 0110 	add.w	r1, r7, #16
 8004b72:	2300      	movs	r3, #0
 8004b74:	2200      	movs	r2, #0
 8004b76:	f7fe fc6f 	bl	8003458 <xQueueGenericSend>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24
 8004b7c:	e008      	b.n	8004b90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <xTimerGenericCommand+0x98>)
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f107 0110 	add.w	r1, r7, #16
 8004b86:	2300      	movs	r3, #0
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	f7fe fd63 	bl	8003654 <xQueueGenericSendFromISR>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3728      	adds	r7, #40	; 0x28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000e5c 	.word	0x20000e5c

08004ba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004baa:	4b1c      	ldr	r3, [pc, #112]	; (8004c1c <prvProcessExpiredTimer+0x7c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe fb21 	bl	8003200 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d122      	bne.n	8004c0c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	18d1      	adds	r1, r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f000 f8c8 	bl	8004d68 <prvInsertTimerInActiveList>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	2100      	movs	r1, #0
 8004be8:	6978      	ldr	r0, [r7, #20]
 8004bea:	f7ff ff8b 	bl	8004b04 <xTimerGenericCommand>
 8004bee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	60fb      	str	r3, [r7, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	4798      	blx	r3
}
 8004c14:	bf00      	nop
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000e54 	.word	0x20000e54

08004c20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c28:	f107 0308 	add.w	r3, r7, #8
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f857 	bl	8004ce0 <prvGetNextExpireTime>
 8004c32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4619      	mov	r1, r3
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f803 	bl	8004c44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c3e:	f000 f8d5 	bl	8004dec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c42:	e7f1      	b.n	8004c28 <prvTimerTask+0x8>

08004c44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c4e:	f7ff fa3b 	bl	80040c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c52:	f107 0308 	add.w	r3, r7, #8
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f866 	bl	8004d28 <prvSampleTimeNow>
 8004c5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d130      	bne.n	8004cc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <prvProcessTimerOrBlockTask+0x3c>
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d806      	bhi.n	8004c80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c72:	f7ff fa37 	bl	80040e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ff91 	bl	8004ba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c7e:	e024      	b.n	8004cca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <prvProcessTimerOrBlockTask+0x90>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <prvProcessTimerOrBlockTask+0x94>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f7fe ff87 	bl	8003bb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004caa:	f7ff fa1b 	bl	80040e4 <xTaskResumeAll>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <prvProcessTimerOrBlockTask+0x98>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
}
 8004cc4:	e001      	b.n	8004cca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cc6:	f7ff fa0d 	bl	80040e4 <xTaskResumeAll>
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000e58 	.word	0x20000e58
 8004cd8:	20000e5c 	.word	0x20000e5c
 8004cdc:	e000ed04 	.word	0xe000ed04

08004ce0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <prvGetNextExpireTime+0x44>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf0c      	ite	eq
 8004cf2:	2301      	moveq	r3, #1
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <prvGetNextExpireTime+0x44>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e001      	b.n	8004d16 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d16:	68fb      	ldr	r3, [r7, #12]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	20000e54 	.word	0x20000e54

08004d28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d30:	f7ff fa76 	bl	8004220 <xTaskGetTickCount>
 8004d34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <prvSampleTimeNow+0x3c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d205      	bcs.n	8004d4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d40:	f000 f908 	bl	8004f54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d52:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <prvSampleTimeNow+0x3c>)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d58:	68fb      	ldr	r3, [r7, #12]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000e64 	.word	0x20000e64

08004d68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d812      	bhi.n	8004db4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	1ad2      	subs	r2, r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e01b      	b.n	8004dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <prvInsertTimerInActiveList+0x7c>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f7fe f9ee 	bl	800318e <vListInsert>
 8004db2:	e012      	b.n	8004dda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d206      	bcs.n	8004dca <prvInsertTimerInActiveList+0x62>
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d302      	bcc.n	8004dca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e007      	b.n	8004dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dca:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <prvInsertTimerInActiveList+0x80>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7fe f9da 	bl	800318e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dda:	697b      	ldr	r3, [r7, #20]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000e58 	.word	0x20000e58
 8004de8:	20000e54 	.word	0x20000e54

08004dec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	; 0x38
 8004df0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df2:	e09d      	b.n	8004f30 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da18      	bge.n	8004e2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	61fb      	str	r3, [r7, #28]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e22:	6850      	ldr	r0, [r2, #4]
 8004e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e26:	6892      	ldr	r2, [r2, #8]
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	db7d      	blt.n	8004f2e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	3304      	adds	r3, #4
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fe f9dc 	bl	8003200 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e48:	463b      	mov	r3, r7
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff ff6c 	bl	8004d28 <prvSampleTimeNow>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b09      	cmp	r3, #9
 8004e56:	d86b      	bhi.n	8004f30 <prvProcessReceivedCommands+0x144>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <prvProcessReceivedCommands+0x74>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e89 	.word	0x08004e89
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e89 	.word	0x08004e89
 8004e6c:	08004f31 	.word	0x08004f31
 8004e70:	08004ee5 	.word	0x08004ee5
 8004e74:	08004f1d 	.word	0x08004f1d
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e89 	.word	0x08004e89
 8004e80:	08004f31 	.word	0x08004f31
 8004e84:	08004ee5 	.word	0x08004ee5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	18d1      	adds	r1, r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e96:	f7ff ff67 	bl	8004d68 <prvInsertTimerInActiveList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d047      	beq.n	8004f30 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d13f      	bne.n	8004f30 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	441a      	add	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec2:	f7ff fe1f 	bl	8004b04 <xTimerGenericCommand>
 8004ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d130      	bne.n	8004f30 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	61bb      	str	r3, [r7, #24]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	617b      	str	r3, [r7, #20]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	18d1      	adds	r1, r2, r3
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f16:	f7ff ff27 	bl	8004d68 <prvInsertTimerInActiveList>
					break;
 8004f1a:	e009      	b.n	8004f30 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f28:	f000 fbca 	bl	80056c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f2c:	e000      	b.n	8004f30 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f2e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <prvProcessReceivedCommands+0x164>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1d39      	adds	r1, r7, #4
 8004f36:	2200      	movs	r2, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe fc23 	bl	8003784 <xQueueReceive>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f47f af57 	bne.w	8004df4 <prvProcessReceivedCommands+0x8>
	}
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	3730      	adds	r7, #48	; 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000e5c 	.word	0x20000e5c

08004f54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f5a:	e045      	b.n	8004fe8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f5c:	4b2c      	ldr	r3, [pc, #176]	; (8005010 <prvSwitchTimerLists+0xbc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f66:	4b2a      	ldr	r3, [pc, #168]	; (8005010 <prvSwitchTimerLists+0xbc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe f943 	bl	8003200 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d12e      	bne.n	8004fe8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4413      	add	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d90e      	bls.n	8004fba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <prvSwitchTimerLists+0xbc>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f7fe f8eb 	bl	800318e <vListInsert>
 8004fb8:	e016      	b.n	8004fe8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fd9d 	bl	8004b04 <xTimerGenericCommand>
 8004fca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	603b      	str	r3, [r7, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <prvSwitchTimerLists+0xbc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1b4      	bne.n	8004f5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <prvSwitchTimerLists+0xbc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <prvSwitchTimerLists+0xc0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	; (8005010 <prvSwitchTimerLists+0xbc>)
 8004ffe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <prvSwitchTimerLists+0xc0>)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	bf00      	nop
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000e54 	.word	0x20000e54
 8005014:	20000e58 	.word	0x20000e58

08005018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800501e:	f000 f969 	bl	80052f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d120      	bne.n	800506c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800502a:	4814      	ldr	r0, [pc, #80]	; (800507c <prvCheckForValidListAndQueue+0x64>)
 800502c:	f7fe f85e 	bl	80030ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005030:	4813      	ldr	r0, [pc, #76]	; (8005080 <prvCheckForValidListAndQueue+0x68>)
 8005032:	f7fe f85b 	bl	80030ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <prvCheckForValidListAndQueue+0x6c>)
 8005038:	4a10      	ldr	r2, [pc, #64]	; (800507c <prvCheckForValidListAndQueue+0x64>)
 800503a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800503c:	4b12      	ldr	r3, [pc, #72]	; (8005088 <prvCheckForValidListAndQueue+0x70>)
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <prvCheckForValidListAndQueue+0x68>)
 8005040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005042:	2300      	movs	r3, #0
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4b11      	ldr	r3, [pc, #68]	; (800508c <prvCheckForValidListAndQueue+0x74>)
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <prvCheckForValidListAndQueue+0x78>)
 800504a:	2110      	movs	r1, #16
 800504c:	200a      	movs	r0, #10
 800504e:	f7fe f969 	bl	8003324 <xQueueGenericCreateStatic>
 8005052:	4603      	mov	r3, r0
 8005054:	4a08      	ldr	r2, [pc, #32]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	490b      	ldr	r1, [pc, #44]	; (8005094 <prvCheckForValidListAndQueue+0x7c>)
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fd7c 	bl	8003b64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506c:	f000 f972 	bl	8005354 <vPortExitCritical>
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000e5c 	.word	0x20000e5c
 800507c:	20000e2c 	.word	0x20000e2c
 8005080:	20000e40 	.word	0x20000e40
 8005084:	20000e54 	.word	0x20000e54
 8005088:	20000e58 	.word	0x20000e58
 800508c:	20000f08 	.word	0x20000f08
 8005090:	20000e68 	.word	0x20000e68
 8005094:	08005b24 	.word	0x08005b24

08005098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3b04      	subs	r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3b04      	subs	r3, #4
 80050b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050c8:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <pxPortInitialiseStack+0x64>)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b14      	subs	r3, #20
 80050d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3b04      	subs	r3, #4
 80050de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f06f 0202 	mvn.w	r2, #2
 80050e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3b20      	subs	r3, #32
 80050ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ee:	68fb      	ldr	r3, [r7, #12]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	08005101 	.word	0x08005101

08005100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <prvTaskExitError+0x54>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005112:	d00a      	beq.n	800512a <prvTaskExitError+0x2a>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	60fb      	str	r3, [r7, #12]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <prvTaskExitError+0x28>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	60bb      	str	r3, [r7, #8]
}
 800513c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800513e:	bf00      	nop
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0fc      	beq.n	8005140 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	2000000c 	.word	0x2000000c
	...

08005160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <pxCurrentTCBConst2>)
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	6808      	ldr	r0, [r1, #0]
 8005166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	f380 8809 	msr	PSP, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8811 	msr	BASEPRI, r0
 800517a:	4770      	bx	lr
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst2>:
 8005180:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005188:	4808      	ldr	r0, [pc, #32]	; (80051ac <prvPortStartFirstTask+0x24>)
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	6800      	ldr	r0, [r0, #0]
 800518e:	f380 8808 	msr	MSP, r0
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8814 	msr	CONTROL, r0
 800519a:	b662      	cpsie	i
 800519c:	b661      	cpsie	f
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	df00      	svc	0
 80051a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051aa:	bf00      	nop
 80051ac:	e000ed08 	.word	0xe000ed08

080051b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051b6:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <xPortStartScheduler+0x120>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a46      	ldr	r2, [pc, #280]	; (80052d4 <xPortStartScheduler+0x124>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10a      	bne.n	80051d6 <xPortStartScheduler+0x26>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	613b      	str	r3, [r7, #16]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051d6:	4b3e      	ldr	r3, [pc, #248]	; (80052d0 <xPortStartScheduler+0x120>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3f      	ldr	r2, [pc, #252]	; (80052d8 <xPortStartScheduler+0x128>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10a      	bne.n	80051f6 <xPortStartScheduler+0x46>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051f6:	4b39      	ldr	r3, [pc, #228]	; (80052dc <xPortStartScheduler+0x12c>)
 80051f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	22ff      	movs	r2, #255	; 0xff
 8005206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4b31      	ldr	r3, [pc, #196]	; (80052e0 <xPortStartScheduler+0x130>)
 800521c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800521e:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <xPortStartScheduler+0x134>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005224:	e009      	b.n	800523a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005226:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <xPortStartScheduler+0x134>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3b01      	subs	r3, #1
 800522c:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <xPortStartScheduler+0x134>)
 800522e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d0ef      	beq.n	8005226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005246:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <xPortStartScheduler+0x134>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1c3 0307 	rsb	r3, r3, #7
 800524e:	2b04      	cmp	r3, #4
 8005250:	d00a      	beq.n	8005268 <xPortStartScheduler+0xb8>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60bb      	str	r3, [r7, #8]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005268:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <xPortStartScheduler+0x134>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <xPortStartScheduler+0x134>)
 8005270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <xPortStartScheduler+0x134>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800527a:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <xPortStartScheduler+0x134>)
 800527c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <xPortStartScheduler+0x138>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <xPortStartScheduler+0x138>)
 800528c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <xPortStartScheduler+0x138>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <xPortStartScheduler+0x138>)
 8005298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800529c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800529e:	f000 f8dd 	bl	800545c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <xPortStartScheduler+0x13c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052a8:	f000 f8fc 	bl	80054a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052ac:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <xPortStartScheduler+0x140>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0f      	ldr	r2, [pc, #60]	; (80052f0 <xPortStartScheduler+0x140>)
 80052b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052b8:	f7ff ff66 	bl	8005188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052bc:	f7ff f87e 	bl	80043bc <vTaskSwitchContext>
	prvTaskExitError();
 80052c0:	f7ff ff1e 	bl	8005100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	e000ed00 	.word	0xe000ed00
 80052d4:	410fc271 	.word	0x410fc271
 80052d8:	410fc270 	.word	0x410fc270
 80052dc:	e000e400 	.word	0xe000e400
 80052e0:	20000f58 	.word	0x20000f58
 80052e4:	20000f5c 	.word	0x20000f5c
 80052e8:	e000ed20 	.word	0xe000ed20
 80052ec:	2000000c 	.word	0x2000000c
 80052f0:	e000ef34 	.word	0xe000ef34

080052f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	607b      	str	r3, [r7, #4]
}
 800530c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <vPortEnterCritical+0x58>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <vPortEnterCritical+0x58>)
 8005316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <vPortEnterCritical+0x58>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d10f      	bne.n	8005340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <vPortEnterCritical+0x5c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <vPortEnterCritical+0x4c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	603b      	str	r3, [r7, #0]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <vPortEnterCritical+0x4a>
	}
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	2000000c 	.word	0x2000000c
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <vPortExitCritical+0x50>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10a      	bne.n	8005378 <vPortExitCritical+0x24>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	607b      	str	r3, [r7, #4]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <vPortExitCritical+0x50>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3b01      	subs	r3, #1
 800537e:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <vPortExitCritical+0x50>)
 8005380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <vPortExitCritical+0x50>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <vPortExitCritical+0x42>
 800538a:	2300      	movs	r3, #0
 800538c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f383 8811 	msr	BASEPRI, r3
}
 8005394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	2000000c 	.word	0x2000000c
	...

080053b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053b0:	f3ef 8009 	mrs	r0, PSP
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4b15      	ldr	r3, [pc, #84]	; (8005410 <pxCurrentTCBConst>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	f01e 0f10 	tst.w	lr, #16
 80053c0:	bf08      	it	eq
 80053c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	6010      	str	r0, [r2, #0]
 80053cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053d4:	f380 8811 	msr	BASEPRI, r0
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f7fe ffec 	bl	80043bc <vTaskSwitchContext>
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f380 8811 	msr	BASEPRI, r0
 80053ec:	bc09      	pop	{r0, r3}
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	6808      	ldr	r0, [r1, #0]
 80053f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f6:	f01e 0f10 	tst.w	lr, #16
 80053fa:	bf08      	it	eq
 80053fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005400:	f380 8809 	msr	PSP, r0
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst>:
 8005410:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	607b      	str	r3, [r7, #4]
}
 8005430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005432:	f7fe ff05 	bl	8004240 <xTaskIncrementTick>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <SysTick_Handler+0x40>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f383 8811 	msr	BASEPRI, r3
}
 800544e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <vPortSetupTimerInterrupt+0x34>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <vPortSetupTimerInterrupt+0x38>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <vPortSetupTimerInterrupt+0x3c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <vPortSetupTimerInterrupt+0x40>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <vPortSetupTimerInterrupt+0x44>)
 800547a:	3b01      	subs	r3, #1
 800547c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <vPortSetupTimerInterrupt+0x34>)
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e010 	.word	0xe000e010
 8005494:	e000e018 	.word	0xe000e018
 8005498:	20000000 	.word	0x20000000
 800549c:	10624dd3 	.word	0x10624dd3
 80054a0:	e000e014 	.word	0xe000e014

080054a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054b4 <vPortEnableVFP+0x10>
 80054a8:	6801      	ldr	r1, [r0, #0]
 80054aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054ae:	6001      	str	r1, [r0, #0]
 80054b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054b2:	bf00      	nop
 80054b4:	e000ed88 	.word	0xe000ed88

080054b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054be:	f3ef 8305 	mrs	r3, IPSR
 80054c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	d914      	bls.n	80054f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <vPortValidateInterruptPriority+0x70>)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054d4:	4b15      	ldr	r3, [pc, #84]	; (800552c <vPortValidateInterruptPriority+0x74>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	7afa      	ldrb	r2, [r7, #11]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d20a      	bcs.n	80054f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <vPortValidateInterruptPriority+0x78>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054fc:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <vPortValidateInterruptPriority+0x7c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d90a      	bls.n	800551a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	603b      	str	r3, [r7, #0]
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <vPortValidateInterruptPriority+0x60>
	}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	e000e3f0 	.word	0xe000e3f0
 800552c:	20000f58 	.word	0x20000f58
 8005530:	e000ed0c 	.word	0xe000ed0c
 8005534:	20000f5c 	.word	0x20000f5c

08005538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005544:	f7fe fdc0 	bl	80040c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005548:	4b58      	ldr	r3, [pc, #352]	; (80056ac <pvPortMalloc+0x174>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005550:	f000 f910 	bl	8005774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005554:	4b56      	ldr	r3, [pc, #344]	; (80056b0 <pvPortMalloc+0x178>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 808e 	bne.w	800567e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01d      	beq.n	80055a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005568:	2208      	movs	r2, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d014      	beq.n	80055a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f023 0307 	bic.w	r3, r3, #7
 8005580:	3308      	adds	r3, #8
 8005582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <pvPortMalloc+0x6c>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	617b      	str	r3, [r7, #20]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d069      	beq.n	800567e <pvPortMalloc+0x146>
 80055aa:	4b42      	ldr	r3, [pc, #264]	; (80056b4 <pvPortMalloc+0x17c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d864      	bhi.n	800567e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055b4:	4b40      	ldr	r3, [pc, #256]	; (80056b8 <pvPortMalloc+0x180>)
 80055b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055b8:	4b3f      	ldr	r3, [pc, #252]	; (80056b8 <pvPortMalloc+0x180>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055be:	e004      	b.n	80055ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d903      	bls.n	80055dc <pvPortMalloc+0xa4>
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f1      	bne.n	80055c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055dc:	4b33      	ldr	r3, [pc, #204]	; (80056ac <pvPortMalloc+0x174>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d04b      	beq.n	800567e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2208      	movs	r2, #8
 80055ec:	4413      	add	r3, r2
 80055ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	2308      	movs	r3, #8
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	429a      	cmp	r2, r3
 8005606:	d91f      	bls.n	8005648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <pvPortMalloc+0xf8>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	613b      	str	r3, [r7, #16]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005642:	69b8      	ldr	r0, [r7, #24]
 8005644:	f000 f8f8 	bl	8005838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <pvPortMalloc+0x17c>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <pvPortMalloc+0x17c>)
 8005654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <pvPortMalloc+0x17c>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b18      	ldr	r3, [pc, #96]	; (80056bc <pvPortMalloc+0x184>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d203      	bcs.n	800566a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005662:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <pvPortMalloc+0x17c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <pvPortMalloc+0x184>)
 8005668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <pvPortMalloc+0x178>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	431a      	orrs	r2, r3
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800567e:	f7fe fd31 	bl	80040e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <pvPortMalloc+0x16a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60fb      	str	r3, [r7, #12]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <pvPortMalloc+0x168>
	return pvReturn;
 80056a2:	69fb      	ldr	r3, [r7, #28]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3728      	adds	r7, #40	; 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20001b68 	.word	0x20001b68
 80056b0:	20001b74 	.word	0x20001b74
 80056b4:	20001b6c 	.word	0x20001b6c
 80056b8:	20001b60 	.word	0x20001b60
 80056bc:	20001b70 	.word	0x20001b70

080056c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d048      	beq.n	8005764 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056d2:	2308      	movs	r3, #8
 80056d4:	425b      	negs	r3, r3
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4413      	add	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	4b21      	ldr	r3, [pc, #132]	; (800576c <vPortFree+0xac>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <vPortFree+0x44>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60fb      	str	r3, [r7, #12]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <vPortFree+0x62>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60bb      	str	r3, [r7, #8]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <vPortFree+0xac>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d019      	beq.n	8005764 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d115      	bne.n	8005764 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <vPortFree+0xac>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005748:	f7fe fcbe 	bl	80040c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <vPortFree+0xb0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4413      	add	r3, r2
 8005756:	4a06      	ldr	r2, [pc, #24]	; (8005770 <vPortFree+0xb0>)
 8005758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800575a:	6938      	ldr	r0, [r7, #16]
 800575c:	f000 f86c 	bl	8005838 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005760:	f7fe fcc0 	bl	80040e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005764:	bf00      	nop
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20001b74 	.word	0x20001b74
 8005770:	20001b6c 	.word	0x20001b6c

08005774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800577a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800577e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005780:	4b27      	ldr	r3, [pc, #156]	; (8005820 <prvHeapInit+0xac>)
 8005782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3307      	adds	r3, #7
 8005792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0307 	bic.w	r3, r3, #7
 800579a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <prvHeapInit+0xac>)
 80057a4:	4413      	add	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057ac:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <prvHeapInit+0xb0>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057b2:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <prvHeapInit+0xb0>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	4413      	add	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057c0:	2208      	movs	r2, #8
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0307 	bic.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a15      	ldr	r2, [pc, #84]	; (8005828 <prvHeapInit+0xb4>)
 80057d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <prvHeapInit+0xb4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057de:	4b12      	ldr	r3, [pc, #72]	; (8005828 <prvHeapInit+0xb4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	1ad2      	subs	r2, r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <prvHeapInit+0xb4>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4a0a      	ldr	r2, [pc, #40]	; (800582c <prvHeapInit+0xb8>)
 8005802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a09      	ldr	r2, [pc, #36]	; (8005830 <prvHeapInit+0xbc>)
 800580a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800580c:	4b09      	ldr	r3, [pc, #36]	; (8005834 <prvHeapInit+0xc0>)
 800580e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005812:	601a      	str	r2, [r3, #0]
}
 8005814:	bf00      	nop
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20000f60 	.word	0x20000f60
 8005824:	20001b60 	.word	0x20001b60
 8005828:	20001b68 	.word	0x20001b68
 800582c:	20001b70 	.word	0x20001b70
 8005830:	20001b6c 	.word	0x20001b6c
 8005834:	20001b74 	.word	0x20001b74

08005838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005840:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <prvInsertBlockIntoFreeList+0xac>)
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e002      	b.n	800584c <prvInsertBlockIntoFreeList+0x14>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d8f7      	bhi.n	8005846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4413      	add	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d108      	bne.n	800587a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	441a      	add	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	441a      	add	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d118      	bne.n	80058c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d00d      	beq.n	80058b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e008      	b.n	80058c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <prvInsertBlockIntoFreeList+0xb0>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e003      	b.n	80058c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d002      	beq.n	80058d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20001b60 	.word	0x20001b60
 80058e8:	20001b68 	.word	0x20001b68

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4d0d      	ldr	r5, [pc, #52]	; (8005924 <__libc_init_array+0x38>)
 80058f0:	4c0d      	ldr	r4, [pc, #52]	; (8005928 <__libc_init_array+0x3c>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	2600      	movs	r6, #0
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	4d0b      	ldr	r5, [pc, #44]	; (800592c <__libc_init_array+0x40>)
 80058fe:	4c0c      	ldr	r4, [pc, #48]	; (8005930 <__libc_init_array+0x44>)
 8005900:	f000 f8f2 	bl	8005ae8 <_init>
 8005904:	1b64      	subs	r4, r4, r5
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	2600      	movs	r6, #0
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	08005be8 	.word	0x08005be8
 8005928:	08005be8 	.word	0x08005be8
 800592c:	08005be8 	.word	0x08005be8
 8005930:	08005bec 	.word	0x08005bec

08005934 <__retarget_lock_acquire_recursive>:
 8005934:	4770      	bx	lr

08005936 <__retarget_lock_release_recursive>:
 8005936:	4770      	bx	lr

08005938 <memcpy>:
 8005938:	440a      	add	r2, r1
 800593a:	4291      	cmp	r1, r2
 800593c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005940:	d100      	bne.n	8005944 <memcpy+0xc>
 8005942:	4770      	bx	lr
 8005944:	b510      	push	{r4, lr}
 8005946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800594a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800594e:	4291      	cmp	r1, r2
 8005950:	d1f9      	bne.n	8005946 <memcpy+0xe>
 8005952:	bd10      	pop	{r4, pc}

08005954 <memset>:
 8005954:	4402      	add	r2, r0
 8005956:	4603      	mov	r3, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	f803 1b01 	strb.w	r1, [r3], #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <cleanup_glue>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	460c      	mov	r4, r1
 8005968:	6809      	ldr	r1, [r1, #0]
 800596a:	4605      	mov	r5, r0
 800596c:	b109      	cbz	r1, 8005972 <cleanup_glue+0xe>
 800596e:	f7ff fff9 	bl	8005964 <cleanup_glue>
 8005972:	4621      	mov	r1, r4
 8005974:	4628      	mov	r0, r5
 8005976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800597a:	f000 b869 	b.w	8005a50 <_free_r>
	...

08005980 <_reclaim_reent>:
 8005980:	4b2c      	ldr	r3, [pc, #176]	; (8005a34 <_reclaim_reent+0xb4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4283      	cmp	r3, r0
 8005986:	b570      	push	{r4, r5, r6, lr}
 8005988:	4604      	mov	r4, r0
 800598a:	d051      	beq.n	8005a30 <_reclaim_reent+0xb0>
 800598c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800598e:	b143      	cbz	r3, 80059a2 <_reclaim_reent+0x22>
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d14a      	bne.n	8005a2c <_reclaim_reent+0xac>
 8005996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	b111      	cbz	r1, 80059a2 <_reclaim_reent+0x22>
 800599c:	4620      	mov	r0, r4
 800599e:	f000 f857 	bl	8005a50 <_free_r>
 80059a2:	6961      	ldr	r1, [r4, #20]
 80059a4:	b111      	cbz	r1, 80059ac <_reclaim_reent+0x2c>
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 f852 	bl	8005a50 <_free_r>
 80059ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059ae:	b111      	cbz	r1, 80059b6 <_reclaim_reent+0x36>
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 f84d 	bl	8005a50 <_free_r>
 80059b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80059b8:	b111      	cbz	r1, 80059c0 <_reclaim_reent+0x40>
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 f848 	bl	8005a50 <_free_r>
 80059c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80059c2:	b111      	cbz	r1, 80059ca <_reclaim_reent+0x4a>
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 f843 	bl	8005a50 <_free_r>
 80059ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80059cc:	b111      	cbz	r1, 80059d4 <_reclaim_reent+0x54>
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 f83e 	bl	8005a50 <_free_r>
 80059d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80059d6:	b111      	cbz	r1, 80059de <_reclaim_reent+0x5e>
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 f839 	bl	8005a50 <_free_r>
 80059de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80059e0:	b111      	cbz	r1, 80059e8 <_reclaim_reent+0x68>
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 f834 	bl	8005a50 <_free_r>
 80059e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ea:	b111      	cbz	r1, 80059f2 <_reclaim_reent+0x72>
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 f82f 	bl	8005a50 <_free_r>
 80059f2:	69a3      	ldr	r3, [r4, #24]
 80059f4:	b1e3      	cbz	r3, 8005a30 <_reclaim_reent+0xb0>
 80059f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059f8:	4620      	mov	r0, r4
 80059fa:	4798      	blx	r3
 80059fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059fe:	b1b9      	cbz	r1, 8005a30 <_reclaim_reent+0xb0>
 8005a00:	4620      	mov	r0, r4
 8005a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a06:	f7ff bfad 	b.w	8005964 <cleanup_glue>
 8005a0a:	5949      	ldr	r1, [r1, r5]
 8005a0c:	b941      	cbnz	r1, 8005a20 <_reclaim_reent+0xa0>
 8005a0e:	3504      	adds	r5, #4
 8005a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a12:	2d80      	cmp	r5, #128	; 0x80
 8005a14:	68d9      	ldr	r1, [r3, #12]
 8005a16:	d1f8      	bne.n	8005a0a <_reclaim_reent+0x8a>
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 f819 	bl	8005a50 <_free_r>
 8005a1e:	e7ba      	b.n	8005996 <_reclaim_reent+0x16>
 8005a20:	680e      	ldr	r6, [r1, #0]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f814 	bl	8005a50 <_free_r>
 8005a28:	4631      	mov	r1, r6
 8005a2a:	e7ef      	b.n	8005a0c <_reclaim_reent+0x8c>
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	e7ef      	b.n	8005a10 <_reclaim_reent+0x90>
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	bf00      	nop
 8005a34:	20000010 	.word	0x20000010

08005a38 <__malloc_lock>:
 8005a38:	4801      	ldr	r0, [pc, #4]	; (8005a40 <__malloc_lock+0x8>)
 8005a3a:	f7ff bf7b 	b.w	8005934 <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20001b78 	.word	0x20001b78

08005a44 <__malloc_unlock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__malloc_unlock+0x8>)
 8005a46:	f7ff bf76 	b.w	8005936 <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20001b78 	.word	0x20001b78

08005a50 <_free_r>:
 8005a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a52:	2900      	cmp	r1, #0
 8005a54:	d044      	beq.n	8005ae0 <_free_r+0x90>
 8005a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a5a:	9001      	str	r0, [sp, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a62:	bfb8      	it	lt
 8005a64:	18e4      	addlt	r4, r4, r3
 8005a66:	f7ff ffe7 	bl	8005a38 <__malloc_lock>
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <_free_r+0x94>)
 8005a6c:	9801      	ldr	r0, [sp, #4]
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	b933      	cbnz	r3, 8005a80 <_free_r+0x30>
 8005a72:	6063      	str	r3, [r4, #4]
 8005a74:	6014      	str	r4, [r2, #0]
 8005a76:	b003      	add	sp, #12
 8005a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a7c:	f7ff bfe2 	b.w	8005a44 <__malloc_unlock>
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d908      	bls.n	8005a96 <_free_r+0x46>
 8005a84:	6825      	ldr	r5, [r4, #0]
 8005a86:	1961      	adds	r1, r4, r5
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	bf01      	itttt	eq
 8005a8c:	6819      	ldreq	r1, [r3, #0]
 8005a8e:	685b      	ldreq	r3, [r3, #4]
 8005a90:	1949      	addeq	r1, r1, r5
 8005a92:	6021      	streq	r1, [r4, #0]
 8005a94:	e7ed      	b.n	8005a72 <_free_r+0x22>
 8005a96:	461a      	mov	r2, r3
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b10b      	cbz	r3, 8005aa0 <_free_r+0x50>
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d9fa      	bls.n	8005a96 <_free_r+0x46>
 8005aa0:	6811      	ldr	r1, [r2, #0]
 8005aa2:	1855      	adds	r5, r2, r1
 8005aa4:	42a5      	cmp	r5, r4
 8005aa6:	d10b      	bne.n	8005ac0 <_free_r+0x70>
 8005aa8:	6824      	ldr	r4, [r4, #0]
 8005aaa:	4421      	add	r1, r4
 8005aac:	1854      	adds	r4, r2, r1
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	6011      	str	r1, [r2, #0]
 8005ab2:	d1e0      	bne.n	8005a76 <_free_r+0x26>
 8005ab4:	681c      	ldr	r4, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	6053      	str	r3, [r2, #4]
 8005aba:	4421      	add	r1, r4
 8005abc:	6011      	str	r1, [r2, #0]
 8005abe:	e7da      	b.n	8005a76 <_free_r+0x26>
 8005ac0:	d902      	bls.n	8005ac8 <_free_r+0x78>
 8005ac2:	230c      	movs	r3, #12
 8005ac4:	6003      	str	r3, [r0, #0]
 8005ac6:	e7d6      	b.n	8005a76 <_free_r+0x26>
 8005ac8:	6825      	ldr	r5, [r4, #0]
 8005aca:	1961      	adds	r1, r4, r5
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf04      	itt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	bf04      	itt	eq
 8005ad8:	1949      	addeq	r1, r1, r5
 8005ada:	6021      	streq	r1, [r4, #0]
 8005adc:	6054      	str	r4, [r2, #4]
 8005ade:	e7ca      	b.n	8005a76 <_free_r+0x26>
 8005ae0:	b003      	add	sp, #12
 8005ae2:	bd30      	pop	{r4, r5, pc}
 8005ae4:	20001b7c 	.word	0x20001b7c

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
